<?php
/**
 * GetEmailReputationResponseEntityDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * GetEmailReputationResponseEntityDetails Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class GetEmailReputationResponseEntityDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetEmailReputationResponse_entity_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'blacklisted' => 'bool',
        'malicious_activity' => 'bool',
        'malicious_activity_recent' => 'bool',
        'credentials_leaked' => 'bool',
        'credentials_leaked_recent' => 'bool',
        'data_breach' => 'bool',
        'first_seen' => 'string',
        'last_seen' => 'string',
        'domain_exists' => 'bool',
        'domain_reputation' => 'string',
        'new_domain' => 'bool',
        'days_since_domain_creation' => 'float',
        'suspicious_tld' => 'bool',
        'spam' => 'bool',
        'free_provider' => 'bool',
        'disposable' => 'bool',
        'deliverable' => 'bool',
        'accept_all' => 'bool',
        'valid_mx' => 'bool',
        'primary_mx' => 'string',
        'spoofable' => 'bool',
        'spf_strict' => 'bool',
        'dmarc_enforced' => 'bool',
        'profiles' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'blacklisted' => null,
        'malicious_activity' => null,
        'malicious_activity_recent' => null,
        'credentials_leaked' => null,
        'credentials_leaked_recent' => null,
        'data_breach' => null,
        'first_seen' => null,
        'last_seen' => null,
        'domain_exists' => null,
        'domain_reputation' => null,
        'new_domain' => null,
        'days_since_domain_creation' => null,
        'suspicious_tld' => null,
        'spam' => null,
        'free_provider' => null,
        'disposable' => null,
        'deliverable' => null,
        'accept_all' => null,
        'valid_mx' => null,
        'primary_mx' => null,
        'spoofable' => null,
        'spf_strict' => null,
        'dmarc_enforced' => null,
        'profiles' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'blacklisted' => false,
		'malicious_activity' => false,
		'malicious_activity_recent' => false,
		'credentials_leaked' => false,
		'credentials_leaked_recent' => false,
		'data_breach' => false,
		'first_seen' => false,
		'last_seen' => false,
		'domain_exists' => false,
		'domain_reputation' => false,
		'new_domain' => false,
		'days_since_domain_creation' => false,
		'suspicious_tld' => false,
		'spam' => false,
		'free_provider' => false,
		'disposable' => false,
		'deliverable' => false,
		'accept_all' => false,
		'valid_mx' => false,
		'primary_mx' => false,
		'spoofable' => false,
		'spf_strict' => false,
		'dmarc_enforced' => false,
		'profiles' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'blacklisted' => 'blacklisted',
        'malicious_activity' => 'malicious_activity',
        'malicious_activity_recent' => 'malicious_activity_recent',
        'credentials_leaked' => 'credentials_leaked',
        'credentials_leaked_recent' => 'credentials_leaked_recent',
        'data_breach' => 'data_breach',
        'first_seen' => 'first_seen',
        'last_seen' => 'last_seen',
        'domain_exists' => 'domain_exists',
        'domain_reputation' => 'domain_reputation',
        'new_domain' => 'new_domain',
        'days_since_domain_creation' => 'days_since_domain_creation',
        'suspicious_tld' => 'suspicious_tld',
        'spam' => 'spam',
        'free_provider' => 'free_provider',
        'disposable' => 'disposable',
        'deliverable' => 'deliverable',
        'accept_all' => 'accept_all',
        'valid_mx' => 'valid_mx',
        'primary_mx' => 'primary_mx',
        'spoofable' => 'spoofable',
        'spf_strict' => 'spf_strict',
        'dmarc_enforced' => 'dmarc_enforced',
        'profiles' => 'profiles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'blacklisted' => 'setBlacklisted',
        'malicious_activity' => 'setMaliciousActivity',
        'malicious_activity_recent' => 'setMaliciousActivityRecent',
        'credentials_leaked' => 'setCredentialsLeaked',
        'credentials_leaked_recent' => 'setCredentialsLeakedRecent',
        'data_breach' => 'setDataBreach',
        'first_seen' => 'setFirstSeen',
        'last_seen' => 'setLastSeen',
        'domain_exists' => 'setDomainExists',
        'domain_reputation' => 'setDomainReputation',
        'new_domain' => 'setNewDomain',
        'days_since_domain_creation' => 'setDaysSinceDomainCreation',
        'suspicious_tld' => 'setSuspiciousTld',
        'spam' => 'setSpam',
        'free_provider' => 'setFreeProvider',
        'disposable' => 'setDisposable',
        'deliverable' => 'setDeliverable',
        'accept_all' => 'setAcceptAll',
        'valid_mx' => 'setValidMx',
        'primary_mx' => 'setPrimaryMx',
        'spoofable' => 'setSpoofable',
        'spf_strict' => 'setSpfStrict',
        'dmarc_enforced' => 'setDmarcEnforced',
        'profiles' => 'setProfiles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'blacklisted' => 'getBlacklisted',
        'malicious_activity' => 'getMaliciousActivity',
        'malicious_activity_recent' => 'getMaliciousActivityRecent',
        'credentials_leaked' => 'getCredentialsLeaked',
        'credentials_leaked_recent' => 'getCredentialsLeakedRecent',
        'data_breach' => 'getDataBreach',
        'first_seen' => 'getFirstSeen',
        'last_seen' => 'getLastSeen',
        'domain_exists' => 'getDomainExists',
        'domain_reputation' => 'getDomainReputation',
        'new_domain' => 'getNewDomain',
        'days_since_domain_creation' => 'getDaysSinceDomainCreation',
        'suspicious_tld' => 'getSuspiciousTld',
        'spam' => 'getSpam',
        'free_provider' => 'getFreeProvider',
        'disposable' => 'getDisposable',
        'deliverable' => 'getDeliverable',
        'accept_all' => 'getAcceptAll',
        'valid_mx' => 'getValidMx',
        'primary_mx' => 'getPrimaryMx',
        'spoofable' => 'getSpoofable',
        'spf_strict' => 'getSpfStrict',
        'dmarc_enforced' => 'getDmarcEnforced',
        'profiles' => 'getProfiles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('blacklisted', $data ?? [], null);
        $this->setIfExists('malicious_activity', $data ?? [], null);
        $this->setIfExists('malicious_activity_recent', $data ?? [], null);
        $this->setIfExists('credentials_leaked', $data ?? [], null);
        $this->setIfExists('credentials_leaked_recent', $data ?? [], null);
        $this->setIfExists('data_breach', $data ?? [], null);
        $this->setIfExists('first_seen', $data ?? [], null);
        $this->setIfExists('last_seen', $data ?? [], null);
        $this->setIfExists('domain_exists', $data ?? [], null);
        $this->setIfExists('domain_reputation', $data ?? [], null);
        $this->setIfExists('new_domain', $data ?? [], null);
        $this->setIfExists('days_since_domain_creation', $data ?? [], null);
        $this->setIfExists('suspicious_tld', $data ?? [], null);
        $this->setIfExists('spam', $data ?? [], null);
        $this->setIfExists('free_provider', $data ?? [], null);
        $this->setIfExists('disposable', $data ?? [], null);
        $this->setIfExists('deliverable', $data ?? [], null);
        $this->setIfExists('accept_all', $data ?? [], null);
        $this->setIfExists('valid_mx', $data ?? [], null);
        $this->setIfExists('primary_mx', $data ?? [], null);
        $this->setIfExists('spoofable', $data ?? [], null);
        $this->setIfExists('spf_strict', $data ?? [], null);
        $this->setIfExists('dmarc_enforced', $data ?? [], null);
        $this->setIfExists('profiles', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets blacklisted
     *
     * @return bool|null
     */
    public function getBlacklisted()
    {
        return $this->container['blacklisted'];
    }

    /**
     * Sets blacklisted
     *
     * @param bool|null $blacklisted blacklisted
     *
     * @return self
     */
    public function setBlacklisted($blacklisted)
    {

        if (is_null($blacklisted)) {
            throw new \InvalidArgumentException('non-nullable blacklisted cannot be null');
        }

        $this->container['blacklisted'] = $blacklisted;

        return $this;
    }

    /**
     * Gets malicious_activity
     *
     * @return bool|null
     */
    public function getMaliciousActivity()
    {
        return $this->container['malicious_activity'];
    }

    /**
     * Sets malicious_activity
     *
     * @param bool|null $malicious_activity malicious_activity
     *
     * @return self
     */
    public function setMaliciousActivity($malicious_activity)
    {

        if (is_null($malicious_activity)) {
            throw new \InvalidArgumentException('non-nullable malicious_activity cannot be null');
        }

        $this->container['malicious_activity'] = $malicious_activity;

        return $this;
    }

    /**
     * Gets malicious_activity_recent
     *
     * @return bool|null
     */
    public function getMaliciousActivityRecent()
    {
        return $this->container['malicious_activity_recent'];
    }

    /**
     * Sets malicious_activity_recent
     *
     * @param bool|null $malicious_activity_recent malicious_activity_recent
     *
     * @return self
     */
    public function setMaliciousActivityRecent($malicious_activity_recent)
    {

        if (is_null($malicious_activity_recent)) {
            throw new \InvalidArgumentException('non-nullable malicious_activity_recent cannot be null');
        }

        $this->container['malicious_activity_recent'] = $malicious_activity_recent;

        return $this;
    }

    /**
     * Gets credentials_leaked
     *
     * @return bool|null
     */
    public function getCredentialsLeaked()
    {
        return $this->container['credentials_leaked'];
    }

    /**
     * Sets credentials_leaked
     *
     * @param bool|null $credentials_leaked credentials_leaked
     *
     * @return self
     */
    public function setCredentialsLeaked($credentials_leaked)
    {

        if (is_null($credentials_leaked)) {
            throw new \InvalidArgumentException('non-nullable credentials_leaked cannot be null');
        }

        $this->container['credentials_leaked'] = $credentials_leaked;

        return $this;
    }

    /**
     * Gets credentials_leaked_recent
     *
     * @return bool|null
     */
    public function getCredentialsLeakedRecent()
    {
        return $this->container['credentials_leaked_recent'];
    }

    /**
     * Sets credentials_leaked_recent
     *
     * @param bool|null $credentials_leaked_recent credentials_leaked_recent
     *
     * @return self
     */
    public function setCredentialsLeakedRecent($credentials_leaked_recent)
    {

        if (is_null($credentials_leaked_recent)) {
            throw new \InvalidArgumentException('non-nullable credentials_leaked_recent cannot be null');
        }

        $this->container['credentials_leaked_recent'] = $credentials_leaked_recent;

        return $this;
    }

    /**
     * Gets data_breach
     *
     * @return bool|null
     */
    public function getDataBreach()
    {
        return $this->container['data_breach'];
    }

    /**
     * Sets data_breach
     *
     * @param bool|null $data_breach data_breach
     *
     * @return self
     */
    public function setDataBreach($data_breach)
    {

        if (is_null($data_breach)) {
            throw new \InvalidArgumentException('non-nullable data_breach cannot be null');
        }

        $this->container['data_breach'] = $data_breach;

        return $this;
    }

    /**
     * Gets first_seen
     *
     * @return string|null
     */
    public function getFirstSeen()
    {
        return $this->container['first_seen'];
    }

    /**
     * Sets first_seen
     *
     * @param string|null $first_seen first_seen
     *
     * @return self
     */
    public function setFirstSeen($first_seen)
    {

        if (is_null($first_seen)) {
            throw new \InvalidArgumentException('non-nullable first_seen cannot be null');
        }

        $this->container['first_seen'] = $first_seen;

        return $this;
    }

    /**
     * Gets last_seen
     *
     * @return string|null
     */
    public function getLastSeen()
    {
        return $this->container['last_seen'];
    }

    /**
     * Sets last_seen
     *
     * @param string|null $last_seen last_seen
     *
     * @return self
     */
    public function setLastSeen($last_seen)
    {

        if (is_null($last_seen)) {
            throw new \InvalidArgumentException('non-nullable last_seen cannot be null');
        }

        $this->container['last_seen'] = $last_seen;

        return $this;
    }

    /**
     * Gets domain_exists
     *
     * @return bool|null
     */
    public function getDomainExists()
    {
        return $this->container['domain_exists'];
    }

    /**
     * Sets domain_exists
     *
     * @param bool|null $domain_exists domain_exists
     *
     * @return self
     */
    public function setDomainExists($domain_exists)
    {

        if (is_null($domain_exists)) {
            throw new \InvalidArgumentException('non-nullable domain_exists cannot be null');
        }

        $this->container['domain_exists'] = $domain_exists;

        return $this;
    }

    /**
     * Gets domain_reputation
     *
     * @return string|null
     */
    public function getDomainReputation()
    {
        return $this->container['domain_reputation'];
    }

    /**
     * Sets domain_reputation
     *
     * @param string|null $domain_reputation domain_reputation
     *
     * @return self
     */
    public function setDomainReputation($domain_reputation)
    {

        if (is_null($domain_reputation)) {
            throw new \InvalidArgumentException('non-nullable domain_reputation cannot be null');
        }

        $this->container['domain_reputation'] = $domain_reputation;

        return $this;
    }

    /**
     * Gets new_domain
     *
     * @return bool|null
     */
    public function getNewDomain()
    {
        return $this->container['new_domain'];
    }

    /**
     * Sets new_domain
     *
     * @param bool|null $new_domain new_domain
     *
     * @return self
     */
    public function setNewDomain($new_domain)
    {

        if (is_null($new_domain)) {
            throw new \InvalidArgumentException('non-nullable new_domain cannot be null');
        }

        $this->container['new_domain'] = $new_domain;

        return $this;
    }

    /**
     * Gets days_since_domain_creation
     *
     * @return float|null
     */
    public function getDaysSinceDomainCreation()
    {
        return $this->container['days_since_domain_creation'];
    }

    /**
     * Sets days_since_domain_creation
     *
     * @param float|null $days_since_domain_creation days_since_domain_creation
     *
     * @return self
     */
    public function setDaysSinceDomainCreation($days_since_domain_creation)
    {

        if (is_null($days_since_domain_creation)) {
            throw new \InvalidArgumentException('non-nullable days_since_domain_creation cannot be null');
        }

        $this->container['days_since_domain_creation'] = $days_since_domain_creation;

        return $this;
    }

    /**
     * Gets suspicious_tld
     *
     * @return bool|null
     */
    public function getSuspiciousTld()
    {
        return $this->container['suspicious_tld'];
    }

    /**
     * Sets suspicious_tld
     *
     * @param bool|null $suspicious_tld suspicious_tld
     *
     * @return self
     */
    public function setSuspiciousTld($suspicious_tld)
    {

        if (is_null($suspicious_tld)) {
            throw new \InvalidArgumentException('non-nullable suspicious_tld cannot be null');
        }

        $this->container['suspicious_tld'] = $suspicious_tld;

        return $this;
    }

    /**
     * Gets spam
     *
     * @return bool|null
     */
    public function getSpam()
    {
        return $this->container['spam'];
    }

    /**
     * Sets spam
     *
     * @param bool|null $spam spam
     *
     * @return self
     */
    public function setSpam($spam)
    {

        if (is_null($spam)) {
            throw new \InvalidArgumentException('non-nullable spam cannot be null');
        }

        $this->container['spam'] = $spam;

        return $this;
    }

    /**
     * Gets free_provider
     *
     * @return bool|null
     */
    public function getFreeProvider()
    {
        return $this->container['free_provider'];
    }

    /**
     * Sets free_provider
     *
     * @param bool|null $free_provider free_provider
     *
     * @return self
     */
    public function setFreeProvider($free_provider)
    {

        if (is_null($free_provider)) {
            throw new \InvalidArgumentException('non-nullable free_provider cannot be null');
        }

        $this->container['free_provider'] = $free_provider;

        return $this;
    }

    /**
     * Gets disposable
     *
     * @return bool|null
     */
    public function getDisposable()
    {
        return $this->container['disposable'];
    }

    /**
     * Sets disposable
     *
     * @param bool|null $disposable disposable
     *
     * @return self
     */
    public function setDisposable($disposable)
    {

        if (is_null($disposable)) {
            throw new \InvalidArgumentException('non-nullable disposable cannot be null');
        }

        $this->container['disposable'] = $disposable;

        return $this;
    }

    /**
     * Gets deliverable
     *
     * @return bool|null
     */
    public function getDeliverable()
    {
        return $this->container['deliverable'];
    }

    /**
     * Sets deliverable
     *
     * @param bool|null $deliverable deliverable
     *
     * @return self
     */
    public function setDeliverable($deliverable)
    {

        if (is_null($deliverable)) {
            throw new \InvalidArgumentException('non-nullable deliverable cannot be null');
        }

        $this->container['deliverable'] = $deliverable;

        return $this;
    }

    /**
     * Gets accept_all
     *
     * @return bool|null
     */
    public function getAcceptAll()
    {
        return $this->container['accept_all'];
    }

    /**
     * Sets accept_all
     *
     * @param bool|null $accept_all accept_all
     *
     * @return self
     */
    public function setAcceptAll($accept_all)
    {

        if (is_null($accept_all)) {
            throw new \InvalidArgumentException('non-nullable accept_all cannot be null');
        }

        $this->container['accept_all'] = $accept_all;

        return $this;
    }

    /**
     * Gets valid_mx
     *
     * @return bool|null
     */
    public function getValidMx()
    {
        return $this->container['valid_mx'];
    }

    /**
     * Sets valid_mx
     *
     * @param bool|null $valid_mx valid_mx
     *
     * @return self
     */
    public function setValidMx($valid_mx)
    {

        if (is_null($valid_mx)) {
            throw new \InvalidArgumentException('non-nullable valid_mx cannot be null');
        }

        $this->container['valid_mx'] = $valid_mx;

        return $this;
    }

    /**
     * Gets primary_mx
     *
     * @return string|null
     */
    public function getPrimaryMx()
    {
        return $this->container['primary_mx'];
    }

    /**
     * Sets primary_mx
     *
     * @param string|null $primary_mx primary_mx
     *
     * @return self
     */
    public function setPrimaryMx($primary_mx)
    {

        if (is_null($primary_mx)) {
            throw new \InvalidArgumentException('non-nullable primary_mx cannot be null');
        }

        $this->container['primary_mx'] = $primary_mx;

        return $this;
    }

    /**
     * Gets spoofable
     *
     * @return bool|null
     */
    public function getSpoofable()
    {
        return $this->container['spoofable'];
    }

    /**
     * Sets spoofable
     *
     * @param bool|null $spoofable spoofable
     *
     * @return self
     */
    public function setSpoofable($spoofable)
    {

        if (is_null($spoofable)) {
            throw new \InvalidArgumentException('non-nullable spoofable cannot be null');
        }

        $this->container['spoofable'] = $spoofable;

        return $this;
    }

    /**
     * Gets spf_strict
     *
     * @return bool|null
     */
    public function getSpfStrict()
    {
        return $this->container['spf_strict'];
    }

    /**
     * Sets spf_strict
     *
     * @param bool|null $spf_strict spf_strict
     *
     * @return self
     */
    public function setSpfStrict($spf_strict)
    {

        if (is_null($spf_strict)) {
            throw new \InvalidArgumentException('non-nullable spf_strict cannot be null');
        }

        $this->container['spf_strict'] = $spf_strict;

        return $this;
    }

    /**
     * Gets dmarc_enforced
     *
     * @return bool|null
     */
    public function getDmarcEnforced()
    {
        return $this->container['dmarc_enforced'];
    }

    /**
     * Sets dmarc_enforced
     *
     * @param bool|null $dmarc_enforced dmarc_enforced
     *
     * @return self
     */
    public function setDmarcEnforced($dmarc_enforced)
    {

        if (is_null($dmarc_enforced)) {
            throw new \InvalidArgumentException('non-nullable dmarc_enforced cannot be null');
        }

        $this->container['dmarc_enforced'] = $dmarc_enforced;

        return $this;
    }

    /**
     * Gets profiles
     *
     * @return string[]|null
     */
    public function getProfiles()
    {
        return $this->container['profiles'];
    }

    /**
     * Sets profiles
     *
     * @param string[]|null $profiles profiles
     *
     * @return self
     */
    public function setProfiles($profiles)
    {

        if (is_null($profiles)) {
            throw new \InvalidArgumentException('non-nullable profiles cannot be null');
        }

        $this->container['profiles'] = $profiles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


