<?php
/**
 * GetAccountAnalysisResponseEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * GetAccountAnalysisResponseEntity Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class GetAccountAnalysisResponseEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetAccountAnalysisResponse_entity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_breakdown' => '\Dojah\Model\GetAccountAnalysisResponseEntityAccountBreakdown',
        'expense_breakdown' => '\Dojah\Model\GetAccountAnalysisResponseEntityExpenseBreakdown',
        'funds_management' => '\Dojah\Model\GetAccountAnalysisResponseEntityFundsManagement',
        'inflow_breakdown' => '\Dojah\Model\GetAccountAnalysisResponseEntityInflowBreakdown',
        'transaction_routine_breakdown' => '\Dojah\Model\GetAccountAnalysisResponseEntityTransactionRoutineBreakdown',
        'status' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_breakdown' => null,
        'expense_breakdown' => null,
        'funds_management' => null,
        'inflow_breakdown' => null,
        'transaction_routine_breakdown' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_breakdown' => false,
		'expense_breakdown' => false,
		'funds_management' => false,
		'inflow_breakdown' => false,
		'transaction_routine_breakdown' => false,
		'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_breakdown' => 'accountBreakdown',
        'expense_breakdown' => 'expenseBreakdown',
        'funds_management' => 'fundsManagement',
        'inflow_breakdown' => 'inflowBreakdown',
        'transaction_routine_breakdown' => 'transactionRoutineBreakdown',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_breakdown' => 'setAccountBreakdown',
        'expense_breakdown' => 'setExpenseBreakdown',
        'funds_management' => 'setFundsManagement',
        'inflow_breakdown' => 'setInflowBreakdown',
        'transaction_routine_breakdown' => 'setTransactionRoutineBreakdown',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_breakdown' => 'getAccountBreakdown',
        'expense_breakdown' => 'getExpenseBreakdown',
        'funds_management' => 'getFundsManagement',
        'inflow_breakdown' => 'getInflowBreakdown',
        'transaction_routine_breakdown' => 'getTransactionRoutineBreakdown',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_breakdown', $data ?? [], null);
        $this->setIfExists('expense_breakdown', $data ?? [], null);
        $this->setIfExists('funds_management', $data ?? [], null);
        $this->setIfExists('inflow_breakdown', $data ?? [], null);
        $this->setIfExists('transaction_routine_breakdown', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_breakdown
     *
     * @return \Dojah\Model\GetAccountAnalysisResponseEntityAccountBreakdown|null
     */
    public function getAccountBreakdown()
    {
        return $this->container['account_breakdown'];
    }

    /**
     * Sets account_breakdown
     *
     * @param \Dojah\Model\GetAccountAnalysisResponseEntityAccountBreakdown|null $account_breakdown account_breakdown
     *
     * @return self
     */
    public function setAccountBreakdown($account_breakdown)
    {

        if (is_null($account_breakdown)) {
            throw new \InvalidArgumentException('non-nullable account_breakdown cannot be null');
        }

        $this->container['account_breakdown'] = $account_breakdown;

        return $this;
    }

    /**
     * Gets expense_breakdown
     *
     * @return \Dojah\Model\GetAccountAnalysisResponseEntityExpenseBreakdown|null
     */
    public function getExpenseBreakdown()
    {
        return $this->container['expense_breakdown'];
    }

    /**
     * Sets expense_breakdown
     *
     * @param \Dojah\Model\GetAccountAnalysisResponseEntityExpenseBreakdown|null $expense_breakdown expense_breakdown
     *
     * @return self
     */
    public function setExpenseBreakdown($expense_breakdown)
    {

        if (is_null($expense_breakdown)) {
            throw new \InvalidArgumentException('non-nullable expense_breakdown cannot be null');
        }

        $this->container['expense_breakdown'] = $expense_breakdown;

        return $this;
    }

    /**
     * Gets funds_management
     *
     * @return \Dojah\Model\GetAccountAnalysisResponseEntityFundsManagement|null
     */
    public function getFundsManagement()
    {
        return $this->container['funds_management'];
    }

    /**
     * Sets funds_management
     *
     * @param \Dojah\Model\GetAccountAnalysisResponseEntityFundsManagement|null $funds_management funds_management
     *
     * @return self
     */
    public function setFundsManagement($funds_management)
    {

        if (is_null($funds_management)) {
            throw new \InvalidArgumentException('non-nullable funds_management cannot be null');
        }

        $this->container['funds_management'] = $funds_management;

        return $this;
    }

    /**
     * Gets inflow_breakdown
     *
     * @return \Dojah\Model\GetAccountAnalysisResponseEntityInflowBreakdown|null
     */
    public function getInflowBreakdown()
    {
        return $this->container['inflow_breakdown'];
    }

    /**
     * Sets inflow_breakdown
     *
     * @param \Dojah\Model\GetAccountAnalysisResponseEntityInflowBreakdown|null $inflow_breakdown inflow_breakdown
     *
     * @return self
     */
    public function setInflowBreakdown($inflow_breakdown)
    {

        if (is_null($inflow_breakdown)) {
            throw new \InvalidArgumentException('non-nullable inflow_breakdown cannot be null');
        }

        $this->container['inflow_breakdown'] = $inflow_breakdown;

        return $this;
    }

    /**
     * Gets transaction_routine_breakdown
     *
     * @return \Dojah\Model\GetAccountAnalysisResponseEntityTransactionRoutineBreakdown|null
     */
    public function getTransactionRoutineBreakdown()
    {
        return $this->container['transaction_routine_breakdown'];
    }

    /**
     * Sets transaction_routine_breakdown
     *
     * @param \Dojah\Model\GetAccountAnalysisResponseEntityTransactionRoutineBreakdown|null $transaction_routine_breakdown transaction_routine_breakdown
     *
     * @return self
     */
    public function setTransactionRoutineBreakdown($transaction_routine_breakdown)
    {

        if (is_null($transaction_routine_breakdown)) {
            throw new \InvalidArgumentException('non-nullable transaction_routine_breakdown cannot be null');
        }

        $this->container['transaction_routine_breakdown'] = $transaction_routine_breakdown;

        return $this;
    }

    /**
     * Gets status
     *
     * @return float|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param float|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


