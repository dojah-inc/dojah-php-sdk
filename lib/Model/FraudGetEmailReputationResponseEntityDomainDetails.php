<?php
/**
 * FraudGetEmailReputationResponseEntityDomainDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH Publilc APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * FraudGetEmailReputationResponseEntityDomainDetails Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class FraudGetEmailReputationResponseEntityDomainDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FraudGetEmailReputationResponse_entity_domain_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'domain' => 'string',
        'tld' => 'string',
        'registered' => 'bool',
        'created' => 'string',
        'updated' => 'string',
        'expires' => 'string',
        'registrar_name' => 'string',
        'registered_to' => 'string',
        'disposable' => 'bool',
        'free' => 'bool',
        'custom' => 'bool',
        'dmarc_enforced' => 'bool',
        'spf_strict' => 'bool',
        'valid_mx' => 'bool',
        'accept_all' => 'bool',
        'suspicious_tld' => 'bool',
        'website_exists' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'domain' => null,
        'tld' => null,
        'registered' => null,
        'created' => null,
        'updated' => null,
        'expires' => null,
        'registrar_name' => null,
        'registered_to' => null,
        'disposable' => null,
        'free' => null,
        'custom' => null,
        'dmarc_enforced' => null,
        'spf_strict' => null,
        'valid_mx' => null,
        'accept_all' => null,
        'suspicious_tld' => null,
        'website_exists' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'domain' => false,
		'tld' => false,
		'registered' => false,
		'created' => false,
		'updated' => false,
		'expires' => false,
		'registrar_name' => false,
		'registered_to' => true,
		'disposable' => false,
		'free' => false,
		'custom' => false,
		'dmarc_enforced' => false,
		'spf_strict' => false,
		'valid_mx' => false,
		'accept_all' => false,
		'suspicious_tld' => false,
		'website_exists' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
        'tld' => 'tld',
        'registered' => 'registered',
        'created' => 'created',
        'updated' => 'updated',
        'expires' => 'expires',
        'registrar_name' => 'registrar_name',
        'registered_to' => 'registered_to',
        'disposable' => 'disposable',
        'free' => 'free',
        'custom' => 'custom',
        'dmarc_enforced' => 'dmarc_enforced',
        'spf_strict' => 'spf_strict',
        'valid_mx' => 'valid_mx',
        'accept_all' => 'accept_all',
        'suspicious_tld' => 'suspicious_tld',
        'website_exists' => 'website_exists'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'tld' => 'setTld',
        'registered' => 'setRegistered',
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'expires' => 'setExpires',
        'registrar_name' => 'setRegistrarName',
        'registered_to' => 'setRegisteredTo',
        'disposable' => 'setDisposable',
        'free' => 'setFree',
        'custom' => 'setCustom',
        'dmarc_enforced' => 'setDmarcEnforced',
        'spf_strict' => 'setSpfStrict',
        'valid_mx' => 'setValidMx',
        'accept_all' => 'setAcceptAll',
        'suspicious_tld' => 'setSuspiciousTld',
        'website_exists' => 'setWebsiteExists'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'tld' => 'getTld',
        'registered' => 'getRegistered',
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'expires' => 'getExpires',
        'registrar_name' => 'getRegistrarName',
        'registered_to' => 'getRegisteredTo',
        'disposable' => 'getDisposable',
        'free' => 'getFree',
        'custom' => 'getCustom',
        'dmarc_enforced' => 'getDmarcEnforced',
        'spf_strict' => 'getSpfStrict',
        'valid_mx' => 'getValidMx',
        'accept_all' => 'getAcceptAll',
        'suspicious_tld' => 'getSuspiciousTld',
        'website_exists' => 'getWebsiteExists'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('tld', $data ?? [], null);
        $this->setIfExists('registered', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('expires', $data ?? [], null);
        $this->setIfExists('registrar_name', $data ?? [], null);
        $this->setIfExists('registered_to', $data ?? [], null);
        $this->setIfExists('disposable', $data ?? [], null);
        $this->setIfExists('free', $data ?? [], null);
        $this->setIfExists('custom', $data ?? [], null);
        $this->setIfExists('dmarc_enforced', $data ?? [], null);
        $this->setIfExists('spf_strict', $data ?? [], null);
        $this->setIfExists('valid_mx', $data ?? [], null);
        $this->setIfExists('accept_all', $data ?? [], null);
        $this->setIfExists('suspicious_tld', $data ?? [], null);
        $this->setIfExists('website_exists', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {

        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets tld
     *
     * @return string|null
     */
    public function getTld()
    {
        return $this->container['tld'];
    }

    /**
     * Sets tld
     *
     * @param string|null $tld tld
     *
     * @return self
     */
    public function setTld($tld)
    {

        if (is_null($tld)) {
            throw new \InvalidArgumentException('non-nullable tld cannot be null');
        }

        $this->container['tld'] = $tld;

        return $this;
    }

    /**
     * Gets registered
     *
     * @return bool|null
     */
    public function getRegistered()
    {
        return $this->container['registered'];
    }

    /**
     * Sets registered
     *
     * @param bool|null $registered registered
     *
     * @return self
     */
    public function setRegistered($registered)
    {

        if (is_null($registered)) {
            throw new \InvalidArgumentException('non-nullable registered cannot be null');
        }

        $this->container['registered'] = $registered;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string|null $created created
     *
     * @return self
     */
    public function setCreated($created)
    {

        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }

        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return string|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param string|null $updated updated
     *
     * @return self
     */
    public function setUpdated($updated)
    {

        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }

        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets expires
     *
     * @return string|null
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     *
     * @param string|null $expires expires
     *
     * @return self
     */
    public function setExpires($expires)
    {

        if (is_null($expires)) {
            throw new \InvalidArgumentException('non-nullable expires cannot be null');
        }

        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets registrar_name
     *
     * @return string|null
     */
    public function getRegistrarName()
    {
        return $this->container['registrar_name'];
    }

    /**
     * Sets registrar_name
     *
     * @param string|null $registrar_name registrar_name
     *
     * @return self
     */
    public function setRegistrarName($registrar_name)
    {

        if (is_null($registrar_name)) {
            throw new \InvalidArgumentException('non-nullable registrar_name cannot be null');
        }

        $this->container['registrar_name'] = $registrar_name;

        return $this;
    }

    /**
     * Gets registered_to
     *
     * @return string|null
     */
    public function getRegisteredTo()
    {
        return $this->container['registered_to'];
    }

    /**
     * Sets registered_to
     *
     * @param string|null $registered_to registered_to
     *
     * @return self
     */
    public function setRegisteredTo($registered_to)
    {

        if (is_null($registered_to)) {
            array_push($this->openAPINullablesSetToNull, 'registered_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registered_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['registered_to'] = $registered_to;

        return $this;
    }

    /**
     * Gets disposable
     *
     * @return bool|null
     */
    public function getDisposable()
    {
        return $this->container['disposable'];
    }

    /**
     * Sets disposable
     *
     * @param bool|null $disposable disposable
     *
     * @return self
     */
    public function setDisposable($disposable)
    {

        if (is_null($disposable)) {
            throw new \InvalidArgumentException('non-nullable disposable cannot be null');
        }

        $this->container['disposable'] = $disposable;

        return $this;
    }

    /**
     * Gets free
     *
     * @return bool|null
     */
    public function getFree()
    {
        return $this->container['free'];
    }

    /**
     * Sets free
     *
     * @param bool|null $free free
     *
     * @return self
     */
    public function setFree($free)
    {

        if (is_null($free)) {
            throw new \InvalidArgumentException('non-nullable free cannot be null');
        }

        $this->container['free'] = $free;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return bool|null
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param bool|null $custom custom
     *
     * @return self
     */
    public function setCustom($custom)
    {

        if (is_null($custom)) {
            throw new \InvalidArgumentException('non-nullable custom cannot be null');
        }

        $this->container['custom'] = $custom;

        return $this;
    }

    /**
     * Gets dmarc_enforced
     *
     * @return bool|null
     */
    public function getDmarcEnforced()
    {
        return $this->container['dmarc_enforced'];
    }

    /**
     * Sets dmarc_enforced
     *
     * @param bool|null $dmarc_enforced dmarc_enforced
     *
     * @return self
     */
    public function setDmarcEnforced($dmarc_enforced)
    {

        if (is_null($dmarc_enforced)) {
            throw new \InvalidArgumentException('non-nullable dmarc_enforced cannot be null');
        }

        $this->container['dmarc_enforced'] = $dmarc_enforced;

        return $this;
    }

    /**
     * Gets spf_strict
     *
     * @return bool|null
     */
    public function getSpfStrict()
    {
        return $this->container['spf_strict'];
    }

    /**
     * Sets spf_strict
     *
     * @param bool|null $spf_strict spf_strict
     *
     * @return self
     */
    public function setSpfStrict($spf_strict)
    {

        if (is_null($spf_strict)) {
            throw new \InvalidArgumentException('non-nullable spf_strict cannot be null');
        }

        $this->container['spf_strict'] = $spf_strict;

        return $this;
    }

    /**
     * Gets valid_mx
     *
     * @return bool|null
     */
    public function getValidMx()
    {
        return $this->container['valid_mx'];
    }

    /**
     * Sets valid_mx
     *
     * @param bool|null $valid_mx valid_mx
     *
     * @return self
     */
    public function setValidMx($valid_mx)
    {

        if (is_null($valid_mx)) {
            throw new \InvalidArgumentException('non-nullable valid_mx cannot be null');
        }

        $this->container['valid_mx'] = $valid_mx;

        return $this;
    }

    /**
     * Gets accept_all
     *
     * @return bool|null
     */
    public function getAcceptAll()
    {
        return $this->container['accept_all'];
    }

    /**
     * Sets accept_all
     *
     * @param bool|null $accept_all accept_all
     *
     * @return self
     */
    public function setAcceptAll($accept_all)
    {

        if (is_null($accept_all)) {
            throw new \InvalidArgumentException('non-nullable accept_all cannot be null');
        }

        $this->container['accept_all'] = $accept_all;

        return $this;
    }

    /**
     * Gets suspicious_tld
     *
     * @return bool|null
     */
    public function getSuspiciousTld()
    {
        return $this->container['suspicious_tld'];
    }

    /**
     * Sets suspicious_tld
     *
     * @param bool|null $suspicious_tld suspicious_tld
     *
     * @return self
     */
    public function setSuspiciousTld($suspicious_tld)
    {

        if (is_null($suspicious_tld)) {
            throw new \InvalidArgumentException('non-nullable suspicious_tld cannot be null');
        }

        $this->container['suspicious_tld'] = $suspicious_tld;

        return $this;
    }

    /**
     * Gets website_exists
     *
     * @return bool|null
     */
    public function getWebsiteExists()
    {
        return $this->container['website_exists'];
    }

    /**
     * Sets website_exists
     *
     * @param bool|null $website_exists website_exists
     *
     * @return self
     */
    public function setWebsiteExists($website_exists)
    {

        if (is_null($website_exists)) {
            throw new \InvalidArgumentException('non-nullable website_exists cannot be null');
        }

        $this->container['website_exists'] = $website_exists;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


