<?php
/**
 * NigeriaKycGetNinResponseEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH Publilc APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * NigeriaKycGetNinResponseEntity Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class NigeriaKycGetNinResponseEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NigeriaKycGetNinResponse_entity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'birth_country' => 'string',
        'birth_date' => 'string',
        'birth_lga' => 'string',
        'birth_state' => 'string',
        'central_id' => 'string',
        'educational_level' => 'string',
        'email' => 'string',
        'employment_status' => 'string',
        'first_name' => 'string',
        'gender' => 'string',
        'height' => 'string',
        'maiden_name' => 'string',
        'marital_status' => 'string',
        'middle_name' => 'string',
        'nationality' => 'string',
        'nok_address_1' => 'string',
        'nok_address_2' => 'string[]',
        'nok_first_name' => 'string',
        'nok_lga' => 'string',
        'nok_state' => 'string',
        'nok_surname' => 'string',
        'nok_town' => 'string',
        'origin_lga' => 'string',
        'origin_place' => 'string',
        'origin_state' => 'string',
        'picture' => 'string',
        'profession' => 'string',
        'reference' => 'string',
        'religion' => 'string',
        'residence_address' => 'string',
        'residence_lga' => 'string',
        'residence_state' => 'string',
        'residence_status' => 'string',
        'residence_town' => 'string',
        'signature' => 'string',
        'spoken_language' => 'string',
        'surname' => 'string',
        'telephone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'birth_country' => null,
        'birth_date' => null,
        'birth_lga' => null,
        'birth_state' => null,
        'central_id' => null,
        'educational_level' => null,
        'email' => null,
        'employment_status' => null,
        'first_name' => null,
        'gender' => null,
        'height' => null,
        'maiden_name' => null,
        'marital_status' => null,
        'middle_name' => null,
        'nationality' => null,
        'nok_address_1' => null,
        'nok_address_2' => null,
        'nok_first_name' => null,
        'nok_lga' => null,
        'nok_state' => null,
        'nok_surname' => null,
        'nok_town' => null,
        'origin_lga' => null,
        'origin_place' => null,
        'origin_state' => null,
        'picture' => null,
        'profession' => null,
        'reference' => null,
        'religion' => null,
        'residence_address' => null,
        'residence_lga' => null,
        'residence_state' => null,
        'residence_status' => null,
        'residence_town' => null,
        'signature' => null,
        'spoken_language' => null,
        'surname' => null,
        'telephone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'title' => false,
		'birth_country' => false,
		'birth_date' => false,
		'birth_lga' => false,
		'birth_state' => false,
		'central_id' => false,
		'educational_level' => false,
		'email' => true,
		'employment_status' => false,
		'first_name' => false,
		'gender' => false,
		'height' => false,
		'maiden_name' => true,
		'marital_status' => false,
		'middle_name' => false,
		'nationality' => false,
		'nok_address_1' => false,
		'nok_address_2' => false,
		'nok_first_name' => false,
		'nok_lga' => false,
		'nok_state' => false,
		'nok_surname' => false,
		'nok_town' => false,
		'origin_lga' => false,
		'origin_place' => false,
		'origin_state' => false,
		'picture' => false,
		'profession' => false,
		'reference' => false,
		'religion' => false,
		'residence_address' => false,
		'residence_lga' => false,
		'residence_state' => false,
		'residence_status' => false,
		'residence_town' => false,
		'signature' => false,
		'spoken_language' => false,
		'surname' => false,
		'telephone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'birth_country' => 'birth_country',
        'birth_date' => 'birth_date',
        'birth_lga' => 'birth_lga',
        'birth_state' => 'birth_state',
        'central_id' => 'central_id',
        'educational_level' => 'educational_level',
        'email' => 'email',
        'employment_status' => 'employment_status',
        'first_name' => 'first_name',
        'gender' => 'gender',
        'height' => 'height',
        'maiden_name' => 'maiden_name',
        'marital_status' => 'marital_status',
        'middle_name' => 'middle_name',
        'nationality' => 'nationality',
        'nok_address_1' => 'nok_address_1',
        'nok_address_2' => 'nok_address_2',
        'nok_first_name' => 'nok_first_name',
        'nok_lga' => 'nok_lga',
        'nok_state' => 'nok_state',
        'nok_surname' => 'nok_surname',
        'nok_town' => 'nok_town',
        'origin_lga' => 'origin_lga',
        'origin_place' => 'origin_place',
        'origin_state' => 'origin_state',
        'picture' => 'picture',
        'profession' => 'profession',
        'reference' => 'reference',
        'religion' => 'religion',
        'residence_address' => 'residence_address',
        'residence_lga' => 'residence_lga',
        'residence_state' => 'residence_state',
        'residence_status' => 'residence_status',
        'residence_town' => 'residence_town',
        'signature' => 'signature',
        'spoken_language' => 'spoken_language',
        'surname' => 'surname',
        'telephone' => 'telephone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'birth_country' => 'setBirthCountry',
        'birth_date' => 'setBirthDate',
        'birth_lga' => 'setBirthLga',
        'birth_state' => 'setBirthState',
        'central_id' => 'setCentralId',
        'educational_level' => 'setEducationalLevel',
        'email' => 'setEmail',
        'employment_status' => 'setEmploymentStatus',
        'first_name' => 'setFirstName',
        'gender' => 'setGender',
        'height' => 'setHeight',
        'maiden_name' => 'setMaidenName',
        'marital_status' => 'setMaritalStatus',
        'middle_name' => 'setMiddleName',
        'nationality' => 'setNationality',
        'nok_address_1' => 'setNokAddress1',
        'nok_address_2' => 'setNokAddress2',
        'nok_first_name' => 'setNokFirstName',
        'nok_lga' => 'setNokLga',
        'nok_state' => 'setNokState',
        'nok_surname' => 'setNokSurname',
        'nok_town' => 'setNokTown',
        'origin_lga' => 'setOriginLga',
        'origin_place' => 'setOriginPlace',
        'origin_state' => 'setOriginState',
        'picture' => 'setPicture',
        'profession' => 'setProfession',
        'reference' => 'setReference',
        'religion' => 'setReligion',
        'residence_address' => 'setResidenceAddress',
        'residence_lga' => 'setResidenceLga',
        'residence_state' => 'setResidenceState',
        'residence_status' => 'setResidenceStatus',
        'residence_town' => 'setResidenceTown',
        'signature' => 'setSignature',
        'spoken_language' => 'setSpokenLanguage',
        'surname' => 'setSurname',
        'telephone' => 'setTelephone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'birth_country' => 'getBirthCountry',
        'birth_date' => 'getBirthDate',
        'birth_lga' => 'getBirthLga',
        'birth_state' => 'getBirthState',
        'central_id' => 'getCentralId',
        'educational_level' => 'getEducationalLevel',
        'email' => 'getEmail',
        'employment_status' => 'getEmploymentStatus',
        'first_name' => 'getFirstName',
        'gender' => 'getGender',
        'height' => 'getHeight',
        'maiden_name' => 'getMaidenName',
        'marital_status' => 'getMaritalStatus',
        'middle_name' => 'getMiddleName',
        'nationality' => 'getNationality',
        'nok_address_1' => 'getNokAddress1',
        'nok_address_2' => 'getNokAddress2',
        'nok_first_name' => 'getNokFirstName',
        'nok_lga' => 'getNokLga',
        'nok_state' => 'getNokState',
        'nok_surname' => 'getNokSurname',
        'nok_town' => 'getNokTown',
        'origin_lga' => 'getOriginLga',
        'origin_place' => 'getOriginPlace',
        'origin_state' => 'getOriginState',
        'picture' => 'getPicture',
        'profession' => 'getProfession',
        'reference' => 'getReference',
        'religion' => 'getReligion',
        'residence_address' => 'getResidenceAddress',
        'residence_lga' => 'getResidenceLga',
        'residence_state' => 'getResidenceState',
        'residence_status' => 'getResidenceStatus',
        'residence_town' => 'getResidenceTown',
        'signature' => 'getSignature',
        'spoken_language' => 'getSpokenLanguage',
        'surname' => 'getSurname',
        'telephone' => 'getTelephone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('birth_country', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('birth_lga', $data ?? [], null);
        $this->setIfExists('birth_state', $data ?? [], null);
        $this->setIfExists('central_id', $data ?? [], null);
        $this->setIfExists('educational_level', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('employment_status', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('maiden_name', $data ?? [], null);
        $this->setIfExists('marital_status', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('nationality', $data ?? [], null);
        $this->setIfExists('nok_address_1', $data ?? [], null);
        $this->setIfExists('nok_address_2', $data ?? [], null);
        $this->setIfExists('nok_first_name', $data ?? [], null);
        $this->setIfExists('nok_lga', $data ?? [], null);
        $this->setIfExists('nok_state', $data ?? [], null);
        $this->setIfExists('nok_surname', $data ?? [], null);
        $this->setIfExists('nok_town', $data ?? [], null);
        $this->setIfExists('origin_lga', $data ?? [], null);
        $this->setIfExists('origin_place', $data ?? [], null);
        $this->setIfExists('origin_state', $data ?? [], null);
        $this->setIfExists('picture', $data ?? [], null);
        $this->setIfExists('profession', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('religion', $data ?? [], null);
        $this->setIfExists('residence_address', $data ?? [], null);
        $this->setIfExists('residence_lga', $data ?? [], null);
        $this->setIfExists('residence_state', $data ?? [], null);
        $this->setIfExists('residence_status', $data ?? [], null);
        $this->setIfExists('residence_town', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
        $this->setIfExists('spoken_language', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('telephone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {

        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets birth_country
     *
     * @return string|null
     */
    public function getBirthCountry()
    {
        return $this->container['birth_country'];
    }

    /**
     * Sets birth_country
     *
     * @param string|null $birth_country birth_country
     *
     * @return self
     */
    public function setBirthCountry($birth_country)
    {

        if (is_null($birth_country)) {
            throw new \InvalidArgumentException('non-nullable birth_country cannot be null');
        }

        $this->container['birth_country'] = $birth_country;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string|null $birth_date birth_date
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {

        if (is_null($birth_date)) {
            throw new \InvalidArgumentException('non-nullable birth_date cannot be null');
        }

        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets birth_lga
     *
     * @return string|null
     */
    public function getBirthLga()
    {
        return $this->container['birth_lga'];
    }

    /**
     * Sets birth_lga
     *
     * @param string|null $birth_lga birth_lga
     *
     * @return self
     */
    public function setBirthLga($birth_lga)
    {

        if (is_null($birth_lga)) {
            throw new \InvalidArgumentException('non-nullable birth_lga cannot be null');
        }

        $this->container['birth_lga'] = $birth_lga;

        return $this;
    }

    /**
     * Gets birth_state
     *
     * @return string|null
     */
    public function getBirthState()
    {
        return $this->container['birth_state'];
    }

    /**
     * Sets birth_state
     *
     * @param string|null $birth_state birth_state
     *
     * @return self
     */
    public function setBirthState($birth_state)
    {

        if (is_null($birth_state)) {
            throw new \InvalidArgumentException('non-nullable birth_state cannot be null');
        }

        $this->container['birth_state'] = $birth_state;

        return $this;
    }

    /**
     * Gets central_id
     *
     * @return string|null
     */
    public function getCentralId()
    {
        return $this->container['central_id'];
    }

    /**
     * Sets central_id
     *
     * @param string|null $central_id central_id
     *
     * @return self
     */
    public function setCentralId($central_id)
    {

        if (is_null($central_id)) {
            throw new \InvalidArgumentException('non-nullable central_id cannot be null');
        }

        $this->container['central_id'] = $central_id;

        return $this;
    }

    /**
     * Gets educational_level
     *
     * @return string|null
     */
    public function getEducationalLevel()
    {
        return $this->container['educational_level'];
    }

    /**
     * Sets educational_level
     *
     * @param string|null $educational_level educational_level
     *
     * @return self
     */
    public function setEducationalLevel($educational_level)
    {

        if (is_null($educational_level)) {
            throw new \InvalidArgumentException('non-nullable educational_level cannot be null');
        }

        $this->container['educational_level'] = $educational_level;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {

        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets employment_status
     *
     * @return string|null
     */
    public function getEmploymentStatus()
    {
        return $this->container['employment_status'];
    }

    /**
     * Sets employment_status
     *
     * @param string|null $employment_status employment_status
     *
     * @return self
     */
    public function setEmploymentStatus($employment_status)
    {

        if (is_null($employment_status)) {
            throw new \InvalidArgumentException('non-nullable employment_status cannot be null');
        }

        $this->container['employment_status'] = $employment_status;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {

        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {

        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }

        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string|null $height height
     *
     * @return self
     */
    public function setHeight($height)
    {

        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets maiden_name
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maiden_name'];
    }

    /**
     * Sets maiden_name
     *
     * @param string|null $maiden_name maiden_name
     *
     * @return self
     */
    public function setMaidenName($maiden_name)
    {

        if (is_null($maiden_name)) {
            array_push($this->openAPINullablesSetToNull, 'maiden_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maiden_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['maiden_name'] = $maiden_name;

        return $this;
    }

    /**
     * Gets marital_status
     *
     * @return string|null
     */
    public function getMaritalStatus()
    {
        return $this->container['marital_status'];
    }

    /**
     * Sets marital_status
     *
     * @param string|null $marital_status marital_status
     *
     * @return self
     */
    public function setMaritalStatus($marital_status)
    {

        if (is_null($marital_status)) {
            throw new \InvalidArgumentException('non-nullable marital_status cannot be null');
        }

        $this->container['marital_status'] = $marital_status;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name middle_name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {

        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }

        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string|null $nationality nationality
     *
     * @return self
     */
    public function setNationality($nationality)
    {

        if (is_null($nationality)) {
            throw new \InvalidArgumentException('non-nullable nationality cannot be null');
        }

        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets nok_address_1
     *
     * @return string|null
     */
    public function getNokAddress1()
    {
        return $this->container['nok_address_1'];
    }

    /**
     * Sets nok_address_1
     *
     * @param string|null $nok_address_1 nok_address_1
     *
     * @return self
     */
    public function setNokAddress1($nok_address_1)
    {

        if (is_null($nok_address_1)) {
            throw new \InvalidArgumentException('non-nullable nok_address_1 cannot be null');
        }

        $this->container['nok_address_1'] = $nok_address_1;

        return $this;
    }

    /**
     * Gets nok_address_2
     *
     * @return string[]|null
     */
    public function getNokAddress2()
    {
        return $this->container['nok_address_2'];
    }

    /**
     * Sets nok_address_2
     *
     * @param string[]|null $nok_address_2 nok_address_2
     *
     * @return self
     */
    public function setNokAddress2($nok_address_2)
    {

        if (is_null($nok_address_2)) {
            throw new \InvalidArgumentException('non-nullable nok_address_2 cannot be null');
        }

        $this->container['nok_address_2'] = $nok_address_2;

        return $this;
    }

    /**
     * Gets nok_first_name
     *
     * @return string|null
     */
    public function getNokFirstName()
    {
        return $this->container['nok_first_name'];
    }

    /**
     * Sets nok_first_name
     *
     * @param string|null $nok_first_name nok_first_name
     *
     * @return self
     */
    public function setNokFirstName($nok_first_name)
    {

        if (is_null($nok_first_name)) {
            throw new \InvalidArgumentException('non-nullable nok_first_name cannot be null');
        }

        $this->container['nok_first_name'] = $nok_first_name;

        return $this;
    }

    /**
     * Gets nok_lga
     *
     * @return string|null
     */
    public function getNokLga()
    {
        return $this->container['nok_lga'];
    }

    /**
     * Sets nok_lga
     *
     * @param string|null $nok_lga nok_lga
     *
     * @return self
     */
    public function setNokLga($nok_lga)
    {

        if (is_null($nok_lga)) {
            throw new \InvalidArgumentException('non-nullable nok_lga cannot be null');
        }

        $this->container['nok_lga'] = $nok_lga;

        return $this;
    }

    /**
     * Gets nok_state
     *
     * @return string|null
     */
    public function getNokState()
    {
        return $this->container['nok_state'];
    }

    /**
     * Sets nok_state
     *
     * @param string|null $nok_state nok_state
     *
     * @return self
     */
    public function setNokState($nok_state)
    {

        if (is_null($nok_state)) {
            throw new \InvalidArgumentException('non-nullable nok_state cannot be null');
        }

        $this->container['nok_state'] = $nok_state;

        return $this;
    }

    /**
     * Gets nok_surname
     *
     * @return string|null
     */
    public function getNokSurname()
    {
        return $this->container['nok_surname'];
    }

    /**
     * Sets nok_surname
     *
     * @param string|null $nok_surname nok_surname
     *
     * @return self
     */
    public function setNokSurname($nok_surname)
    {

        if (is_null($nok_surname)) {
            throw new \InvalidArgumentException('non-nullable nok_surname cannot be null');
        }

        $this->container['nok_surname'] = $nok_surname;

        return $this;
    }

    /**
     * Gets nok_town
     *
     * @return string|null
     */
    public function getNokTown()
    {
        return $this->container['nok_town'];
    }

    /**
     * Sets nok_town
     *
     * @param string|null $nok_town nok_town
     *
     * @return self
     */
    public function setNokTown($nok_town)
    {

        if (is_null($nok_town)) {
            throw new \InvalidArgumentException('non-nullable nok_town cannot be null');
        }

        $this->container['nok_town'] = $nok_town;

        return $this;
    }

    /**
     * Gets origin_lga
     *
     * @return string|null
     */
    public function getOriginLga()
    {
        return $this->container['origin_lga'];
    }

    /**
     * Sets origin_lga
     *
     * @param string|null $origin_lga origin_lga
     *
     * @return self
     */
    public function setOriginLga($origin_lga)
    {

        if (is_null($origin_lga)) {
            throw new \InvalidArgumentException('non-nullable origin_lga cannot be null');
        }

        $this->container['origin_lga'] = $origin_lga;

        return $this;
    }

    /**
     * Gets origin_place
     *
     * @return string|null
     */
    public function getOriginPlace()
    {
        return $this->container['origin_place'];
    }

    /**
     * Sets origin_place
     *
     * @param string|null $origin_place origin_place
     *
     * @return self
     */
    public function setOriginPlace($origin_place)
    {

        if (is_null($origin_place)) {
            throw new \InvalidArgumentException('non-nullable origin_place cannot be null');
        }

        $this->container['origin_place'] = $origin_place;

        return $this;
    }

    /**
     * Gets origin_state
     *
     * @return string|null
     */
    public function getOriginState()
    {
        return $this->container['origin_state'];
    }

    /**
     * Sets origin_state
     *
     * @param string|null $origin_state origin_state
     *
     * @return self
     */
    public function setOriginState($origin_state)
    {

        if (is_null($origin_state)) {
            throw new \InvalidArgumentException('non-nullable origin_state cannot be null');
        }

        $this->container['origin_state'] = $origin_state;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return string|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param string|null $picture picture
     *
     * @return self
     */
    public function setPicture($picture)
    {

        if (is_null($picture)) {
            throw new \InvalidArgumentException('non-nullable picture cannot be null');
        }

        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets profession
     *
     * @return string|null
     */
    public function getProfession()
    {
        return $this->container['profession'];
    }

    /**
     * Sets profession
     *
     * @param string|null $profession profession
     *
     * @return self
     */
    public function setProfession($profession)
    {

        if (is_null($profession)) {
            throw new \InvalidArgumentException('non-nullable profession cannot be null');
        }

        $this->container['profession'] = $profession;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {

        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets religion
     *
     * @return string|null
     */
    public function getReligion()
    {
        return $this->container['religion'];
    }

    /**
     * Sets religion
     *
     * @param string|null $religion religion
     *
     * @return self
     */
    public function setReligion($religion)
    {

        if (is_null($religion)) {
            throw new \InvalidArgumentException('non-nullable religion cannot be null');
        }

        $this->container['religion'] = $religion;

        return $this;
    }

    /**
     * Gets residence_address
     *
     * @return string|null
     */
    public function getResidenceAddress()
    {
        return $this->container['residence_address'];
    }

    /**
     * Sets residence_address
     *
     * @param string|null $residence_address residence_address
     *
     * @return self
     */
    public function setResidenceAddress($residence_address)
    {

        if (is_null($residence_address)) {
            throw new \InvalidArgumentException('non-nullable residence_address cannot be null');
        }

        $this->container['residence_address'] = $residence_address;

        return $this;
    }

    /**
     * Gets residence_lga
     *
     * @return string|null
     */
    public function getResidenceLga()
    {
        return $this->container['residence_lga'];
    }

    /**
     * Sets residence_lga
     *
     * @param string|null $residence_lga residence_lga
     *
     * @return self
     */
    public function setResidenceLga($residence_lga)
    {

        if (is_null($residence_lga)) {
            throw new \InvalidArgumentException('non-nullable residence_lga cannot be null');
        }

        $this->container['residence_lga'] = $residence_lga;

        return $this;
    }

    /**
     * Gets residence_state
     *
     * @return string|null
     */
    public function getResidenceState()
    {
        return $this->container['residence_state'];
    }

    /**
     * Sets residence_state
     *
     * @param string|null $residence_state residence_state
     *
     * @return self
     */
    public function setResidenceState($residence_state)
    {

        if (is_null($residence_state)) {
            throw new \InvalidArgumentException('non-nullable residence_state cannot be null');
        }

        $this->container['residence_state'] = $residence_state;

        return $this;
    }

    /**
     * Gets residence_status
     *
     * @return string|null
     */
    public function getResidenceStatus()
    {
        return $this->container['residence_status'];
    }

    /**
     * Sets residence_status
     *
     * @param string|null $residence_status residence_status
     *
     * @return self
     */
    public function setResidenceStatus($residence_status)
    {

        if (is_null($residence_status)) {
            throw new \InvalidArgumentException('non-nullable residence_status cannot be null');
        }

        $this->container['residence_status'] = $residence_status;

        return $this;
    }

    /**
     * Gets residence_town
     *
     * @return string|null
     */
    public function getResidenceTown()
    {
        return $this->container['residence_town'];
    }

    /**
     * Sets residence_town
     *
     * @param string|null $residence_town residence_town
     *
     * @return self
     */
    public function setResidenceTown($residence_town)
    {

        if (is_null($residence_town)) {
            throw new \InvalidArgumentException('non-nullable residence_town cannot be null');
        }

        $this->container['residence_town'] = $residence_town;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature signature
     *
     * @return self
     */
    public function setSignature($signature)
    {

        if (is_null($signature)) {
            throw new \InvalidArgumentException('non-nullable signature cannot be null');
        }

        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets spoken_language
     *
     * @return string|null
     */
    public function getSpokenLanguage()
    {
        return $this->container['spoken_language'];
    }

    /**
     * Sets spoken_language
     *
     * @param string|null $spoken_language spoken_language
     *
     * @return self
     */
    public function setSpokenLanguage($spoken_language)
    {

        if (is_null($spoken_language)) {
            throw new \InvalidArgumentException('non-nullable spoken_language cannot be null');
        }

        $this->container['spoken_language'] = $spoken_language;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname surname
     *
     * @return self
     */
    public function setSurname($surname)
    {

        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }

        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string|null
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string|null $telephone telephone
     *
     * @return self
     */
    public function setTelephone($telephone)
    {

        if (is_null($telephone)) {
            throw new \InvalidArgumentException('non-nullable telephone cannot be null');
        }

        $this->container['telephone'] = $telephone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


