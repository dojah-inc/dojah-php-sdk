<?php
/**
 * GetKycDriversLicenseResponseEntityPersonalDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH Publilc APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * GetKycDriversLicenseResponseEntityPersonalDetails Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class GetKycDriversLicenseResponseEntityPersonalDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetKycDriversLicenseResponse_entity_personal_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'firstname' => 'string',
        'othername' => 'string',
        'surname' => 'string',
        'mother_maiden_name' => 'string',
        'gender' => 'string',
        'birth_date' => 'string',
        'blood_group_id' => 'string',
        'facial_mark' => 'string',
        'glasses' => 'string',
        'height' => 'string',
        'universaltax_identity_number' => 'string',
        'nin_number' => 'string',
        'country' => 'string',
        'state' => 'string',
        'lga' => 'string',
        'is_disability' => 'string',
        'disability_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'firstname' => null,
        'othername' => null,
        'surname' => null,
        'mother_maiden_name' => null,
        'gender' => null,
        'birth_date' => null,
        'blood_group_id' => null,
        'facial_mark' => null,
        'glasses' => null,
        'height' => null,
        'universaltax_identity_number' => null,
        'nin_number' => null,
        'country' => null,
        'state' => null,
        'lga' => null,
        'is_disability' => null,
        'disability_reason' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'firstname' => false,
		'othername' => false,
		'surname' => false,
		'mother_maiden_name' => false,
		'gender' => false,
		'birth_date' => false,
		'blood_group_id' => false,
		'facial_mark' => false,
		'glasses' => false,
		'height' => false,
		'universaltax_identity_number' => false,
		'nin_number' => false,
		'country' => false,
		'state' => false,
		'lga' => false,
		'is_disability' => false,
		'disability_reason' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'firstname' => 'firstname',
        'othername' => 'othername',
        'surname' => 'surname',
        'mother_maiden_name' => 'mother_maiden_name',
        'gender' => 'gender',
        'birth_date' => 'birth_date',
        'blood_group_id' => 'blood_group_id',
        'facial_mark' => 'facial_mark',
        'glasses' => 'glasses',
        'height' => 'height',
        'universaltax_identity_number' => 'universaltax_identity_number',
        'nin_number' => 'nin_number',
        'country' => 'country',
        'state' => 'state',
        'lga' => 'lga',
        'is_disability' => 'is_disability',
        'disability_reason' => 'disability_reason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'firstname' => 'setFirstname',
        'othername' => 'setOthername',
        'surname' => 'setSurname',
        'mother_maiden_name' => 'setMotherMaidenName',
        'gender' => 'setGender',
        'birth_date' => 'setBirthDate',
        'blood_group_id' => 'setBloodGroupId',
        'facial_mark' => 'setFacialMark',
        'glasses' => 'setGlasses',
        'height' => 'setHeight',
        'universaltax_identity_number' => 'setUniversaltaxIdentityNumber',
        'nin_number' => 'setNinNumber',
        'country' => 'setCountry',
        'state' => 'setState',
        'lga' => 'setLga',
        'is_disability' => 'setIsDisability',
        'disability_reason' => 'setDisabilityReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'firstname' => 'getFirstname',
        'othername' => 'getOthername',
        'surname' => 'getSurname',
        'mother_maiden_name' => 'getMotherMaidenName',
        'gender' => 'getGender',
        'birth_date' => 'getBirthDate',
        'blood_group_id' => 'getBloodGroupId',
        'facial_mark' => 'getFacialMark',
        'glasses' => 'getGlasses',
        'height' => 'getHeight',
        'universaltax_identity_number' => 'getUniversaltaxIdentityNumber',
        'nin_number' => 'getNinNumber',
        'country' => 'getCountry',
        'state' => 'getState',
        'lga' => 'getLga',
        'is_disability' => 'getIsDisability',
        'disability_reason' => 'getDisabilityReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('firstname', $data ?? [], null);
        $this->setIfExists('othername', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('mother_maiden_name', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('blood_group_id', $data ?? [], null);
        $this->setIfExists('facial_mark', $data ?? [], null);
        $this->setIfExists('glasses', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('universaltax_identity_number', $data ?? [], null);
        $this->setIfExists('nin_number', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('lga', $data ?? [], null);
        $this->setIfExists('is_disability', $data ?? [], null);
        $this->setIfExists('disability_reason', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname firstname
     *
     * @return self
     */
    public function setFirstname($firstname)
    {

        if (is_null($firstname)) {
            throw new \InvalidArgumentException('non-nullable firstname cannot be null');
        }

        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets othername
     *
     * @return string|null
     */
    public function getOthername()
    {
        return $this->container['othername'];
    }

    /**
     * Sets othername
     *
     * @param string|null $othername othername
     *
     * @return self
     */
    public function setOthername($othername)
    {

        if (is_null($othername)) {
            throw new \InvalidArgumentException('non-nullable othername cannot be null');
        }

        $this->container['othername'] = $othername;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname surname
     *
     * @return self
     */
    public function setSurname($surname)
    {

        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }

        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets mother_maiden_name
     *
     * @return string|null
     */
    public function getMotherMaidenName()
    {
        return $this->container['mother_maiden_name'];
    }

    /**
     * Sets mother_maiden_name
     *
     * @param string|null $mother_maiden_name mother_maiden_name
     *
     * @return self
     */
    public function setMotherMaidenName($mother_maiden_name)
    {

        if (is_null($mother_maiden_name)) {
            throw new \InvalidArgumentException('non-nullable mother_maiden_name cannot be null');
        }

        $this->container['mother_maiden_name'] = $mother_maiden_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {

        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }

        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string|null $birth_date birth_date
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {

        if (is_null($birth_date)) {
            throw new \InvalidArgumentException('non-nullable birth_date cannot be null');
        }

        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets blood_group_id
     *
     * @return string|null
     */
    public function getBloodGroupId()
    {
        return $this->container['blood_group_id'];
    }

    /**
     * Sets blood_group_id
     *
     * @param string|null $blood_group_id blood_group_id
     *
     * @return self
     */
    public function setBloodGroupId($blood_group_id)
    {

        if (is_null($blood_group_id)) {
            throw new \InvalidArgumentException('non-nullable blood_group_id cannot be null');
        }

        $this->container['blood_group_id'] = $blood_group_id;

        return $this;
    }

    /**
     * Gets facial_mark
     *
     * @return string|null
     */
    public function getFacialMark()
    {
        return $this->container['facial_mark'];
    }

    /**
     * Sets facial_mark
     *
     * @param string|null $facial_mark facial_mark
     *
     * @return self
     */
    public function setFacialMark($facial_mark)
    {

        if (is_null($facial_mark)) {
            throw new \InvalidArgumentException('non-nullable facial_mark cannot be null');
        }

        $this->container['facial_mark'] = $facial_mark;

        return $this;
    }

    /**
     * Gets glasses
     *
     * @return string|null
     */
    public function getGlasses()
    {
        return $this->container['glasses'];
    }

    /**
     * Sets glasses
     *
     * @param string|null $glasses glasses
     *
     * @return self
     */
    public function setGlasses($glasses)
    {

        if (is_null($glasses)) {
            throw new \InvalidArgumentException('non-nullable glasses cannot be null');
        }

        $this->container['glasses'] = $glasses;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string|null $height height
     *
     * @return self
     */
    public function setHeight($height)
    {

        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets universaltax_identity_number
     *
     * @return string|null
     */
    public function getUniversaltaxIdentityNumber()
    {
        return $this->container['universaltax_identity_number'];
    }

    /**
     * Sets universaltax_identity_number
     *
     * @param string|null $universaltax_identity_number universaltax_identity_number
     *
     * @return self
     */
    public function setUniversaltaxIdentityNumber($universaltax_identity_number)
    {

        if (is_null($universaltax_identity_number)) {
            throw new \InvalidArgumentException('non-nullable universaltax_identity_number cannot be null');
        }

        $this->container['universaltax_identity_number'] = $universaltax_identity_number;

        return $this;
    }

    /**
     * Gets nin_number
     *
     * @return string|null
     */
    public function getNinNumber()
    {
        return $this->container['nin_number'];
    }

    /**
     * Sets nin_number
     *
     * @param string|null $nin_number nin_number
     *
     * @return self
     */
    public function setNinNumber($nin_number)
    {

        if (is_null($nin_number)) {
            throw new \InvalidArgumentException('non-nullable nin_number cannot be null');
        }

        $this->container['nin_number'] = $nin_number;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {

        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {

        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets lga
     *
     * @return string|null
     */
    public function getLga()
    {
        return $this->container['lga'];
    }

    /**
     * Sets lga
     *
     * @param string|null $lga lga
     *
     * @return self
     */
    public function setLga($lga)
    {

        if (is_null($lga)) {
            throw new \InvalidArgumentException('non-nullable lga cannot be null');
        }

        $this->container['lga'] = $lga;

        return $this;
    }

    /**
     * Gets is_disability
     *
     * @return string|null
     */
    public function getIsDisability()
    {
        return $this->container['is_disability'];
    }

    /**
     * Sets is_disability
     *
     * @param string|null $is_disability is_disability
     *
     * @return self
     */
    public function setIsDisability($is_disability)
    {

        if (is_null($is_disability)) {
            throw new \InvalidArgumentException('non-nullable is_disability cannot be null');
        }

        $this->container['is_disability'] = $is_disability;

        return $this;
    }

    /**
     * Gets disability_reason
     *
     * @return string|null
     */
    public function getDisabilityReason()
    {
        return $this->container['disability_reason'];
    }

    /**
     * Sets disability_reason
     *
     * @param string|null $disability_reason disability_reason
     *
     * @return self
     */
    public function setDisabilityReason($disability_reason)
    {

        if (is_null($disability_reason)) {
            throw new \InvalidArgumentException('non-nullable disability_reason cannot be null');
        }

        $this->container['disability_reason'] = $disability_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


