<?php
/**
 * GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * GetAccountAnalysisResponseEntityTransactionRoutineBreakdown Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class GetAccountAnalysisResponseEntityTransactionRoutineBreakdown implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetAccountAnalysisResponse_entity_transactionRoutineBreakdown';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'maximum_expense' => 'float',
        'last_credit_received' => 'string',
        'last_debit_made' => 'string',
        'most_frequent_balance_range' => 'string',
        'most_frequent_transaction_range' => 'string',
        'number_of_card_requests' => 'float',
        'percent_number_of_days_balance_was_less_than10_thousand_naira' => 'float',
        'percent_number_of_days_transactions_was_less_than10_thousand_naira' => 'float',
        'percent_of_balances_between100_thousand_to500_thousand_naira' => 'float',
        'percent_of_balances_between10_thousand_to100_thousand_naira' => 'float',
        'percent_of_balances_between500_thousand_to_one_million_naira' => 'float',
        'percent_of_balances_greater_than_one_million_naira' => 'float',
        'percent_of_balances_less_than10_thousand_naira' => 'float',
        'percent_of_transactions_between100_thousand_to500_thousand_naira' => 'float',
        'percent_of_transactions_between10_thousand_to100_thousand_naira' => 'float',
        'percent_of_transactions_between500_thousand_to_one_million_naira' => 'float',
        'percent_of_transactions_greater_than_one_million_naira' => 'float',
        'percent_of_transactions_less_than10_thousand_naira' => 'float',
        'percentof_credit_transactions' => 'float',
        'percentof_debit_transactions' => 'float',
        'total_amount_of_transactions' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'maximum_expense' => null,
        'last_credit_received' => null,
        'last_debit_made' => null,
        'most_frequent_balance_range' => null,
        'most_frequent_transaction_range' => null,
        'number_of_card_requests' => null,
        'percent_number_of_days_balance_was_less_than10_thousand_naira' => null,
        'percent_number_of_days_transactions_was_less_than10_thousand_naira' => null,
        'percent_of_balances_between100_thousand_to500_thousand_naira' => null,
        'percent_of_balances_between10_thousand_to100_thousand_naira' => null,
        'percent_of_balances_between500_thousand_to_one_million_naira' => null,
        'percent_of_balances_greater_than_one_million_naira' => null,
        'percent_of_balances_less_than10_thousand_naira' => null,
        'percent_of_transactions_between100_thousand_to500_thousand_naira' => null,
        'percent_of_transactions_between10_thousand_to100_thousand_naira' => null,
        'percent_of_transactions_between500_thousand_to_one_million_naira' => null,
        'percent_of_transactions_greater_than_one_million_naira' => null,
        'percent_of_transactions_less_than10_thousand_naira' => null,
        'percentof_credit_transactions' => null,
        'percentof_debit_transactions' => null,
        'total_amount_of_transactions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'maximum_expense' => false,
		'last_credit_received' => false,
		'last_debit_made' => false,
		'most_frequent_balance_range' => false,
		'most_frequent_transaction_range' => false,
		'number_of_card_requests' => false,
		'percent_number_of_days_balance_was_less_than10_thousand_naira' => false,
		'percent_number_of_days_transactions_was_less_than10_thousand_naira' => false,
		'percent_of_balances_between100_thousand_to500_thousand_naira' => false,
		'percent_of_balances_between10_thousand_to100_thousand_naira' => false,
		'percent_of_balances_between500_thousand_to_one_million_naira' => false,
		'percent_of_balances_greater_than_one_million_naira' => false,
		'percent_of_balances_less_than10_thousand_naira' => false,
		'percent_of_transactions_between100_thousand_to500_thousand_naira' => false,
		'percent_of_transactions_between10_thousand_to100_thousand_naira' => false,
		'percent_of_transactions_between500_thousand_to_one_million_naira' => false,
		'percent_of_transactions_greater_than_one_million_naira' => false,
		'percent_of_transactions_less_than10_thousand_naira' => false,
		'percentof_credit_transactions' => false,
		'percentof_debit_transactions' => false,
		'total_amount_of_transactions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'maximum_expense' => 'MaximumExpense',
        'last_credit_received' => 'lastCreditReceived',
        'last_debit_made' => 'lastDebitMade',
        'most_frequent_balance_range' => 'mostFrequentBalanceRange',
        'most_frequent_transaction_range' => 'mostFrequentTransactionRange',
        'number_of_card_requests' => 'numberOfCardRequests',
        'percent_number_of_days_balance_was_less_than10_thousand_naira' => 'percentNumberOfDaysBalanceWasLessThan10ThousandNaira',
        'percent_number_of_days_transactions_was_less_than10_thousand_naira' => 'percentNumberOfDaysTransactionsWasLessThan10ThousandNaira',
        'percent_of_balances_between100_thousand_to500_thousand_naira' => 'percentOfBalancesBetween100ThousandTo500ThousandNaira',
        'percent_of_balances_between10_thousand_to100_thousand_naira' => 'percentOfBalancesBetween10ThousandTo100ThousandNaira',
        'percent_of_balances_between500_thousand_to_one_million_naira' => 'percentOfBalancesBetween500ThousandToOneMillionNaira',
        'percent_of_balances_greater_than_one_million_naira' => 'percentOfBalancesGreaterThanOneMillionNaira',
        'percent_of_balances_less_than10_thousand_naira' => 'percentOfBalancesLessThan10ThousandNaira',
        'percent_of_transactions_between100_thousand_to500_thousand_naira' => 'percentOfTransactionsBetween100ThousandTo500ThousandNaira',
        'percent_of_transactions_between10_thousand_to100_thousand_naira' => 'percentOfTransactionsBetween10ThousandTo100ThousandNaira',
        'percent_of_transactions_between500_thousand_to_one_million_naira' => 'percentOfTransactionsBetween500ThousandToOneMillionNaira',
        'percent_of_transactions_greater_than_one_million_naira' => 'percentOfTransactionsGreaterThanOneMillionNaira',
        'percent_of_transactions_less_than10_thousand_naira' => 'percentOfTransactionsLessThan10ThousandNaira',
        'percentof_credit_transactions' => 'percentofCreditTransactions',
        'percentof_debit_transactions' => 'percentofDebitTransactions',
        'total_amount_of_transactions' => 'totalAmountOfTransactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'maximum_expense' => 'setMaximumExpense',
        'last_credit_received' => 'setLastCreditReceived',
        'last_debit_made' => 'setLastDebitMade',
        'most_frequent_balance_range' => 'setMostFrequentBalanceRange',
        'most_frequent_transaction_range' => 'setMostFrequentTransactionRange',
        'number_of_card_requests' => 'setNumberOfCardRequests',
        'percent_number_of_days_balance_was_less_than10_thousand_naira' => 'setPercentNumberOfDaysBalanceWasLessThan10ThousandNaira',
        'percent_number_of_days_transactions_was_less_than10_thousand_naira' => 'setPercentNumberOfDaysTransactionsWasLessThan10ThousandNaira',
        'percent_of_balances_between100_thousand_to500_thousand_naira' => 'setPercentOfBalancesBetween100ThousandTo500ThousandNaira',
        'percent_of_balances_between10_thousand_to100_thousand_naira' => 'setPercentOfBalancesBetween10ThousandTo100ThousandNaira',
        'percent_of_balances_between500_thousand_to_one_million_naira' => 'setPercentOfBalancesBetween500ThousandToOneMillionNaira',
        'percent_of_balances_greater_than_one_million_naira' => 'setPercentOfBalancesGreaterThanOneMillionNaira',
        'percent_of_balances_less_than10_thousand_naira' => 'setPercentOfBalancesLessThan10ThousandNaira',
        'percent_of_transactions_between100_thousand_to500_thousand_naira' => 'setPercentOfTransactionsBetween100ThousandTo500ThousandNaira',
        'percent_of_transactions_between10_thousand_to100_thousand_naira' => 'setPercentOfTransactionsBetween10ThousandTo100ThousandNaira',
        'percent_of_transactions_between500_thousand_to_one_million_naira' => 'setPercentOfTransactionsBetween500ThousandToOneMillionNaira',
        'percent_of_transactions_greater_than_one_million_naira' => 'setPercentOfTransactionsGreaterThanOneMillionNaira',
        'percent_of_transactions_less_than10_thousand_naira' => 'setPercentOfTransactionsLessThan10ThousandNaira',
        'percentof_credit_transactions' => 'setPercentofCreditTransactions',
        'percentof_debit_transactions' => 'setPercentofDebitTransactions',
        'total_amount_of_transactions' => 'setTotalAmountOfTransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'maximum_expense' => 'getMaximumExpense',
        'last_credit_received' => 'getLastCreditReceived',
        'last_debit_made' => 'getLastDebitMade',
        'most_frequent_balance_range' => 'getMostFrequentBalanceRange',
        'most_frequent_transaction_range' => 'getMostFrequentTransactionRange',
        'number_of_card_requests' => 'getNumberOfCardRequests',
        'percent_number_of_days_balance_was_less_than10_thousand_naira' => 'getPercentNumberOfDaysBalanceWasLessThan10ThousandNaira',
        'percent_number_of_days_transactions_was_less_than10_thousand_naira' => 'getPercentNumberOfDaysTransactionsWasLessThan10ThousandNaira',
        'percent_of_balances_between100_thousand_to500_thousand_naira' => 'getPercentOfBalancesBetween100ThousandTo500ThousandNaira',
        'percent_of_balances_between10_thousand_to100_thousand_naira' => 'getPercentOfBalancesBetween10ThousandTo100ThousandNaira',
        'percent_of_balances_between500_thousand_to_one_million_naira' => 'getPercentOfBalancesBetween500ThousandToOneMillionNaira',
        'percent_of_balances_greater_than_one_million_naira' => 'getPercentOfBalancesGreaterThanOneMillionNaira',
        'percent_of_balances_less_than10_thousand_naira' => 'getPercentOfBalancesLessThan10ThousandNaira',
        'percent_of_transactions_between100_thousand_to500_thousand_naira' => 'getPercentOfTransactionsBetween100ThousandTo500ThousandNaira',
        'percent_of_transactions_between10_thousand_to100_thousand_naira' => 'getPercentOfTransactionsBetween10ThousandTo100ThousandNaira',
        'percent_of_transactions_between500_thousand_to_one_million_naira' => 'getPercentOfTransactionsBetween500ThousandToOneMillionNaira',
        'percent_of_transactions_greater_than_one_million_naira' => 'getPercentOfTransactionsGreaterThanOneMillionNaira',
        'percent_of_transactions_less_than10_thousand_naira' => 'getPercentOfTransactionsLessThan10ThousandNaira',
        'percentof_credit_transactions' => 'getPercentofCreditTransactions',
        'percentof_debit_transactions' => 'getPercentofDebitTransactions',
        'total_amount_of_transactions' => 'getTotalAmountOfTransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('maximum_expense', $data ?? [], null);
        $this->setIfExists('last_credit_received', $data ?? [], null);
        $this->setIfExists('last_debit_made', $data ?? [], null);
        $this->setIfExists('most_frequent_balance_range', $data ?? [], null);
        $this->setIfExists('most_frequent_transaction_range', $data ?? [], null);
        $this->setIfExists('number_of_card_requests', $data ?? [], null);
        $this->setIfExists('percent_number_of_days_balance_was_less_than10_thousand_naira', $data ?? [], null);
        $this->setIfExists('percent_number_of_days_transactions_was_less_than10_thousand_naira', $data ?? [], null);
        $this->setIfExists('percent_of_balances_between100_thousand_to500_thousand_naira', $data ?? [], null);
        $this->setIfExists('percent_of_balances_between10_thousand_to100_thousand_naira', $data ?? [], null);
        $this->setIfExists('percent_of_balances_between500_thousand_to_one_million_naira', $data ?? [], null);
        $this->setIfExists('percent_of_balances_greater_than_one_million_naira', $data ?? [], null);
        $this->setIfExists('percent_of_balances_less_than10_thousand_naira', $data ?? [], null);
        $this->setIfExists('percent_of_transactions_between100_thousand_to500_thousand_naira', $data ?? [], null);
        $this->setIfExists('percent_of_transactions_between10_thousand_to100_thousand_naira', $data ?? [], null);
        $this->setIfExists('percent_of_transactions_between500_thousand_to_one_million_naira', $data ?? [], null);
        $this->setIfExists('percent_of_transactions_greater_than_one_million_naira', $data ?? [], null);
        $this->setIfExists('percent_of_transactions_less_than10_thousand_naira', $data ?? [], null);
        $this->setIfExists('percentof_credit_transactions', $data ?? [], null);
        $this->setIfExists('percentof_debit_transactions', $data ?? [], null);
        $this->setIfExists('total_amount_of_transactions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets maximum_expense
     *
     * @return float|null
     */
    public function getMaximumExpense()
    {
        return $this->container['maximum_expense'];
    }

    /**
     * Sets maximum_expense
     *
     * @param float|null $maximum_expense maximum_expense
     *
     * @return self
     */
    public function setMaximumExpense($maximum_expense)
    {

        if (is_null($maximum_expense)) {
            throw new \InvalidArgumentException('non-nullable maximum_expense cannot be null');
        }

        $this->container['maximum_expense'] = $maximum_expense;

        return $this;
    }

    /**
     * Gets last_credit_received
     *
     * @return string|null
     */
    public function getLastCreditReceived()
    {
        return $this->container['last_credit_received'];
    }

    /**
     * Sets last_credit_received
     *
     * @param string|null $last_credit_received last_credit_received
     *
     * @return self
     */
    public function setLastCreditReceived($last_credit_received)
    {

        if (is_null($last_credit_received)) {
            throw new \InvalidArgumentException('non-nullable last_credit_received cannot be null');
        }

        $this->container['last_credit_received'] = $last_credit_received;

        return $this;
    }

    /**
     * Gets last_debit_made
     *
     * @return string|null
     */
    public function getLastDebitMade()
    {
        return $this->container['last_debit_made'];
    }

    /**
     * Sets last_debit_made
     *
     * @param string|null $last_debit_made last_debit_made
     *
     * @return self
     */
    public function setLastDebitMade($last_debit_made)
    {

        if (is_null($last_debit_made)) {
            throw new \InvalidArgumentException('non-nullable last_debit_made cannot be null');
        }

        $this->container['last_debit_made'] = $last_debit_made;

        return $this;
    }

    /**
     * Gets most_frequent_balance_range
     *
     * @return string|null
     */
    public function getMostFrequentBalanceRange()
    {
        return $this->container['most_frequent_balance_range'];
    }

    /**
     * Sets most_frequent_balance_range
     *
     * @param string|null $most_frequent_balance_range most_frequent_balance_range
     *
     * @return self
     */
    public function setMostFrequentBalanceRange($most_frequent_balance_range)
    {

        if (is_null($most_frequent_balance_range)) {
            throw new \InvalidArgumentException('non-nullable most_frequent_balance_range cannot be null');
        }

        $this->container['most_frequent_balance_range'] = $most_frequent_balance_range;

        return $this;
    }

    /**
     * Gets most_frequent_transaction_range
     *
     * @return string|null
     */
    public function getMostFrequentTransactionRange()
    {
        return $this->container['most_frequent_transaction_range'];
    }

    /**
     * Sets most_frequent_transaction_range
     *
     * @param string|null $most_frequent_transaction_range most_frequent_transaction_range
     *
     * @return self
     */
    public function setMostFrequentTransactionRange($most_frequent_transaction_range)
    {

        if (is_null($most_frequent_transaction_range)) {
            throw new \InvalidArgumentException('non-nullable most_frequent_transaction_range cannot be null');
        }

        $this->container['most_frequent_transaction_range'] = $most_frequent_transaction_range;

        return $this;
    }

    /**
     * Gets number_of_card_requests
     *
     * @return float|null
     */
    public function getNumberOfCardRequests()
    {
        return $this->container['number_of_card_requests'];
    }

    /**
     * Sets number_of_card_requests
     *
     * @param float|null $number_of_card_requests number_of_card_requests
     *
     * @return self
     */
    public function setNumberOfCardRequests($number_of_card_requests)
    {

        if (is_null($number_of_card_requests)) {
            throw new \InvalidArgumentException('non-nullable number_of_card_requests cannot be null');
        }

        $this->container['number_of_card_requests'] = $number_of_card_requests;

        return $this;
    }

    /**
     * Gets percent_number_of_days_balance_was_less_than10_thousand_naira
     *
     * @return float|null
     */
    public function getPercentNumberOfDaysBalanceWasLessThan10ThousandNaira()
    {
        return $this->container['percent_number_of_days_balance_was_less_than10_thousand_naira'];
    }

    /**
     * Sets percent_number_of_days_balance_was_less_than10_thousand_naira
     *
     * @param float|null $percent_number_of_days_balance_was_less_than10_thousand_naira percent_number_of_days_balance_was_less_than10_thousand_naira
     *
     * @return self
     */
    public function setPercentNumberOfDaysBalanceWasLessThan10ThousandNaira($percent_number_of_days_balance_was_less_than10_thousand_naira)
    {

        if (is_null($percent_number_of_days_balance_was_less_than10_thousand_naira)) {
            throw new \InvalidArgumentException('non-nullable percent_number_of_days_balance_was_less_than10_thousand_naira cannot be null');
        }

        $this->container['percent_number_of_days_balance_was_less_than10_thousand_naira'] = $percent_number_of_days_balance_was_less_than10_thousand_naira;

        return $this;
    }

    /**
     * Gets percent_number_of_days_transactions_was_less_than10_thousand_naira
     *
     * @return float|null
     */
    public function getPercentNumberOfDaysTransactionsWasLessThan10ThousandNaira()
    {
        return $this->container['percent_number_of_days_transactions_was_less_than10_thousand_naira'];
    }

    /**
     * Sets percent_number_of_days_transactions_was_less_than10_thousand_naira
     *
     * @param float|null $percent_number_of_days_transactions_was_less_than10_thousand_naira percent_number_of_days_transactions_was_less_than10_thousand_naira
     *
     * @return self
     */
    public function setPercentNumberOfDaysTransactionsWasLessThan10ThousandNaira($percent_number_of_days_transactions_was_less_than10_thousand_naira)
    {

        if (is_null($percent_number_of_days_transactions_was_less_than10_thousand_naira)) {
            throw new \InvalidArgumentException('non-nullable percent_number_of_days_transactions_was_less_than10_thousand_naira cannot be null');
        }

        $this->container['percent_number_of_days_transactions_was_less_than10_thousand_naira'] = $percent_number_of_days_transactions_was_less_than10_thousand_naira;

        return $this;
    }

    /**
     * Gets percent_of_balances_between100_thousand_to500_thousand_naira
     *
     * @return float|null
     */
    public function getPercentOfBalancesBetween100ThousandTo500ThousandNaira()
    {
        return $this->container['percent_of_balances_between100_thousand_to500_thousand_naira'];
    }

    /**
     * Sets percent_of_balances_between100_thousand_to500_thousand_naira
     *
     * @param float|null $percent_of_balances_between100_thousand_to500_thousand_naira percent_of_balances_between100_thousand_to500_thousand_naira
     *
     * @return self
     */
    public function setPercentOfBalancesBetween100ThousandTo500ThousandNaira($percent_of_balances_between100_thousand_to500_thousand_naira)
    {

        if (is_null($percent_of_balances_between100_thousand_to500_thousand_naira)) {
            throw new \InvalidArgumentException('non-nullable percent_of_balances_between100_thousand_to500_thousand_naira cannot be null');
        }

        $this->container['percent_of_balances_between100_thousand_to500_thousand_naira'] = $percent_of_balances_between100_thousand_to500_thousand_naira;

        return $this;
    }

    /**
     * Gets percent_of_balances_between10_thousand_to100_thousand_naira
     *
     * @return float|null
     */
    public function getPercentOfBalancesBetween10ThousandTo100ThousandNaira()
    {
        return $this->container['percent_of_balances_between10_thousand_to100_thousand_naira'];
    }

    /**
     * Sets percent_of_balances_between10_thousand_to100_thousand_naira
     *
     * @param float|null $percent_of_balances_between10_thousand_to100_thousand_naira percent_of_balances_between10_thousand_to100_thousand_naira
     *
     * @return self
     */
    public function setPercentOfBalancesBetween10ThousandTo100ThousandNaira($percent_of_balances_between10_thousand_to100_thousand_naira)
    {

        if (is_null($percent_of_balances_between10_thousand_to100_thousand_naira)) {
            throw new \InvalidArgumentException('non-nullable percent_of_balances_between10_thousand_to100_thousand_naira cannot be null');
        }

        $this->container['percent_of_balances_between10_thousand_to100_thousand_naira'] = $percent_of_balances_between10_thousand_to100_thousand_naira;

        return $this;
    }

    /**
     * Gets percent_of_balances_between500_thousand_to_one_million_naira
     *
     * @return float|null
     */
    public function getPercentOfBalancesBetween500ThousandToOneMillionNaira()
    {
        return $this->container['percent_of_balances_between500_thousand_to_one_million_naira'];
    }

    /**
     * Sets percent_of_balances_between500_thousand_to_one_million_naira
     *
     * @param float|null $percent_of_balances_between500_thousand_to_one_million_naira percent_of_balances_between500_thousand_to_one_million_naira
     *
     * @return self
     */
    public function setPercentOfBalancesBetween500ThousandToOneMillionNaira($percent_of_balances_between500_thousand_to_one_million_naira)
    {

        if (is_null($percent_of_balances_between500_thousand_to_one_million_naira)) {
            throw new \InvalidArgumentException('non-nullable percent_of_balances_between500_thousand_to_one_million_naira cannot be null');
        }

        $this->container['percent_of_balances_between500_thousand_to_one_million_naira'] = $percent_of_balances_between500_thousand_to_one_million_naira;

        return $this;
    }

    /**
     * Gets percent_of_balances_greater_than_one_million_naira
     *
     * @return float|null
     */
    public function getPercentOfBalancesGreaterThanOneMillionNaira()
    {
        return $this->container['percent_of_balances_greater_than_one_million_naira'];
    }

    /**
     * Sets percent_of_balances_greater_than_one_million_naira
     *
     * @param float|null $percent_of_balances_greater_than_one_million_naira percent_of_balances_greater_than_one_million_naira
     *
     * @return self
     */
    public function setPercentOfBalancesGreaterThanOneMillionNaira($percent_of_balances_greater_than_one_million_naira)
    {

        if (is_null($percent_of_balances_greater_than_one_million_naira)) {
            throw new \InvalidArgumentException('non-nullable percent_of_balances_greater_than_one_million_naira cannot be null');
        }

        $this->container['percent_of_balances_greater_than_one_million_naira'] = $percent_of_balances_greater_than_one_million_naira;

        return $this;
    }

    /**
     * Gets percent_of_balances_less_than10_thousand_naira
     *
     * @return float|null
     */
    public function getPercentOfBalancesLessThan10ThousandNaira()
    {
        return $this->container['percent_of_balances_less_than10_thousand_naira'];
    }

    /**
     * Sets percent_of_balances_less_than10_thousand_naira
     *
     * @param float|null $percent_of_balances_less_than10_thousand_naira percent_of_balances_less_than10_thousand_naira
     *
     * @return self
     */
    public function setPercentOfBalancesLessThan10ThousandNaira($percent_of_balances_less_than10_thousand_naira)
    {

        if (is_null($percent_of_balances_less_than10_thousand_naira)) {
            throw new \InvalidArgumentException('non-nullable percent_of_balances_less_than10_thousand_naira cannot be null');
        }

        $this->container['percent_of_balances_less_than10_thousand_naira'] = $percent_of_balances_less_than10_thousand_naira;

        return $this;
    }

    /**
     * Gets percent_of_transactions_between100_thousand_to500_thousand_naira
     *
     * @return float|null
     */
    public function getPercentOfTransactionsBetween100ThousandTo500ThousandNaira()
    {
        return $this->container['percent_of_transactions_between100_thousand_to500_thousand_naira'];
    }

    /**
     * Sets percent_of_transactions_between100_thousand_to500_thousand_naira
     *
     * @param float|null $percent_of_transactions_between100_thousand_to500_thousand_naira percent_of_transactions_between100_thousand_to500_thousand_naira
     *
     * @return self
     */
    public function setPercentOfTransactionsBetween100ThousandTo500ThousandNaira($percent_of_transactions_between100_thousand_to500_thousand_naira)
    {

        if (is_null($percent_of_transactions_between100_thousand_to500_thousand_naira)) {
            throw new \InvalidArgumentException('non-nullable percent_of_transactions_between100_thousand_to500_thousand_naira cannot be null');
        }

        $this->container['percent_of_transactions_between100_thousand_to500_thousand_naira'] = $percent_of_transactions_between100_thousand_to500_thousand_naira;

        return $this;
    }

    /**
     * Gets percent_of_transactions_between10_thousand_to100_thousand_naira
     *
     * @return float|null
     */
    public function getPercentOfTransactionsBetween10ThousandTo100ThousandNaira()
    {
        return $this->container['percent_of_transactions_between10_thousand_to100_thousand_naira'];
    }

    /**
     * Sets percent_of_transactions_between10_thousand_to100_thousand_naira
     *
     * @param float|null $percent_of_transactions_between10_thousand_to100_thousand_naira percent_of_transactions_between10_thousand_to100_thousand_naira
     *
     * @return self
     */
    public function setPercentOfTransactionsBetween10ThousandTo100ThousandNaira($percent_of_transactions_between10_thousand_to100_thousand_naira)
    {

        if (is_null($percent_of_transactions_between10_thousand_to100_thousand_naira)) {
            throw new \InvalidArgumentException('non-nullable percent_of_transactions_between10_thousand_to100_thousand_naira cannot be null');
        }

        $this->container['percent_of_transactions_between10_thousand_to100_thousand_naira'] = $percent_of_transactions_between10_thousand_to100_thousand_naira;

        return $this;
    }

    /**
     * Gets percent_of_transactions_between500_thousand_to_one_million_naira
     *
     * @return float|null
     */
    public function getPercentOfTransactionsBetween500ThousandToOneMillionNaira()
    {
        return $this->container['percent_of_transactions_between500_thousand_to_one_million_naira'];
    }

    /**
     * Sets percent_of_transactions_between500_thousand_to_one_million_naira
     *
     * @param float|null $percent_of_transactions_between500_thousand_to_one_million_naira percent_of_transactions_between500_thousand_to_one_million_naira
     *
     * @return self
     */
    public function setPercentOfTransactionsBetween500ThousandToOneMillionNaira($percent_of_transactions_between500_thousand_to_one_million_naira)
    {

        if (is_null($percent_of_transactions_between500_thousand_to_one_million_naira)) {
            throw new \InvalidArgumentException('non-nullable percent_of_transactions_between500_thousand_to_one_million_naira cannot be null');
        }

        $this->container['percent_of_transactions_between500_thousand_to_one_million_naira'] = $percent_of_transactions_between500_thousand_to_one_million_naira;

        return $this;
    }

    /**
     * Gets percent_of_transactions_greater_than_one_million_naira
     *
     * @return float|null
     */
    public function getPercentOfTransactionsGreaterThanOneMillionNaira()
    {
        return $this->container['percent_of_transactions_greater_than_one_million_naira'];
    }

    /**
     * Sets percent_of_transactions_greater_than_one_million_naira
     *
     * @param float|null $percent_of_transactions_greater_than_one_million_naira percent_of_transactions_greater_than_one_million_naira
     *
     * @return self
     */
    public function setPercentOfTransactionsGreaterThanOneMillionNaira($percent_of_transactions_greater_than_one_million_naira)
    {

        if (is_null($percent_of_transactions_greater_than_one_million_naira)) {
            throw new \InvalidArgumentException('non-nullable percent_of_transactions_greater_than_one_million_naira cannot be null');
        }

        $this->container['percent_of_transactions_greater_than_one_million_naira'] = $percent_of_transactions_greater_than_one_million_naira;

        return $this;
    }

    /**
     * Gets percent_of_transactions_less_than10_thousand_naira
     *
     * @return float|null
     */
    public function getPercentOfTransactionsLessThan10ThousandNaira()
    {
        return $this->container['percent_of_transactions_less_than10_thousand_naira'];
    }

    /**
     * Sets percent_of_transactions_less_than10_thousand_naira
     *
     * @param float|null $percent_of_transactions_less_than10_thousand_naira percent_of_transactions_less_than10_thousand_naira
     *
     * @return self
     */
    public function setPercentOfTransactionsLessThan10ThousandNaira($percent_of_transactions_less_than10_thousand_naira)
    {

        if (is_null($percent_of_transactions_less_than10_thousand_naira)) {
            throw new \InvalidArgumentException('non-nullable percent_of_transactions_less_than10_thousand_naira cannot be null');
        }

        $this->container['percent_of_transactions_less_than10_thousand_naira'] = $percent_of_transactions_less_than10_thousand_naira;

        return $this;
    }

    /**
     * Gets percentof_credit_transactions
     *
     * @return float|null
     */
    public function getPercentofCreditTransactions()
    {
        return $this->container['percentof_credit_transactions'];
    }

    /**
     * Sets percentof_credit_transactions
     *
     * @param float|null $percentof_credit_transactions percentof_credit_transactions
     *
     * @return self
     */
    public function setPercentofCreditTransactions($percentof_credit_transactions)
    {

        if (is_null($percentof_credit_transactions)) {
            throw new \InvalidArgumentException('non-nullable percentof_credit_transactions cannot be null');
        }

        $this->container['percentof_credit_transactions'] = $percentof_credit_transactions;

        return $this;
    }

    /**
     * Gets percentof_debit_transactions
     *
     * @return float|null
     */
    public function getPercentofDebitTransactions()
    {
        return $this->container['percentof_debit_transactions'];
    }

    /**
     * Sets percentof_debit_transactions
     *
     * @param float|null $percentof_debit_transactions percentof_debit_transactions
     *
     * @return self
     */
    public function setPercentofDebitTransactions($percentof_debit_transactions)
    {

        if (is_null($percentof_debit_transactions)) {
            throw new \InvalidArgumentException('non-nullable percentof_debit_transactions cannot be null');
        }

        $this->container['percentof_debit_transactions'] = $percentof_debit_transactions;

        return $this;
    }

    /**
     * Gets total_amount_of_transactions
     *
     * @return float|null
     */
    public function getTotalAmountOfTransactions()
    {
        return $this->container['total_amount_of_transactions'];
    }

    /**
     * Sets total_amount_of_transactions
     *
     * @param float|null $total_amount_of_transactions total_amount_of_transactions
     *
     * @return self
     */
    public function setTotalAmountOfTransactions($total_amount_of_transactions)
    {

        if (is_null($total_amount_of_transactions)) {
            throw new \InvalidArgumentException('non-nullable total_amount_of_transactions cannot be null');
        }

        $this->container['total_amount_of_transactions'] = $total_amount_of_transactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


