<?php
/**
 * GetNubanResponseEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * GetNubanResponseEntity Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class GetNubanResponseEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetNubanResponse_entity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_currency' => 'string',
        'account_name' => 'string',
        'account_number' => 'string',
        'account_type' => 'string',
        'address_1' => 'string',
        'address_2' => 'string',
        'city' => 'string',
        'country_code' => 'string',
        'country_of_birth' => 'string',
        'country_of_issue' => 'string',
        'dob' => 'string',
        'expiry_date' => 'string',
        'first_name' => 'string',
        'identity_number' => 'string',
        'identity_type' => 'string',
        'last_name' => 'string',
        'nationality' => 'string',
        'other_names' => 'string',
        'phone' => 'string',
        'postal_code' => 'string',
        'reference' => 'string',
        'state_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_currency' => null,
        'account_name' => null,
        'account_number' => null,
        'account_type' => null,
        'address_1' => null,
        'address_2' => null,
        'city' => null,
        'country_code' => null,
        'country_of_birth' => null,
        'country_of_issue' => null,
        'dob' => null,
        'expiry_date' => null,
        'first_name' => null,
        'identity_number' => null,
        'identity_type' => null,
        'last_name' => null,
        'nationality' => null,
        'other_names' => null,
        'phone' => null,
        'postal_code' => null,
        'reference' => null,
        'state_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_currency' => false,
		'account_name' => false,
		'account_number' => false,
		'account_type' => false,
		'address_1' => false,
		'address_2' => false,
		'city' => false,
		'country_code' => false,
		'country_of_birth' => false,
		'country_of_issue' => false,
		'dob' => false,
		'expiry_date' => false,
		'first_name' => false,
		'identity_number' => false,
		'identity_type' => false,
		'last_name' => false,
		'nationality' => false,
		'other_names' => false,
		'phone' => false,
		'postal_code' => false,
		'reference' => false,
		'state_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_currency' => 'account_currency',
        'account_name' => 'account_name',
        'account_number' => 'account_number',
        'account_type' => 'account_type',
        'address_1' => 'address_1',
        'address_2' => 'address_2',
        'city' => 'city',
        'country_code' => 'country_code',
        'country_of_birth' => 'country_of_birth',
        'country_of_issue' => 'country_of_issue',
        'dob' => 'dob',
        'expiry_date' => 'expiry_date',
        'first_name' => 'first_name',
        'identity_number' => 'identity_number',
        'identity_type' => 'identity_type',
        'last_name' => 'last_name',
        'nationality' => 'nationality',
        'other_names' => 'other_names',
        'phone' => 'phone',
        'postal_code' => 'postal_code',
        'reference' => 'reference',
        'state_code' => 'state_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_currency' => 'setAccountCurrency',
        'account_name' => 'setAccountName',
        'account_number' => 'setAccountNumber',
        'account_type' => 'setAccountType',
        'address_1' => 'setAddress1',
        'address_2' => 'setAddress2',
        'city' => 'setCity',
        'country_code' => 'setCountryCode',
        'country_of_birth' => 'setCountryOfBirth',
        'country_of_issue' => 'setCountryOfIssue',
        'dob' => 'setDob',
        'expiry_date' => 'setExpiryDate',
        'first_name' => 'setFirstName',
        'identity_number' => 'setIdentityNumber',
        'identity_type' => 'setIdentityType',
        'last_name' => 'setLastName',
        'nationality' => 'setNationality',
        'other_names' => 'setOtherNames',
        'phone' => 'setPhone',
        'postal_code' => 'setPostalCode',
        'reference' => 'setReference',
        'state_code' => 'setStateCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_currency' => 'getAccountCurrency',
        'account_name' => 'getAccountName',
        'account_number' => 'getAccountNumber',
        'account_type' => 'getAccountType',
        'address_1' => 'getAddress1',
        'address_2' => 'getAddress2',
        'city' => 'getCity',
        'country_code' => 'getCountryCode',
        'country_of_birth' => 'getCountryOfBirth',
        'country_of_issue' => 'getCountryOfIssue',
        'dob' => 'getDob',
        'expiry_date' => 'getExpiryDate',
        'first_name' => 'getFirstName',
        'identity_number' => 'getIdentityNumber',
        'identity_type' => 'getIdentityType',
        'last_name' => 'getLastName',
        'nationality' => 'getNationality',
        'other_names' => 'getOtherNames',
        'phone' => 'getPhone',
        'postal_code' => 'getPostalCode',
        'reference' => 'getReference',
        'state_code' => 'getStateCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_currency', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('address_1', $data ?? [], null);
        $this->setIfExists('address_2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('country_of_birth', $data ?? [], null);
        $this->setIfExists('country_of_issue', $data ?? [], null);
        $this->setIfExists('dob', $data ?? [], null);
        $this->setIfExists('expiry_date', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('identity_number', $data ?? [], null);
        $this->setIfExists('identity_type', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('nationality', $data ?? [], null);
        $this->setIfExists('other_names', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('state_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_currency
     *
     * @return string|null
     */
    public function getAccountCurrency()
    {
        return $this->container['account_currency'];
    }

    /**
     * Sets account_currency
     *
     * @param string|null $account_currency account_currency
     *
     * @return self
     */
    public function setAccountCurrency($account_currency)
    {

        if (is_null($account_currency)) {
            throw new \InvalidArgumentException('non-nullable account_currency cannot be null');
        }

        $this->container['account_currency'] = $account_currency;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name account_name
     *
     * @return self
     */
    public function setAccountName($account_name)
    {

        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }

        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number account_number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {

        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type account_type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {

        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }

        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets address_1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address_1'];
    }

    /**
     * Sets address_1
     *
     * @param string|null $address_1 address_1
     *
     * @return self
     */
    public function setAddress1($address_1)
    {

        if (is_null($address_1)) {
            throw new \InvalidArgumentException('non-nullable address_1 cannot be null');
        }

        $this->container['address_1'] = $address_1;

        return $this;
    }

    /**
     * Gets address_2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address_2'];
    }

    /**
     * Sets address_2
     *
     * @param string|null $address_2 address_2
     *
     * @return self
     */
    public function setAddress2($address_2)
    {

        if (is_null($address_2)) {
            throw new \InvalidArgumentException('non-nullable address_2 cannot be null');
        }

        $this->container['address_2'] = $address_2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {

        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code country_code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {

        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets country_of_birth
     *
     * @return string|null
     */
    public function getCountryOfBirth()
    {
        return $this->container['country_of_birth'];
    }

    /**
     * Sets country_of_birth
     *
     * @param string|null $country_of_birth country_of_birth
     *
     * @return self
     */
    public function setCountryOfBirth($country_of_birth)
    {

        if (is_null($country_of_birth)) {
            throw new \InvalidArgumentException('non-nullable country_of_birth cannot be null');
        }

        $this->container['country_of_birth'] = $country_of_birth;

        return $this;
    }

    /**
     * Gets country_of_issue
     *
     * @return string|null
     */
    public function getCountryOfIssue()
    {
        return $this->container['country_of_issue'];
    }

    /**
     * Sets country_of_issue
     *
     * @param string|null $country_of_issue country_of_issue
     *
     * @return self
     */
    public function setCountryOfIssue($country_of_issue)
    {

        if (is_null($country_of_issue)) {
            throw new \InvalidArgumentException('non-nullable country_of_issue cannot be null');
        }

        $this->container['country_of_issue'] = $country_of_issue;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return string|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param string|null $dob dob
     *
     * @return self
     */
    public function setDob($dob)
    {

        if (is_null($dob)) {
            throw new \InvalidArgumentException('non-nullable dob cannot be null');
        }

        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return string|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param string|null $expiry_date expiry_date
     *
     * @return self
     */
    public function setExpiryDate($expiry_date)
    {

        if (is_null($expiry_date)) {
            throw new \InvalidArgumentException('non-nullable expiry_date cannot be null');
        }

        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {

        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets identity_number
     *
     * @return string|null
     */
    public function getIdentityNumber()
    {
        return $this->container['identity_number'];
    }

    /**
     * Sets identity_number
     *
     * @param string|null $identity_number identity_number
     *
     * @return self
     */
    public function setIdentityNumber($identity_number)
    {

        if (is_null($identity_number)) {
            throw new \InvalidArgumentException('non-nullable identity_number cannot be null');
        }

        $this->container['identity_number'] = $identity_number;

        return $this;
    }

    /**
     * Gets identity_type
     *
     * @return string|null
     */
    public function getIdentityType()
    {
        return $this->container['identity_type'];
    }

    /**
     * Sets identity_type
     *
     * @param string|null $identity_type identity_type
     *
     * @return self
     */
    public function setIdentityType($identity_type)
    {

        if (is_null($identity_type)) {
            throw new \InvalidArgumentException('non-nullable identity_type cannot be null');
        }

        $this->container['identity_type'] = $identity_type;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {

        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string|null $nationality nationality
     *
     * @return self
     */
    public function setNationality($nationality)
    {

        if (is_null($nationality)) {
            throw new \InvalidArgumentException('non-nullable nationality cannot be null');
        }

        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets other_names
     *
     * @return string|null
     */
    public function getOtherNames()
    {
        return $this->container['other_names'];
    }

    /**
     * Sets other_names
     *
     * @param string|null $other_names other_names
     *
     * @return self
     */
    public function setOtherNames($other_names)
    {

        if (is_null($other_names)) {
            throw new \InvalidArgumentException('non-nullable other_names cannot be null');
        }

        $this->container['other_names'] = $other_names;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {

        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {

        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {

        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param string|null $state_code state_code
     *
     * @return self
     */
    public function setStateCode($state_code)
    {

        if (is_null($state_code)) {
            throw new \InvalidArgumentException('non-nullable state_code cannot be null');
        }

        $this->container['state_code'] = $state_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


