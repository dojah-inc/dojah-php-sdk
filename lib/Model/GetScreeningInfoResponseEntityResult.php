<?php
/**
 * GetScreeningInfoResponseEntityResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * GetScreeningInfoResponseEntityResult Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class GetScreeningInfoResponseEntityResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetScreeningInfoResponse_entity_result';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'addresses' => 'string[]',
        'aka' => 'string',
        'aliases' => 'string[]',
        'country_name' => 'string',
        'dob' => 'string',
        'dob2' => 'string',
        'effective_date' => 'string',
        'entry_category' => 'string',
        'entry_desc' => 'string',
        'first_name' => 'string',
        'gov_designation' => 'string',
        'last_name' => 'string',
        'level_desc' => 'string',
        'master_id' => 'float',
        'name' => 'string',
        'national_id' => 'string',
        'other_id' => 'string',
        'passport_id' => 'string',
        'pob' => 'string',
        'positions' => 'string',
        'prefix' => 'string',
        'primary_name' => 'string',
        'related_id' => 'float',
        'relationships' => 'string[]',
        'remarks' => 'string',
        'source_name' => 'string',
        'source_web_links' => 'string',
        'sub_cat_desc' => 'string',
        'suffix' => 'string',
        'touch_date' => 'string',
        'watch' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'addresses' => null,
        'aka' => null,
        'aliases' => null,
        'country_name' => null,
        'dob' => null,
        'dob2' => null,
        'effective_date' => null,
        'entry_category' => null,
        'entry_desc' => null,
        'first_name' => null,
        'gov_designation' => null,
        'last_name' => null,
        'level_desc' => null,
        'master_id' => null,
        'name' => null,
        'national_id' => null,
        'other_id' => null,
        'passport_id' => null,
        'pob' => null,
        'positions' => null,
        'prefix' => null,
        'primary_name' => null,
        'related_id' => null,
        'relationships' => null,
        'remarks' => null,
        'source_name' => null,
        'source_web_links' => null,
        'sub_cat_desc' => null,
        'suffix' => null,
        'touch_date' => null,
        'watch' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'addresses' => false,
		'aka' => false,
		'aliases' => false,
		'country_name' => false,
		'dob' => false,
		'dob2' => false,
		'effective_date' => false,
		'entry_category' => false,
		'entry_desc' => false,
		'first_name' => false,
		'gov_designation' => false,
		'last_name' => false,
		'level_desc' => false,
		'master_id' => false,
		'name' => false,
		'national_id' => false,
		'other_id' => false,
		'passport_id' => false,
		'pob' => false,
		'positions' => false,
		'prefix' => false,
		'primary_name' => false,
		'related_id' => false,
		'relationships' => false,
		'remarks' => false,
		'source_name' => false,
		'source_web_links' => false,
		'sub_cat_desc' => false,
		'suffix' => false,
		'touch_date' => false,
		'watch' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addresses' => 'addresses',
        'aka' => 'aka',
        'aliases' => 'aliases',
        'country_name' => 'countryName',
        'dob' => 'dob',
        'dob2' => 'dob2',
        'effective_date' => 'effectiveDate',
        'entry_category' => 'entryCategory',
        'entry_desc' => 'entryDesc',
        'first_name' => 'firstName',
        'gov_designation' => 'govDesignation',
        'last_name' => 'lastName',
        'level_desc' => 'levelDesc',
        'master_id' => 'masterId',
        'name' => 'name',
        'national_id' => 'nationalId',
        'other_id' => 'otherId',
        'passport_id' => 'passportId',
        'pob' => 'pob',
        'positions' => 'positions',
        'prefix' => 'prefix',
        'primary_name' => 'primaryName',
        'related_id' => 'relatedId',
        'relationships' => 'relationships',
        'remarks' => 'remarks',
        'source_name' => 'sourceName',
        'source_web_links' => 'sourceWebLinks',
        'sub_cat_desc' => 'subCatDesc',
        'suffix' => 'suffix',
        'touch_date' => 'touchDate',
        'watch' => 'watch'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addresses' => 'setAddresses',
        'aka' => 'setAka',
        'aliases' => 'setAliases',
        'country_name' => 'setCountryName',
        'dob' => 'setDob',
        'dob2' => 'setDob2',
        'effective_date' => 'setEffectiveDate',
        'entry_category' => 'setEntryCategory',
        'entry_desc' => 'setEntryDesc',
        'first_name' => 'setFirstName',
        'gov_designation' => 'setGovDesignation',
        'last_name' => 'setLastName',
        'level_desc' => 'setLevelDesc',
        'master_id' => 'setMasterId',
        'name' => 'setName',
        'national_id' => 'setNationalId',
        'other_id' => 'setOtherId',
        'passport_id' => 'setPassportId',
        'pob' => 'setPob',
        'positions' => 'setPositions',
        'prefix' => 'setPrefix',
        'primary_name' => 'setPrimaryName',
        'related_id' => 'setRelatedId',
        'relationships' => 'setRelationships',
        'remarks' => 'setRemarks',
        'source_name' => 'setSourceName',
        'source_web_links' => 'setSourceWebLinks',
        'sub_cat_desc' => 'setSubCatDesc',
        'suffix' => 'setSuffix',
        'touch_date' => 'setTouchDate',
        'watch' => 'setWatch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addresses' => 'getAddresses',
        'aka' => 'getAka',
        'aliases' => 'getAliases',
        'country_name' => 'getCountryName',
        'dob' => 'getDob',
        'dob2' => 'getDob2',
        'effective_date' => 'getEffectiveDate',
        'entry_category' => 'getEntryCategory',
        'entry_desc' => 'getEntryDesc',
        'first_name' => 'getFirstName',
        'gov_designation' => 'getGovDesignation',
        'last_name' => 'getLastName',
        'level_desc' => 'getLevelDesc',
        'master_id' => 'getMasterId',
        'name' => 'getName',
        'national_id' => 'getNationalId',
        'other_id' => 'getOtherId',
        'passport_id' => 'getPassportId',
        'pob' => 'getPob',
        'positions' => 'getPositions',
        'prefix' => 'getPrefix',
        'primary_name' => 'getPrimaryName',
        'related_id' => 'getRelatedId',
        'relationships' => 'getRelationships',
        'remarks' => 'getRemarks',
        'source_name' => 'getSourceName',
        'source_web_links' => 'getSourceWebLinks',
        'sub_cat_desc' => 'getSubCatDesc',
        'suffix' => 'getSuffix',
        'touch_date' => 'getTouchDate',
        'watch' => 'getWatch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('aka', $data ?? [], null);
        $this->setIfExists('aliases', $data ?? [], null);
        $this->setIfExists('country_name', $data ?? [], null);
        $this->setIfExists('dob', $data ?? [], null);
        $this->setIfExists('dob2', $data ?? [], null);
        $this->setIfExists('effective_date', $data ?? [], null);
        $this->setIfExists('entry_category', $data ?? [], null);
        $this->setIfExists('entry_desc', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('gov_designation', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('level_desc', $data ?? [], null);
        $this->setIfExists('master_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('national_id', $data ?? [], null);
        $this->setIfExists('other_id', $data ?? [], null);
        $this->setIfExists('passport_id', $data ?? [], null);
        $this->setIfExists('pob', $data ?? [], null);
        $this->setIfExists('positions', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('primary_name', $data ?? [], null);
        $this->setIfExists('related_id', $data ?? [], null);
        $this->setIfExists('relationships', $data ?? [], null);
        $this->setIfExists('remarks', $data ?? [], null);
        $this->setIfExists('source_name', $data ?? [], null);
        $this->setIfExists('source_web_links', $data ?? [], null);
        $this->setIfExists('sub_cat_desc', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('touch_date', $data ?? [], null);
        $this->setIfExists('watch', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addresses
     *
     * @return string[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param string[]|null $addresses addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {

        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }

        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets aka
     *
     * @return string|null
     */
    public function getAka()
    {
        return $this->container['aka'];
    }

    /**
     * Sets aka
     *
     * @param string|null $aka aka
     *
     * @return self
     */
    public function setAka($aka)
    {

        if (is_null($aka)) {
            throw new \InvalidArgumentException('non-nullable aka cannot be null');
        }

        $this->container['aka'] = $aka;

        return $this;
    }

    /**
     * Gets aliases
     *
     * @return string[]|null
     */
    public function getAliases()
    {
        return $this->container['aliases'];
    }

    /**
     * Sets aliases
     *
     * @param string[]|null $aliases aliases
     *
     * @return self
     */
    public function setAliases($aliases)
    {

        if (is_null($aliases)) {
            throw new \InvalidArgumentException('non-nullable aliases cannot be null');
        }

        $this->container['aliases'] = $aliases;

        return $this;
    }

    /**
     * Gets country_name
     *
     * @return string|null
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     *
     * @param string|null $country_name country_name
     *
     * @return self
     */
    public function setCountryName($country_name)
    {

        if (is_null($country_name)) {
            throw new \InvalidArgumentException('non-nullable country_name cannot be null');
        }

        $this->container['country_name'] = $country_name;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return string|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param string|null $dob dob
     *
     * @return self
     */
    public function setDob($dob)
    {

        if (is_null($dob)) {
            throw new \InvalidArgumentException('non-nullable dob cannot be null');
        }

        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets dob2
     *
     * @return string|null
     */
    public function getDob2()
    {
        return $this->container['dob2'];
    }

    /**
     * Sets dob2
     *
     * @param string|null $dob2 dob2
     *
     * @return self
     */
    public function setDob2($dob2)
    {

        if (is_null($dob2)) {
            throw new \InvalidArgumentException('non-nullable dob2 cannot be null');
        }

        $this->container['dob2'] = $dob2;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return string|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param string|null $effective_date effective_date
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {

        if (is_null($effective_date)) {
            throw new \InvalidArgumentException('non-nullable effective_date cannot be null');
        }

        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets entry_category
     *
     * @return string|null
     */
    public function getEntryCategory()
    {
        return $this->container['entry_category'];
    }

    /**
     * Sets entry_category
     *
     * @param string|null $entry_category entry_category
     *
     * @return self
     */
    public function setEntryCategory($entry_category)
    {

        if (is_null($entry_category)) {
            throw new \InvalidArgumentException('non-nullable entry_category cannot be null');
        }

        $this->container['entry_category'] = $entry_category;

        return $this;
    }

    /**
     * Gets entry_desc
     *
     * @return string|null
     */
    public function getEntryDesc()
    {
        return $this->container['entry_desc'];
    }

    /**
     * Sets entry_desc
     *
     * @param string|null $entry_desc entry_desc
     *
     * @return self
     */
    public function setEntryDesc($entry_desc)
    {

        if (is_null($entry_desc)) {
            throw new \InvalidArgumentException('non-nullable entry_desc cannot be null');
        }

        $this->container['entry_desc'] = $entry_desc;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {

        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets gov_designation
     *
     * @return string|null
     */
    public function getGovDesignation()
    {
        return $this->container['gov_designation'];
    }

    /**
     * Sets gov_designation
     *
     * @param string|null $gov_designation gov_designation
     *
     * @return self
     */
    public function setGovDesignation($gov_designation)
    {

        if (is_null($gov_designation)) {
            throw new \InvalidArgumentException('non-nullable gov_designation cannot be null');
        }

        $this->container['gov_designation'] = $gov_designation;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {

        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets level_desc
     *
     * @return string|null
     */
    public function getLevelDesc()
    {
        return $this->container['level_desc'];
    }

    /**
     * Sets level_desc
     *
     * @param string|null $level_desc level_desc
     *
     * @return self
     */
    public function setLevelDesc($level_desc)
    {

        if (is_null($level_desc)) {
            throw new \InvalidArgumentException('non-nullable level_desc cannot be null');
        }

        $this->container['level_desc'] = $level_desc;

        return $this;
    }

    /**
     * Gets master_id
     *
     * @return float|null
     */
    public function getMasterId()
    {
        return $this->container['master_id'];
    }

    /**
     * Sets master_id
     *
     * @param float|null $master_id master_id
     *
     * @return self
     */
    public function setMasterId($master_id)
    {

        if (is_null($master_id)) {
            throw new \InvalidArgumentException('non-nullable master_id cannot be null');
        }

        $this->container['master_id'] = $master_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets national_id
     *
     * @return string|null
     */
    public function getNationalId()
    {
        return $this->container['national_id'];
    }

    /**
     * Sets national_id
     *
     * @param string|null $national_id national_id
     *
     * @return self
     */
    public function setNationalId($national_id)
    {

        if (is_null($national_id)) {
            throw new \InvalidArgumentException('non-nullable national_id cannot be null');
        }

        $this->container['national_id'] = $national_id;

        return $this;
    }

    /**
     * Gets other_id
     *
     * @return string|null
     */
    public function getOtherId()
    {
        return $this->container['other_id'];
    }

    /**
     * Sets other_id
     *
     * @param string|null $other_id other_id
     *
     * @return self
     */
    public function setOtherId($other_id)
    {

        if (is_null($other_id)) {
            throw new \InvalidArgumentException('non-nullable other_id cannot be null');
        }

        $this->container['other_id'] = $other_id;

        return $this;
    }

    /**
     * Gets passport_id
     *
     * @return string|null
     */
    public function getPassportId()
    {
        return $this->container['passport_id'];
    }

    /**
     * Sets passport_id
     *
     * @param string|null $passport_id passport_id
     *
     * @return self
     */
    public function setPassportId($passport_id)
    {

        if (is_null($passport_id)) {
            throw new \InvalidArgumentException('non-nullable passport_id cannot be null');
        }

        $this->container['passport_id'] = $passport_id;

        return $this;
    }

    /**
     * Gets pob
     *
     * @return string|null
     */
    public function getPob()
    {
        return $this->container['pob'];
    }

    /**
     * Sets pob
     *
     * @param string|null $pob pob
     *
     * @return self
     */
    public function setPob($pob)
    {

        if (is_null($pob)) {
            throw new \InvalidArgumentException('non-nullable pob cannot be null');
        }

        $this->container['pob'] = $pob;

        return $this;
    }

    /**
     * Gets positions
     *
     * @return string|null
     */
    public function getPositions()
    {
        return $this->container['positions'];
    }

    /**
     * Sets positions
     *
     * @param string|null $positions positions
     *
     * @return self
     */
    public function setPositions($positions)
    {

        if (is_null($positions)) {
            throw new \InvalidArgumentException('non-nullable positions cannot be null');
        }

        $this->container['positions'] = $positions;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {

        if (is_null($prefix)) {
            throw new \InvalidArgumentException('non-nullable prefix cannot be null');
        }

        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets primary_name
     *
     * @return string|null
     */
    public function getPrimaryName()
    {
        return $this->container['primary_name'];
    }

    /**
     * Sets primary_name
     *
     * @param string|null $primary_name primary_name
     *
     * @return self
     */
    public function setPrimaryName($primary_name)
    {

        if (is_null($primary_name)) {
            throw new \InvalidArgumentException('non-nullable primary_name cannot be null');
        }

        $this->container['primary_name'] = $primary_name;

        return $this;
    }

    /**
     * Gets related_id
     *
     * @return float|null
     */
    public function getRelatedId()
    {
        return $this->container['related_id'];
    }

    /**
     * Sets related_id
     *
     * @param float|null $related_id related_id
     *
     * @return self
     */
    public function setRelatedId($related_id)
    {

        if (is_null($related_id)) {
            throw new \InvalidArgumentException('non-nullable related_id cannot be null');
        }

        $this->container['related_id'] = $related_id;

        return $this;
    }

    /**
     * Gets relationships
     *
     * @return string[]|null
     */
    public function getRelationships()
    {
        return $this->container['relationships'];
    }

    /**
     * Sets relationships
     *
     * @param string[]|null $relationships relationships
     *
     * @return self
     */
    public function setRelationships($relationships)
    {

        if (is_null($relationships)) {
            throw new \InvalidArgumentException('non-nullable relationships cannot be null');
        }

        $this->container['relationships'] = $relationships;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {

        if (is_null($remarks)) {
            throw new \InvalidArgumentException('non-nullable remarks cannot be null');
        }

        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets source_name
     *
     * @return string|null
     */
    public function getSourceName()
    {
        return $this->container['source_name'];
    }

    /**
     * Sets source_name
     *
     * @param string|null $source_name source_name
     *
     * @return self
     */
    public function setSourceName($source_name)
    {

        if (is_null($source_name)) {
            throw new \InvalidArgumentException('non-nullable source_name cannot be null');
        }

        $this->container['source_name'] = $source_name;

        return $this;
    }

    /**
     * Gets source_web_links
     *
     * @return string|null
     */
    public function getSourceWebLinks()
    {
        return $this->container['source_web_links'];
    }

    /**
     * Sets source_web_links
     *
     * @param string|null $source_web_links source_web_links
     *
     * @return self
     */
    public function setSourceWebLinks($source_web_links)
    {

        if (is_null($source_web_links)) {
            throw new \InvalidArgumentException('non-nullable source_web_links cannot be null');
        }

        $this->container['source_web_links'] = $source_web_links;

        return $this;
    }

    /**
     * Gets sub_cat_desc
     *
     * @return string|null
     */
    public function getSubCatDesc()
    {
        return $this->container['sub_cat_desc'];
    }

    /**
     * Sets sub_cat_desc
     *
     * @param string|null $sub_cat_desc sub_cat_desc
     *
     * @return self
     */
    public function setSubCatDesc($sub_cat_desc)
    {

        if (is_null($sub_cat_desc)) {
            throw new \InvalidArgumentException('non-nullable sub_cat_desc cannot be null');
        }

        $this->container['sub_cat_desc'] = $sub_cat_desc;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix suffix
     *
     * @return self
     */
    public function setSuffix($suffix)
    {

        if (is_null($suffix)) {
            throw new \InvalidArgumentException('non-nullable suffix cannot be null');
        }

        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets touch_date
     *
     * @return string|null
     */
    public function getTouchDate()
    {
        return $this->container['touch_date'];
    }

    /**
     * Sets touch_date
     *
     * @param string|null $touch_date touch_date
     *
     * @return self
     */
    public function setTouchDate($touch_date)
    {

        if (is_null($touch_date)) {
            throw new \InvalidArgumentException('non-nullable touch_date cannot be null');
        }

        $this->container['touch_date'] = $touch_date;

        return $this;
    }

    /**
     * Gets watch
     *
     * @return bool|null
     */
    public function getWatch()
    {
        return $this->container['watch'];
    }

    /**
     * Sets watch
     *
     * @param bool|null $watch watch
     *
     * @return self
     */
    public function setWatch($watch)
    {

        if (is_null($watch)) {
            throw new \InvalidArgumentException('non-nullable watch cannot be null');
        }

        $this->container['watch'] = $watch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


