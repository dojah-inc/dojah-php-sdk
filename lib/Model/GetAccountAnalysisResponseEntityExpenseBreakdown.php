<?php
/**
 * GetAccountAnalysisResponseEntityExpenseBreakdown
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * GetAccountAnalysisResponseEntityExpenseBreakdown Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class GetAccountAnalysisResponseEntityExpenseBreakdown implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetAccountAnalysisResponse_entity_expenseBreakdown';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'maximum_expense' => 'string',
        'atm_locations' => 'string[]',
        'average_monthly_expense_on_airtimeand_data' => 'float',
        'average_monthly_expense_on_atm_and_pos' => 'float',
        'average_monthly_expense_on_charges_and_stamp_duty' => 'float',
        'average_monthly_expense_on_entertainment' => 'float',
        'average_monthly_expense_on_gambling' => 'float',
        'average_monthly_expense_on_health' => 'float',
        'average_monthly_expense_on_hospitalityand_food' => 'float',
        'average_monthly_expense_on_insurance' => 'float',
        'average_monthly_expense_on_international_transactions' => 'float',
        'average_monthly_expense_on_onlineand_web' => 'float',
        'average_monthly_expense_on_rent' => 'float',
        'average_monthly_expense_on_savings_and_investments' => 'float',
        'average_monthly_expense_on_transfer' => 'float',
        'average_monthly_expense_on_transportation' => 'float',
        'average_monthly_expense_on_ussd' => 'float',
        'average_monthly_expense_on_utilities' => 'float',
        'average_monthly_expenseon_travel' => 'float',
        'average_monthly_recurring_expenses' => 'float',
        'average_monthly_total_expenses' => 'float',
        'minimum_salary' => 'float',
        'month_withmaximum_expense' => 'string',
        'most_frequent_expense' => 'string',
        'most_frequent_expense_category' => 'string',
        'total_expense_on_airtime_and_data' => 'float',
        'total_expense_on_international_transactions' => 'float',
        'total_expense_on_savings_and_investments' => 'float',
        'total_expense_on_transfer' => 'float',
        'total_expense_on_transportation' => 'float',
        'total_expense_on_travel' => 'float',
        'total_expense_on_ussd' => 'float',
        'total_expense_on_utilities' => 'float',
        'total_expenseon_charges_and_stamp_duty' => 'float',
        'total_expenseon_entertainment' => 'float',
        'total_expenseon_gambling' => 'float',
        'total_expenseon_health' => 'float',
        'total_expenseon_hospitalityand_food' => 'float',
        'total_expenseon_insurance' => 'float',
        'total_expenseon_onlineand_web' => 'float',
        'total_monthly_expenses' => 'float',
        'total_recurring_expenses' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'maximum_expense' => null,
        'atm_locations' => null,
        'average_monthly_expense_on_airtimeand_data' => null,
        'average_monthly_expense_on_atm_and_pos' => null,
        'average_monthly_expense_on_charges_and_stamp_duty' => null,
        'average_monthly_expense_on_entertainment' => null,
        'average_monthly_expense_on_gambling' => null,
        'average_monthly_expense_on_health' => null,
        'average_monthly_expense_on_hospitalityand_food' => null,
        'average_monthly_expense_on_insurance' => null,
        'average_monthly_expense_on_international_transactions' => null,
        'average_monthly_expense_on_onlineand_web' => null,
        'average_monthly_expense_on_rent' => null,
        'average_monthly_expense_on_savings_and_investments' => null,
        'average_monthly_expense_on_transfer' => null,
        'average_monthly_expense_on_transportation' => null,
        'average_monthly_expense_on_ussd' => null,
        'average_monthly_expense_on_utilities' => null,
        'average_monthly_expenseon_travel' => null,
        'average_monthly_recurring_expenses' => null,
        'average_monthly_total_expenses' => null,
        'minimum_salary' => null,
        'month_withmaximum_expense' => null,
        'most_frequent_expense' => null,
        'most_frequent_expense_category' => null,
        'total_expense_on_airtime_and_data' => null,
        'total_expense_on_international_transactions' => null,
        'total_expense_on_savings_and_investments' => null,
        'total_expense_on_transfer' => null,
        'total_expense_on_transportation' => null,
        'total_expense_on_travel' => null,
        'total_expense_on_ussd' => null,
        'total_expense_on_utilities' => null,
        'total_expenseon_charges_and_stamp_duty' => null,
        'total_expenseon_entertainment' => null,
        'total_expenseon_gambling' => null,
        'total_expenseon_health' => null,
        'total_expenseon_hospitalityand_food' => null,
        'total_expenseon_insurance' => null,
        'total_expenseon_onlineand_web' => null,
        'total_monthly_expenses' => null,
        'total_recurring_expenses' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'maximum_expense' => false,
		'atm_locations' => false,
		'average_monthly_expense_on_airtimeand_data' => false,
		'average_monthly_expense_on_atm_and_pos' => false,
		'average_monthly_expense_on_charges_and_stamp_duty' => false,
		'average_monthly_expense_on_entertainment' => false,
		'average_monthly_expense_on_gambling' => false,
		'average_monthly_expense_on_health' => false,
		'average_monthly_expense_on_hospitalityand_food' => false,
		'average_monthly_expense_on_insurance' => false,
		'average_monthly_expense_on_international_transactions' => false,
		'average_monthly_expense_on_onlineand_web' => false,
		'average_monthly_expense_on_rent' => false,
		'average_monthly_expense_on_savings_and_investments' => false,
		'average_monthly_expense_on_transfer' => false,
		'average_monthly_expense_on_transportation' => false,
		'average_monthly_expense_on_ussd' => false,
		'average_monthly_expense_on_utilities' => false,
		'average_monthly_expenseon_travel' => false,
		'average_monthly_recurring_expenses' => false,
		'average_monthly_total_expenses' => false,
		'minimum_salary' => false,
		'month_withmaximum_expense' => false,
		'most_frequent_expense' => false,
		'most_frequent_expense_category' => false,
		'total_expense_on_airtime_and_data' => false,
		'total_expense_on_international_transactions' => false,
		'total_expense_on_savings_and_investments' => false,
		'total_expense_on_transfer' => false,
		'total_expense_on_transportation' => false,
		'total_expense_on_travel' => false,
		'total_expense_on_ussd' => false,
		'total_expense_on_utilities' => false,
		'total_expenseon_charges_and_stamp_duty' => false,
		'total_expenseon_entertainment' => false,
		'total_expenseon_gambling' => false,
		'total_expenseon_health' => false,
		'total_expenseon_hospitalityand_food' => false,
		'total_expenseon_insurance' => false,
		'total_expenseon_onlineand_web' => false,
		'total_monthly_expenses' => false,
		'total_recurring_expenses' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'maximum_expense' => 'MaximumExpense',
        'atm_locations' => 'atmLocations',
        'average_monthly_expense_on_airtimeand_data' => 'averageMonthlyExpenseOnAirtimeandData',
        'average_monthly_expense_on_atm_and_pos' => 'averageMonthlyExpenseOnAtmAndPOS',
        'average_monthly_expense_on_charges_and_stamp_duty' => 'averageMonthlyExpenseOnChargesAndStampDuty',
        'average_monthly_expense_on_entertainment' => 'averageMonthlyExpenseOnEntertainment',
        'average_monthly_expense_on_gambling' => 'averageMonthlyExpenseOnGambling',
        'average_monthly_expense_on_health' => 'averageMonthlyExpenseOnHealth',
        'average_monthly_expense_on_hospitalityand_food' => 'averageMonthlyExpenseOnHospitalityandFood',
        'average_monthly_expense_on_insurance' => 'averageMonthlyExpenseOnInsurance',
        'average_monthly_expense_on_international_transactions' => 'averageMonthlyExpenseOnInternationalTransactions',
        'average_monthly_expense_on_onlineand_web' => 'averageMonthlyExpenseOnOnlineandWeb',
        'average_monthly_expense_on_rent' => 'averageMonthlyExpenseOnRent',
        'average_monthly_expense_on_savings_and_investments' => 'averageMonthlyExpenseOnSavingsAndInvestments',
        'average_monthly_expense_on_transfer' => 'averageMonthlyExpenseOnTransfer',
        'average_monthly_expense_on_transportation' => 'averageMonthlyExpenseOnTransportation',
        'average_monthly_expense_on_ussd' => 'averageMonthlyExpenseOnUSSD',
        'average_monthly_expense_on_utilities' => 'averageMonthlyExpenseOnUtilities',
        'average_monthly_expenseon_travel' => 'averageMonthlyExpenseonTravel',
        'average_monthly_recurring_expenses' => 'averageMonthlyRecurringExpenses',
        'average_monthly_total_expenses' => 'averageMonthlyTotalExpenses',
        'minimum_salary' => 'minimumSalary',
        'month_withmaximum_expense' => 'monthWithmaximumExpense',
        'most_frequent_expense' => 'mostFrequentExpense',
        'most_frequent_expense_category' => 'mostFrequentExpenseCategory',
        'total_expense_on_airtime_and_data' => 'totalExpenseOnAirtimeAndData',
        'total_expense_on_international_transactions' => 'totalExpenseOnInternationalTransactions',
        'total_expense_on_savings_and_investments' => 'totalExpenseOnSavingsAndInvestments',
        'total_expense_on_transfer' => 'totalExpenseOnTransfer',
        'total_expense_on_transportation' => 'totalExpenseOnTransportation',
        'total_expense_on_travel' => 'totalExpenseOnTravel',
        'total_expense_on_ussd' => 'totalExpenseOnUSSD',
        'total_expense_on_utilities' => 'totalExpenseOnUtilities',
        'total_expenseon_charges_and_stamp_duty' => 'totalExpenseonChargesAndStampDuty',
        'total_expenseon_entertainment' => 'totalExpenseonEntertainment',
        'total_expenseon_gambling' => 'totalExpenseonGambling',
        'total_expenseon_health' => 'totalExpenseonHealth',
        'total_expenseon_hospitalityand_food' => 'totalExpenseonHospitalityandFood',
        'total_expenseon_insurance' => 'totalExpenseonInsurance',
        'total_expenseon_onlineand_web' => 'totalExpenseonOnlineandWeb',
        'total_monthly_expenses' => 'totalMonthlyExpenses',
        'total_recurring_expenses' => 'totalRecurringExpenses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'maximum_expense' => 'setMaximumExpense',
        'atm_locations' => 'setAtmLocations',
        'average_monthly_expense_on_airtimeand_data' => 'setAverageMonthlyExpenseOnAirtimeandData',
        'average_monthly_expense_on_atm_and_pos' => 'setAverageMonthlyExpenseOnAtmAndPos',
        'average_monthly_expense_on_charges_and_stamp_duty' => 'setAverageMonthlyExpenseOnChargesAndStampDuty',
        'average_monthly_expense_on_entertainment' => 'setAverageMonthlyExpenseOnEntertainment',
        'average_monthly_expense_on_gambling' => 'setAverageMonthlyExpenseOnGambling',
        'average_monthly_expense_on_health' => 'setAverageMonthlyExpenseOnHealth',
        'average_monthly_expense_on_hospitalityand_food' => 'setAverageMonthlyExpenseOnHospitalityandFood',
        'average_monthly_expense_on_insurance' => 'setAverageMonthlyExpenseOnInsurance',
        'average_monthly_expense_on_international_transactions' => 'setAverageMonthlyExpenseOnInternationalTransactions',
        'average_monthly_expense_on_onlineand_web' => 'setAverageMonthlyExpenseOnOnlineandWeb',
        'average_monthly_expense_on_rent' => 'setAverageMonthlyExpenseOnRent',
        'average_monthly_expense_on_savings_and_investments' => 'setAverageMonthlyExpenseOnSavingsAndInvestments',
        'average_monthly_expense_on_transfer' => 'setAverageMonthlyExpenseOnTransfer',
        'average_monthly_expense_on_transportation' => 'setAverageMonthlyExpenseOnTransportation',
        'average_monthly_expense_on_ussd' => 'setAverageMonthlyExpenseOnUssd',
        'average_monthly_expense_on_utilities' => 'setAverageMonthlyExpenseOnUtilities',
        'average_monthly_expenseon_travel' => 'setAverageMonthlyExpenseonTravel',
        'average_monthly_recurring_expenses' => 'setAverageMonthlyRecurringExpenses',
        'average_monthly_total_expenses' => 'setAverageMonthlyTotalExpenses',
        'minimum_salary' => 'setMinimumSalary',
        'month_withmaximum_expense' => 'setMonthWithmaximumExpense',
        'most_frequent_expense' => 'setMostFrequentExpense',
        'most_frequent_expense_category' => 'setMostFrequentExpenseCategory',
        'total_expense_on_airtime_and_data' => 'setTotalExpenseOnAirtimeAndData',
        'total_expense_on_international_transactions' => 'setTotalExpenseOnInternationalTransactions',
        'total_expense_on_savings_and_investments' => 'setTotalExpenseOnSavingsAndInvestments',
        'total_expense_on_transfer' => 'setTotalExpenseOnTransfer',
        'total_expense_on_transportation' => 'setTotalExpenseOnTransportation',
        'total_expense_on_travel' => 'setTotalExpenseOnTravel',
        'total_expense_on_ussd' => 'setTotalExpenseOnUssd',
        'total_expense_on_utilities' => 'setTotalExpenseOnUtilities',
        'total_expenseon_charges_and_stamp_duty' => 'setTotalExpenseonChargesAndStampDuty',
        'total_expenseon_entertainment' => 'setTotalExpenseonEntertainment',
        'total_expenseon_gambling' => 'setTotalExpenseonGambling',
        'total_expenseon_health' => 'setTotalExpenseonHealth',
        'total_expenseon_hospitalityand_food' => 'setTotalExpenseonHospitalityandFood',
        'total_expenseon_insurance' => 'setTotalExpenseonInsurance',
        'total_expenseon_onlineand_web' => 'setTotalExpenseonOnlineandWeb',
        'total_monthly_expenses' => 'setTotalMonthlyExpenses',
        'total_recurring_expenses' => 'setTotalRecurringExpenses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'maximum_expense' => 'getMaximumExpense',
        'atm_locations' => 'getAtmLocations',
        'average_monthly_expense_on_airtimeand_data' => 'getAverageMonthlyExpenseOnAirtimeandData',
        'average_monthly_expense_on_atm_and_pos' => 'getAverageMonthlyExpenseOnAtmAndPos',
        'average_monthly_expense_on_charges_and_stamp_duty' => 'getAverageMonthlyExpenseOnChargesAndStampDuty',
        'average_monthly_expense_on_entertainment' => 'getAverageMonthlyExpenseOnEntertainment',
        'average_monthly_expense_on_gambling' => 'getAverageMonthlyExpenseOnGambling',
        'average_monthly_expense_on_health' => 'getAverageMonthlyExpenseOnHealth',
        'average_monthly_expense_on_hospitalityand_food' => 'getAverageMonthlyExpenseOnHospitalityandFood',
        'average_monthly_expense_on_insurance' => 'getAverageMonthlyExpenseOnInsurance',
        'average_monthly_expense_on_international_transactions' => 'getAverageMonthlyExpenseOnInternationalTransactions',
        'average_monthly_expense_on_onlineand_web' => 'getAverageMonthlyExpenseOnOnlineandWeb',
        'average_monthly_expense_on_rent' => 'getAverageMonthlyExpenseOnRent',
        'average_monthly_expense_on_savings_and_investments' => 'getAverageMonthlyExpenseOnSavingsAndInvestments',
        'average_monthly_expense_on_transfer' => 'getAverageMonthlyExpenseOnTransfer',
        'average_monthly_expense_on_transportation' => 'getAverageMonthlyExpenseOnTransportation',
        'average_monthly_expense_on_ussd' => 'getAverageMonthlyExpenseOnUssd',
        'average_monthly_expense_on_utilities' => 'getAverageMonthlyExpenseOnUtilities',
        'average_monthly_expenseon_travel' => 'getAverageMonthlyExpenseonTravel',
        'average_monthly_recurring_expenses' => 'getAverageMonthlyRecurringExpenses',
        'average_monthly_total_expenses' => 'getAverageMonthlyTotalExpenses',
        'minimum_salary' => 'getMinimumSalary',
        'month_withmaximum_expense' => 'getMonthWithmaximumExpense',
        'most_frequent_expense' => 'getMostFrequentExpense',
        'most_frequent_expense_category' => 'getMostFrequentExpenseCategory',
        'total_expense_on_airtime_and_data' => 'getTotalExpenseOnAirtimeAndData',
        'total_expense_on_international_transactions' => 'getTotalExpenseOnInternationalTransactions',
        'total_expense_on_savings_and_investments' => 'getTotalExpenseOnSavingsAndInvestments',
        'total_expense_on_transfer' => 'getTotalExpenseOnTransfer',
        'total_expense_on_transportation' => 'getTotalExpenseOnTransportation',
        'total_expense_on_travel' => 'getTotalExpenseOnTravel',
        'total_expense_on_ussd' => 'getTotalExpenseOnUssd',
        'total_expense_on_utilities' => 'getTotalExpenseOnUtilities',
        'total_expenseon_charges_and_stamp_duty' => 'getTotalExpenseonChargesAndStampDuty',
        'total_expenseon_entertainment' => 'getTotalExpenseonEntertainment',
        'total_expenseon_gambling' => 'getTotalExpenseonGambling',
        'total_expenseon_health' => 'getTotalExpenseonHealth',
        'total_expenseon_hospitalityand_food' => 'getTotalExpenseonHospitalityandFood',
        'total_expenseon_insurance' => 'getTotalExpenseonInsurance',
        'total_expenseon_onlineand_web' => 'getTotalExpenseonOnlineandWeb',
        'total_monthly_expenses' => 'getTotalMonthlyExpenses',
        'total_recurring_expenses' => 'getTotalRecurringExpenses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('maximum_expense', $data ?? [], null);
        $this->setIfExists('atm_locations', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_airtimeand_data', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_atm_and_pos', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_charges_and_stamp_duty', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_entertainment', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_gambling', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_health', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_hospitalityand_food', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_insurance', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_international_transactions', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_onlineand_web', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_rent', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_savings_and_investments', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_transfer', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_transportation', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_ussd', $data ?? [], null);
        $this->setIfExists('average_monthly_expense_on_utilities', $data ?? [], null);
        $this->setIfExists('average_monthly_expenseon_travel', $data ?? [], null);
        $this->setIfExists('average_monthly_recurring_expenses', $data ?? [], null);
        $this->setIfExists('average_monthly_total_expenses', $data ?? [], null);
        $this->setIfExists('minimum_salary', $data ?? [], null);
        $this->setIfExists('month_withmaximum_expense', $data ?? [], null);
        $this->setIfExists('most_frequent_expense', $data ?? [], null);
        $this->setIfExists('most_frequent_expense_category', $data ?? [], null);
        $this->setIfExists('total_expense_on_airtime_and_data', $data ?? [], null);
        $this->setIfExists('total_expense_on_international_transactions', $data ?? [], null);
        $this->setIfExists('total_expense_on_savings_and_investments', $data ?? [], null);
        $this->setIfExists('total_expense_on_transfer', $data ?? [], null);
        $this->setIfExists('total_expense_on_transportation', $data ?? [], null);
        $this->setIfExists('total_expense_on_travel', $data ?? [], null);
        $this->setIfExists('total_expense_on_ussd', $data ?? [], null);
        $this->setIfExists('total_expense_on_utilities', $data ?? [], null);
        $this->setIfExists('total_expenseon_charges_and_stamp_duty', $data ?? [], null);
        $this->setIfExists('total_expenseon_entertainment', $data ?? [], null);
        $this->setIfExists('total_expenseon_gambling', $data ?? [], null);
        $this->setIfExists('total_expenseon_health', $data ?? [], null);
        $this->setIfExists('total_expenseon_hospitalityand_food', $data ?? [], null);
        $this->setIfExists('total_expenseon_insurance', $data ?? [], null);
        $this->setIfExists('total_expenseon_onlineand_web', $data ?? [], null);
        $this->setIfExists('total_monthly_expenses', $data ?? [], null);
        $this->setIfExists('total_recurring_expenses', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets maximum_expense
     *
     * @return string|null
     */
    public function getMaximumExpense()
    {
        return $this->container['maximum_expense'];
    }

    /**
     * Sets maximum_expense
     *
     * @param string|null $maximum_expense maximum_expense
     *
     * @return self
     */
    public function setMaximumExpense($maximum_expense)
    {

        if (is_null($maximum_expense)) {
            throw new \InvalidArgumentException('non-nullable maximum_expense cannot be null');
        }

        $this->container['maximum_expense'] = $maximum_expense;

        return $this;
    }

    /**
     * Gets atm_locations
     *
     * @return string[]|null
     */
    public function getAtmLocations()
    {
        return $this->container['atm_locations'];
    }

    /**
     * Sets atm_locations
     *
     * @param string[]|null $atm_locations atm_locations
     *
     * @return self
     */
    public function setAtmLocations($atm_locations)
    {

        if (is_null($atm_locations)) {
            throw new \InvalidArgumentException('non-nullable atm_locations cannot be null');
        }

        $this->container['atm_locations'] = $atm_locations;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_airtimeand_data
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnAirtimeandData()
    {
        return $this->container['average_monthly_expense_on_airtimeand_data'];
    }

    /**
     * Sets average_monthly_expense_on_airtimeand_data
     *
     * @param float|null $average_monthly_expense_on_airtimeand_data average_monthly_expense_on_airtimeand_data
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnAirtimeandData($average_monthly_expense_on_airtimeand_data)
    {

        if (is_null($average_monthly_expense_on_airtimeand_data)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_airtimeand_data cannot be null');
        }

        $this->container['average_monthly_expense_on_airtimeand_data'] = $average_monthly_expense_on_airtimeand_data;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_atm_and_pos
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnAtmAndPos()
    {
        return $this->container['average_monthly_expense_on_atm_and_pos'];
    }

    /**
     * Sets average_monthly_expense_on_atm_and_pos
     *
     * @param float|null $average_monthly_expense_on_atm_and_pos average_monthly_expense_on_atm_and_pos
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnAtmAndPos($average_monthly_expense_on_atm_and_pos)
    {

        if (is_null($average_monthly_expense_on_atm_and_pos)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_atm_and_pos cannot be null');
        }

        $this->container['average_monthly_expense_on_atm_and_pos'] = $average_monthly_expense_on_atm_and_pos;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_charges_and_stamp_duty
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnChargesAndStampDuty()
    {
        return $this->container['average_monthly_expense_on_charges_and_stamp_duty'];
    }

    /**
     * Sets average_monthly_expense_on_charges_and_stamp_duty
     *
     * @param float|null $average_monthly_expense_on_charges_and_stamp_duty average_monthly_expense_on_charges_and_stamp_duty
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnChargesAndStampDuty($average_monthly_expense_on_charges_and_stamp_duty)
    {

        if (is_null($average_monthly_expense_on_charges_and_stamp_duty)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_charges_and_stamp_duty cannot be null');
        }

        $this->container['average_monthly_expense_on_charges_and_stamp_duty'] = $average_monthly_expense_on_charges_and_stamp_duty;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_entertainment
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnEntertainment()
    {
        return $this->container['average_monthly_expense_on_entertainment'];
    }

    /**
     * Sets average_monthly_expense_on_entertainment
     *
     * @param float|null $average_monthly_expense_on_entertainment average_monthly_expense_on_entertainment
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnEntertainment($average_monthly_expense_on_entertainment)
    {

        if (is_null($average_monthly_expense_on_entertainment)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_entertainment cannot be null');
        }

        $this->container['average_monthly_expense_on_entertainment'] = $average_monthly_expense_on_entertainment;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_gambling
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnGambling()
    {
        return $this->container['average_monthly_expense_on_gambling'];
    }

    /**
     * Sets average_monthly_expense_on_gambling
     *
     * @param float|null $average_monthly_expense_on_gambling average_monthly_expense_on_gambling
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnGambling($average_monthly_expense_on_gambling)
    {

        if (is_null($average_monthly_expense_on_gambling)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_gambling cannot be null');
        }

        $this->container['average_monthly_expense_on_gambling'] = $average_monthly_expense_on_gambling;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_health
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnHealth()
    {
        return $this->container['average_monthly_expense_on_health'];
    }

    /**
     * Sets average_monthly_expense_on_health
     *
     * @param float|null $average_monthly_expense_on_health average_monthly_expense_on_health
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnHealth($average_monthly_expense_on_health)
    {

        if (is_null($average_monthly_expense_on_health)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_health cannot be null');
        }

        $this->container['average_monthly_expense_on_health'] = $average_monthly_expense_on_health;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_hospitalityand_food
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnHospitalityandFood()
    {
        return $this->container['average_monthly_expense_on_hospitalityand_food'];
    }

    /**
     * Sets average_monthly_expense_on_hospitalityand_food
     *
     * @param float|null $average_monthly_expense_on_hospitalityand_food average_monthly_expense_on_hospitalityand_food
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnHospitalityandFood($average_monthly_expense_on_hospitalityand_food)
    {

        if (is_null($average_monthly_expense_on_hospitalityand_food)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_hospitalityand_food cannot be null');
        }

        $this->container['average_monthly_expense_on_hospitalityand_food'] = $average_monthly_expense_on_hospitalityand_food;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_insurance
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnInsurance()
    {
        return $this->container['average_monthly_expense_on_insurance'];
    }

    /**
     * Sets average_monthly_expense_on_insurance
     *
     * @param float|null $average_monthly_expense_on_insurance average_monthly_expense_on_insurance
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnInsurance($average_monthly_expense_on_insurance)
    {

        if (is_null($average_monthly_expense_on_insurance)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_insurance cannot be null');
        }

        $this->container['average_monthly_expense_on_insurance'] = $average_monthly_expense_on_insurance;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_international_transactions
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnInternationalTransactions()
    {
        return $this->container['average_monthly_expense_on_international_transactions'];
    }

    /**
     * Sets average_monthly_expense_on_international_transactions
     *
     * @param float|null $average_monthly_expense_on_international_transactions average_monthly_expense_on_international_transactions
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnInternationalTransactions($average_monthly_expense_on_international_transactions)
    {

        if (is_null($average_monthly_expense_on_international_transactions)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_international_transactions cannot be null');
        }

        $this->container['average_monthly_expense_on_international_transactions'] = $average_monthly_expense_on_international_transactions;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_onlineand_web
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnOnlineandWeb()
    {
        return $this->container['average_monthly_expense_on_onlineand_web'];
    }

    /**
     * Sets average_monthly_expense_on_onlineand_web
     *
     * @param float|null $average_monthly_expense_on_onlineand_web average_monthly_expense_on_onlineand_web
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnOnlineandWeb($average_monthly_expense_on_onlineand_web)
    {

        if (is_null($average_monthly_expense_on_onlineand_web)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_onlineand_web cannot be null');
        }

        $this->container['average_monthly_expense_on_onlineand_web'] = $average_monthly_expense_on_onlineand_web;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_rent
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnRent()
    {
        return $this->container['average_monthly_expense_on_rent'];
    }

    /**
     * Sets average_monthly_expense_on_rent
     *
     * @param float|null $average_monthly_expense_on_rent average_monthly_expense_on_rent
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnRent($average_monthly_expense_on_rent)
    {

        if (is_null($average_monthly_expense_on_rent)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_rent cannot be null');
        }

        $this->container['average_monthly_expense_on_rent'] = $average_monthly_expense_on_rent;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_savings_and_investments
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnSavingsAndInvestments()
    {
        return $this->container['average_monthly_expense_on_savings_and_investments'];
    }

    /**
     * Sets average_monthly_expense_on_savings_and_investments
     *
     * @param float|null $average_monthly_expense_on_savings_and_investments average_monthly_expense_on_savings_and_investments
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnSavingsAndInvestments($average_monthly_expense_on_savings_and_investments)
    {

        if (is_null($average_monthly_expense_on_savings_and_investments)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_savings_and_investments cannot be null');
        }

        $this->container['average_monthly_expense_on_savings_and_investments'] = $average_monthly_expense_on_savings_and_investments;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_transfer
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnTransfer()
    {
        return $this->container['average_monthly_expense_on_transfer'];
    }

    /**
     * Sets average_monthly_expense_on_transfer
     *
     * @param float|null $average_monthly_expense_on_transfer average_monthly_expense_on_transfer
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnTransfer($average_monthly_expense_on_transfer)
    {

        if (is_null($average_monthly_expense_on_transfer)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_transfer cannot be null');
        }

        $this->container['average_monthly_expense_on_transfer'] = $average_monthly_expense_on_transfer;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_transportation
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnTransportation()
    {
        return $this->container['average_monthly_expense_on_transportation'];
    }

    /**
     * Sets average_monthly_expense_on_transportation
     *
     * @param float|null $average_monthly_expense_on_transportation average_monthly_expense_on_transportation
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnTransportation($average_monthly_expense_on_transportation)
    {

        if (is_null($average_monthly_expense_on_transportation)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_transportation cannot be null');
        }

        $this->container['average_monthly_expense_on_transportation'] = $average_monthly_expense_on_transportation;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_ussd
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnUssd()
    {
        return $this->container['average_monthly_expense_on_ussd'];
    }

    /**
     * Sets average_monthly_expense_on_ussd
     *
     * @param float|null $average_monthly_expense_on_ussd average_monthly_expense_on_ussd
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnUssd($average_monthly_expense_on_ussd)
    {

        if (is_null($average_monthly_expense_on_ussd)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_ussd cannot be null');
        }

        $this->container['average_monthly_expense_on_ussd'] = $average_monthly_expense_on_ussd;

        return $this;
    }

    /**
     * Gets average_monthly_expense_on_utilities
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseOnUtilities()
    {
        return $this->container['average_monthly_expense_on_utilities'];
    }

    /**
     * Sets average_monthly_expense_on_utilities
     *
     * @param float|null $average_monthly_expense_on_utilities average_monthly_expense_on_utilities
     *
     * @return self
     */
    public function setAverageMonthlyExpenseOnUtilities($average_monthly_expense_on_utilities)
    {

        if (is_null($average_monthly_expense_on_utilities)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expense_on_utilities cannot be null');
        }

        $this->container['average_monthly_expense_on_utilities'] = $average_monthly_expense_on_utilities;

        return $this;
    }

    /**
     * Gets average_monthly_expenseon_travel
     *
     * @return float|null
     */
    public function getAverageMonthlyExpenseonTravel()
    {
        return $this->container['average_monthly_expenseon_travel'];
    }

    /**
     * Sets average_monthly_expenseon_travel
     *
     * @param float|null $average_monthly_expenseon_travel average_monthly_expenseon_travel
     *
     * @return self
     */
    public function setAverageMonthlyExpenseonTravel($average_monthly_expenseon_travel)
    {

        if (is_null($average_monthly_expenseon_travel)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_expenseon_travel cannot be null');
        }

        $this->container['average_monthly_expenseon_travel'] = $average_monthly_expenseon_travel;

        return $this;
    }

    /**
     * Gets average_monthly_recurring_expenses
     *
     * @return float|null
     */
    public function getAverageMonthlyRecurringExpenses()
    {
        return $this->container['average_monthly_recurring_expenses'];
    }

    /**
     * Sets average_monthly_recurring_expenses
     *
     * @param float|null $average_monthly_recurring_expenses average_monthly_recurring_expenses
     *
     * @return self
     */
    public function setAverageMonthlyRecurringExpenses($average_monthly_recurring_expenses)
    {

        if (is_null($average_monthly_recurring_expenses)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_recurring_expenses cannot be null');
        }

        $this->container['average_monthly_recurring_expenses'] = $average_monthly_recurring_expenses;

        return $this;
    }

    /**
     * Gets average_monthly_total_expenses
     *
     * @return float|null
     */
    public function getAverageMonthlyTotalExpenses()
    {
        return $this->container['average_monthly_total_expenses'];
    }

    /**
     * Sets average_monthly_total_expenses
     *
     * @param float|null $average_monthly_total_expenses average_monthly_total_expenses
     *
     * @return self
     */
    public function setAverageMonthlyTotalExpenses($average_monthly_total_expenses)
    {

        if (is_null($average_monthly_total_expenses)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_total_expenses cannot be null');
        }

        $this->container['average_monthly_total_expenses'] = $average_monthly_total_expenses;

        return $this;
    }

    /**
     * Gets minimum_salary
     *
     * @return float|null
     */
    public function getMinimumSalary()
    {
        return $this->container['minimum_salary'];
    }

    /**
     * Sets minimum_salary
     *
     * @param float|null $minimum_salary minimum_salary
     *
     * @return self
     */
    public function setMinimumSalary($minimum_salary)
    {

        if (is_null($minimum_salary)) {
            throw new \InvalidArgumentException('non-nullable minimum_salary cannot be null');
        }

        $this->container['minimum_salary'] = $minimum_salary;

        return $this;
    }

    /**
     * Gets month_withmaximum_expense
     *
     * @return string|null
     */
    public function getMonthWithmaximumExpense()
    {
        return $this->container['month_withmaximum_expense'];
    }

    /**
     * Sets month_withmaximum_expense
     *
     * @param string|null $month_withmaximum_expense month_withmaximum_expense
     *
     * @return self
     */
    public function setMonthWithmaximumExpense($month_withmaximum_expense)
    {

        if (is_null($month_withmaximum_expense)) {
            throw new \InvalidArgumentException('non-nullable month_withmaximum_expense cannot be null');
        }

        $this->container['month_withmaximum_expense'] = $month_withmaximum_expense;

        return $this;
    }

    /**
     * Gets most_frequent_expense
     *
     * @return string|null
     */
    public function getMostFrequentExpense()
    {
        return $this->container['most_frequent_expense'];
    }

    /**
     * Sets most_frequent_expense
     *
     * @param string|null $most_frequent_expense most_frequent_expense
     *
     * @return self
     */
    public function setMostFrequentExpense($most_frequent_expense)
    {

        if (is_null($most_frequent_expense)) {
            throw new \InvalidArgumentException('non-nullable most_frequent_expense cannot be null');
        }

        $this->container['most_frequent_expense'] = $most_frequent_expense;

        return $this;
    }

    /**
     * Gets most_frequent_expense_category
     *
     * @return string|null
     */
    public function getMostFrequentExpenseCategory()
    {
        return $this->container['most_frequent_expense_category'];
    }

    /**
     * Sets most_frequent_expense_category
     *
     * @param string|null $most_frequent_expense_category most_frequent_expense_category
     *
     * @return self
     */
    public function setMostFrequentExpenseCategory($most_frequent_expense_category)
    {

        if (is_null($most_frequent_expense_category)) {
            throw new \InvalidArgumentException('non-nullable most_frequent_expense_category cannot be null');
        }

        $this->container['most_frequent_expense_category'] = $most_frequent_expense_category;

        return $this;
    }

    /**
     * Gets total_expense_on_airtime_and_data
     *
     * @return float|null
     */
    public function getTotalExpenseOnAirtimeAndData()
    {
        return $this->container['total_expense_on_airtime_and_data'];
    }

    /**
     * Sets total_expense_on_airtime_and_data
     *
     * @param float|null $total_expense_on_airtime_and_data total_expense_on_airtime_and_data
     *
     * @return self
     */
    public function setTotalExpenseOnAirtimeAndData($total_expense_on_airtime_and_data)
    {

        if (is_null($total_expense_on_airtime_and_data)) {
            throw new \InvalidArgumentException('non-nullable total_expense_on_airtime_and_data cannot be null');
        }

        $this->container['total_expense_on_airtime_and_data'] = $total_expense_on_airtime_and_data;

        return $this;
    }

    /**
     * Gets total_expense_on_international_transactions
     *
     * @return float|null
     */
    public function getTotalExpenseOnInternationalTransactions()
    {
        return $this->container['total_expense_on_international_transactions'];
    }

    /**
     * Sets total_expense_on_international_transactions
     *
     * @param float|null $total_expense_on_international_transactions total_expense_on_international_transactions
     *
     * @return self
     */
    public function setTotalExpenseOnInternationalTransactions($total_expense_on_international_transactions)
    {

        if (is_null($total_expense_on_international_transactions)) {
            throw new \InvalidArgumentException('non-nullable total_expense_on_international_transactions cannot be null');
        }

        $this->container['total_expense_on_international_transactions'] = $total_expense_on_international_transactions;

        return $this;
    }

    /**
     * Gets total_expense_on_savings_and_investments
     *
     * @return float|null
     */
    public function getTotalExpenseOnSavingsAndInvestments()
    {
        return $this->container['total_expense_on_savings_and_investments'];
    }

    /**
     * Sets total_expense_on_savings_and_investments
     *
     * @param float|null $total_expense_on_savings_and_investments total_expense_on_savings_and_investments
     *
     * @return self
     */
    public function setTotalExpenseOnSavingsAndInvestments($total_expense_on_savings_and_investments)
    {

        if (is_null($total_expense_on_savings_and_investments)) {
            throw new \InvalidArgumentException('non-nullable total_expense_on_savings_and_investments cannot be null');
        }

        $this->container['total_expense_on_savings_and_investments'] = $total_expense_on_savings_and_investments;

        return $this;
    }

    /**
     * Gets total_expense_on_transfer
     *
     * @return float|null
     */
    public function getTotalExpenseOnTransfer()
    {
        return $this->container['total_expense_on_transfer'];
    }

    /**
     * Sets total_expense_on_transfer
     *
     * @param float|null $total_expense_on_transfer total_expense_on_transfer
     *
     * @return self
     */
    public function setTotalExpenseOnTransfer($total_expense_on_transfer)
    {

        if (is_null($total_expense_on_transfer)) {
            throw new \InvalidArgumentException('non-nullable total_expense_on_transfer cannot be null');
        }

        $this->container['total_expense_on_transfer'] = $total_expense_on_transfer;

        return $this;
    }

    /**
     * Gets total_expense_on_transportation
     *
     * @return float|null
     */
    public function getTotalExpenseOnTransportation()
    {
        return $this->container['total_expense_on_transportation'];
    }

    /**
     * Sets total_expense_on_transportation
     *
     * @param float|null $total_expense_on_transportation total_expense_on_transportation
     *
     * @return self
     */
    public function setTotalExpenseOnTransportation($total_expense_on_transportation)
    {

        if (is_null($total_expense_on_transportation)) {
            throw new \InvalidArgumentException('non-nullable total_expense_on_transportation cannot be null');
        }

        $this->container['total_expense_on_transportation'] = $total_expense_on_transportation;

        return $this;
    }

    /**
     * Gets total_expense_on_travel
     *
     * @return float|null
     */
    public function getTotalExpenseOnTravel()
    {
        return $this->container['total_expense_on_travel'];
    }

    /**
     * Sets total_expense_on_travel
     *
     * @param float|null $total_expense_on_travel total_expense_on_travel
     *
     * @return self
     */
    public function setTotalExpenseOnTravel($total_expense_on_travel)
    {

        if (is_null($total_expense_on_travel)) {
            throw new \InvalidArgumentException('non-nullable total_expense_on_travel cannot be null');
        }

        $this->container['total_expense_on_travel'] = $total_expense_on_travel;

        return $this;
    }

    /**
     * Gets total_expense_on_ussd
     *
     * @return float|null
     */
    public function getTotalExpenseOnUssd()
    {
        return $this->container['total_expense_on_ussd'];
    }

    /**
     * Sets total_expense_on_ussd
     *
     * @param float|null $total_expense_on_ussd total_expense_on_ussd
     *
     * @return self
     */
    public function setTotalExpenseOnUssd($total_expense_on_ussd)
    {

        if (is_null($total_expense_on_ussd)) {
            throw new \InvalidArgumentException('non-nullable total_expense_on_ussd cannot be null');
        }

        $this->container['total_expense_on_ussd'] = $total_expense_on_ussd;

        return $this;
    }

    /**
     * Gets total_expense_on_utilities
     *
     * @return float|null
     */
    public function getTotalExpenseOnUtilities()
    {
        return $this->container['total_expense_on_utilities'];
    }

    /**
     * Sets total_expense_on_utilities
     *
     * @param float|null $total_expense_on_utilities total_expense_on_utilities
     *
     * @return self
     */
    public function setTotalExpenseOnUtilities($total_expense_on_utilities)
    {

        if (is_null($total_expense_on_utilities)) {
            throw new \InvalidArgumentException('non-nullable total_expense_on_utilities cannot be null');
        }

        $this->container['total_expense_on_utilities'] = $total_expense_on_utilities;

        return $this;
    }

    /**
     * Gets total_expenseon_charges_and_stamp_duty
     *
     * @return float|null
     */
    public function getTotalExpenseonChargesAndStampDuty()
    {
        return $this->container['total_expenseon_charges_and_stamp_duty'];
    }

    /**
     * Sets total_expenseon_charges_and_stamp_duty
     *
     * @param float|null $total_expenseon_charges_and_stamp_duty total_expenseon_charges_and_stamp_duty
     *
     * @return self
     */
    public function setTotalExpenseonChargesAndStampDuty($total_expenseon_charges_and_stamp_duty)
    {

        if (is_null($total_expenseon_charges_and_stamp_duty)) {
            throw new \InvalidArgumentException('non-nullable total_expenseon_charges_and_stamp_duty cannot be null');
        }

        $this->container['total_expenseon_charges_and_stamp_duty'] = $total_expenseon_charges_and_stamp_duty;

        return $this;
    }

    /**
     * Gets total_expenseon_entertainment
     *
     * @return float|null
     */
    public function getTotalExpenseonEntertainment()
    {
        return $this->container['total_expenseon_entertainment'];
    }

    /**
     * Sets total_expenseon_entertainment
     *
     * @param float|null $total_expenseon_entertainment total_expenseon_entertainment
     *
     * @return self
     */
    public function setTotalExpenseonEntertainment($total_expenseon_entertainment)
    {

        if (is_null($total_expenseon_entertainment)) {
            throw new \InvalidArgumentException('non-nullable total_expenseon_entertainment cannot be null');
        }

        $this->container['total_expenseon_entertainment'] = $total_expenseon_entertainment;

        return $this;
    }

    /**
     * Gets total_expenseon_gambling
     *
     * @return float|null
     */
    public function getTotalExpenseonGambling()
    {
        return $this->container['total_expenseon_gambling'];
    }

    /**
     * Sets total_expenseon_gambling
     *
     * @param float|null $total_expenseon_gambling total_expenseon_gambling
     *
     * @return self
     */
    public function setTotalExpenseonGambling($total_expenseon_gambling)
    {

        if (is_null($total_expenseon_gambling)) {
            throw new \InvalidArgumentException('non-nullable total_expenseon_gambling cannot be null');
        }

        $this->container['total_expenseon_gambling'] = $total_expenseon_gambling;

        return $this;
    }

    /**
     * Gets total_expenseon_health
     *
     * @return float|null
     */
    public function getTotalExpenseonHealth()
    {
        return $this->container['total_expenseon_health'];
    }

    /**
     * Sets total_expenseon_health
     *
     * @param float|null $total_expenseon_health total_expenseon_health
     *
     * @return self
     */
    public function setTotalExpenseonHealth($total_expenseon_health)
    {

        if (is_null($total_expenseon_health)) {
            throw new \InvalidArgumentException('non-nullable total_expenseon_health cannot be null');
        }

        $this->container['total_expenseon_health'] = $total_expenseon_health;

        return $this;
    }

    /**
     * Gets total_expenseon_hospitalityand_food
     *
     * @return float|null
     */
    public function getTotalExpenseonHospitalityandFood()
    {
        return $this->container['total_expenseon_hospitalityand_food'];
    }

    /**
     * Sets total_expenseon_hospitalityand_food
     *
     * @param float|null $total_expenseon_hospitalityand_food total_expenseon_hospitalityand_food
     *
     * @return self
     */
    public function setTotalExpenseonHospitalityandFood($total_expenseon_hospitalityand_food)
    {

        if (is_null($total_expenseon_hospitalityand_food)) {
            throw new \InvalidArgumentException('non-nullable total_expenseon_hospitalityand_food cannot be null');
        }

        $this->container['total_expenseon_hospitalityand_food'] = $total_expenseon_hospitalityand_food;

        return $this;
    }

    /**
     * Gets total_expenseon_insurance
     *
     * @return float|null
     */
    public function getTotalExpenseonInsurance()
    {
        return $this->container['total_expenseon_insurance'];
    }

    /**
     * Sets total_expenseon_insurance
     *
     * @param float|null $total_expenseon_insurance total_expenseon_insurance
     *
     * @return self
     */
    public function setTotalExpenseonInsurance($total_expenseon_insurance)
    {

        if (is_null($total_expenseon_insurance)) {
            throw new \InvalidArgumentException('non-nullable total_expenseon_insurance cannot be null');
        }

        $this->container['total_expenseon_insurance'] = $total_expenseon_insurance;

        return $this;
    }

    /**
     * Gets total_expenseon_onlineand_web
     *
     * @return float|null
     */
    public function getTotalExpenseonOnlineandWeb()
    {
        return $this->container['total_expenseon_onlineand_web'];
    }

    /**
     * Sets total_expenseon_onlineand_web
     *
     * @param float|null $total_expenseon_onlineand_web total_expenseon_onlineand_web
     *
     * @return self
     */
    public function setTotalExpenseonOnlineandWeb($total_expenseon_onlineand_web)
    {

        if (is_null($total_expenseon_onlineand_web)) {
            throw new \InvalidArgumentException('non-nullable total_expenseon_onlineand_web cannot be null');
        }

        $this->container['total_expenseon_onlineand_web'] = $total_expenseon_onlineand_web;

        return $this;
    }

    /**
     * Gets total_monthly_expenses
     *
     * @return float|null
     */
    public function getTotalMonthlyExpenses()
    {
        return $this->container['total_monthly_expenses'];
    }

    /**
     * Sets total_monthly_expenses
     *
     * @param float|null $total_monthly_expenses total_monthly_expenses
     *
     * @return self
     */
    public function setTotalMonthlyExpenses($total_monthly_expenses)
    {

        if (is_null($total_monthly_expenses)) {
            throw new \InvalidArgumentException('non-nullable total_monthly_expenses cannot be null');
        }

        $this->container['total_monthly_expenses'] = $total_monthly_expenses;

        return $this;
    }

    /**
     * Gets total_recurring_expenses
     *
     * @return float|null
     */
    public function getTotalRecurringExpenses()
    {
        return $this->container['total_recurring_expenses'];
    }

    /**
     * Sets total_recurring_expenses
     *
     * @param float|null $total_recurring_expenses total_recurring_expenses
     *
     * @return self
     */
    public function setTotalRecurringExpenses($total_recurring_expenses)
    {

        if (is_null($total_recurring_expenses)) {
            throw new \InvalidArgumentException('non-nullable total_recurring_expenses cannot be null');
        }

        $this->container['total_recurring_expenses'] = $total_recurring_expenses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


