<?php
/**
 * VerifySelfieNinResponseEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * VerifySelfieNinResponseEntity Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class VerifySelfieNinResponseEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VerifySelfieNinResponse_entity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'nin' => 'string',
        'firstname' => 'string',
        'middlename' => 'string',
        'surname' => 'string',
        'maidenname' => 'string',
        'telephoneno' => 'string',
        'state' => 'string',
        'place' => 'string',
        'profession' => 'string',
        'height' => 'string',
        'email' => 'string',
        'birthdate' => 'string',
        'birthstate' => 'string',
        'birthcountry' => 'string',
        'central_id' => 'string',
        'documentno' => 'string',
        'educationallevel' => 'string',
        'employmentstatus' => 'string',
        'nok_firstname' => 'string',
        'nok_lastname' => 'string',
        'nok_middlename' => 'string',
        'nok_address1' => 'string',
        'nok_address2' => 'string',
        'nok_lga' => 'string',
        'nok_state' => 'string',
        'nok_town' => 'string',
        'nok_postalcode' => 'string',
        'othername' => 'string',
        'pfirstname' => 'string',
        'photo' => 'string',
        'pmiddlename' => 'string',
        'psurname' => 'string',
        'nspokenlang' => 'string',
        'ospokenlang' => 'string',
        'religion' => 'string',
        'residence_town' => 'string',
        'residence_lga' => 'string',
        'residence_state' => 'string',
        'residencestatus' => 'string',
        'residence_address_line1' => 'string',
        'residence_address_line2' => 'string',
        'self_origin_lga' => 'string',
        'self_origin_place' => 'string',
        'self_origin_state' => 'string',
        'signature' => 'string',
        'nationality' => 'string',
        'gender' => 'string',
        'tracking_id' => 'string',
        'selfie_verification' => '\Dojah\Model\VerifySelfieNinResponseEntitySelfieVerification'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'nin' => null,
        'firstname' => null,
        'middlename' => null,
        'surname' => null,
        'maidenname' => null,
        'telephoneno' => null,
        'state' => null,
        'place' => null,
        'profession' => null,
        'height' => null,
        'email' => null,
        'birthdate' => null,
        'birthstate' => null,
        'birthcountry' => null,
        'central_id' => null,
        'documentno' => null,
        'educationallevel' => null,
        'employmentstatus' => null,
        'nok_firstname' => null,
        'nok_lastname' => null,
        'nok_middlename' => null,
        'nok_address1' => null,
        'nok_address2' => null,
        'nok_lga' => null,
        'nok_state' => null,
        'nok_town' => null,
        'nok_postalcode' => null,
        'othername' => null,
        'pfirstname' => null,
        'photo' => null,
        'pmiddlename' => null,
        'psurname' => null,
        'nspokenlang' => null,
        'ospokenlang' => null,
        'religion' => null,
        'residence_town' => null,
        'residence_lga' => null,
        'residence_state' => null,
        'residencestatus' => null,
        'residence_address_line1' => null,
        'residence_address_line2' => null,
        'self_origin_lga' => null,
        'self_origin_place' => null,
        'self_origin_state' => null,
        'signature' => null,
        'nationality' => null,
        'gender' => null,
        'tracking_id' => null,
        'selfie_verification' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'title' => false,
		'nin' => false,
		'firstname' => false,
		'middlename' => false,
		'surname' => false,
		'maidenname' => false,
		'telephoneno' => false,
		'state' => false,
		'place' => false,
		'profession' => false,
		'height' => false,
		'email' => false,
		'birthdate' => false,
		'birthstate' => false,
		'birthcountry' => false,
		'central_id' => false,
		'documentno' => false,
		'educationallevel' => false,
		'employmentstatus' => false,
		'nok_firstname' => false,
		'nok_lastname' => false,
		'nok_middlename' => false,
		'nok_address1' => false,
		'nok_address2' => false,
		'nok_lga' => false,
		'nok_state' => false,
		'nok_town' => false,
		'nok_postalcode' => false,
		'othername' => false,
		'pfirstname' => false,
		'photo' => false,
		'pmiddlename' => false,
		'psurname' => false,
		'nspokenlang' => false,
		'ospokenlang' => false,
		'religion' => false,
		'residence_town' => false,
		'residence_lga' => false,
		'residence_state' => false,
		'residencestatus' => false,
		'residence_address_line1' => false,
		'residence_address_line2' => false,
		'self_origin_lga' => false,
		'self_origin_place' => false,
		'self_origin_state' => false,
		'signature' => false,
		'nationality' => false,
		'gender' => false,
		'tracking_id' => false,
		'selfie_verification' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'nin' => 'nin',
        'firstname' => 'firstname',
        'middlename' => 'middlename',
        'surname' => 'surname',
        'maidenname' => 'maidenname',
        'telephoneno' => 'telephoneno',
        'state' => 'state',
        'place' => 'place',
        'profession' => 'profession',
        'height' => 'height',
        'email' => 'email',
        'birthdate' => 'birthdate',
        'birthstate' => 'birthstate',
        'birthcountry' => 'birthcountry',
        'central_id' => 'centralID',
        'documentno' => 'documentno',
        'educationallevel' => 'educationallevel',
        'employmentstatus' => 'employmentstatus',
        'nok_firstname' => 'nok_firstname',
        'nok_lastname' => 'nok_lastname',
        'nok_middlename' => 'nok_middlename',
        'nok_address1' => 'nok_address1',
        'nok_address2' => 'nok_address2',
        'nok_lga' => 'nok_lga',
        'nok_state' => 'nok_state',
        'nok_town' => 'nok_town',
        'nok_postalcode' => 'nok_postalcode',
        'othername' => 'othername',
        'pfirstname' => 'pfirstname',
        'photo' => 'photo',
        'pmiddlename' => 'pmiddlename',
        'psurname' => 'psurname',
        'nspokenlang' => 'nspokenlang',
        'ospokenlang' => 'ospokenlang',
        'religion' => 'religion',
        'residence_town' => 'residence_Town',
        'residence_lga' => 'residence_lga',
        'residence_state' => 'residence_state',
        'residencestatus' => 'residencestatus',
        'residence_address_line1' => 'residence_AddressLine1',
        'residence_address_line2' => 'residence_AddressLine2',
        'self_origin_lga' => 'self_origin_lga',
        'self_origin_place' => 'self_origin_place',
        'self_origin_state' => 'self_origin_state',
        'signature' => 'signature',
        'nationality' => 'nationality',
        'gender' => 'gender',
        'tracking_id' => 'trackingId',
        'selfie_verification' => 'selfie_verification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'nin' => 'setNin',
        'firstname' => 'setFirstname',
        'middlename' => 'setMiddlename',
        'surname' => 'setSurname',
        'maidenname' => 'setMaidenname',
        'telephoneno' => 'setTelephoneno',
        'state' => 'setState',
        'place' => 'setPlace',
        'profession' => 'setProfession',
        'height' => 'setHeight',
        'email' => 'setEmail',
        'birthdate' => 'setBirthdate',
        'birthstate' => 'setBirthstate',
        'birthcountry' => 'setBirthcountry',
        'central_id' => 'setCentralId',
        'documentno' => 'setDocumentno',
        'educationallevel' => 'setEducationallevel',
        'employmentstatus' => 'setEmploymentstatus',
        'nok_firstname' => 'setNokFirstname',
        'nok_lastname' => 'setNokLastname',
        'nok_middlename' => 'setNokMiddlename',
        'nok_address1' => 'setNokAddress1',
        'nok_address2' => 'setNokAddress2',
        'nok_lga' => 'setNokLga',
        'nok_state' => 'setNokState',
        'nok_town' => 'setNokTown',
        'nok_postalcode' => 'setNokPostalcode',
        'othername' => 'setOthername',
        'pfirstname' => 'setPfirstname',
        'photo' => 'setPhoto',
        'pmiddlename' => 'setPmiddlename',
        'psurname' => 'setPsurname',
        'nspokenlang' => 'setNspokenlang',
        'ospokenlang' => 'setOspokenlang',
        'religion' => 'setReligion',
        'residence_town' => 'setResidenceTown',
        'residence_lga' => 'setResidenceLga',
        'residence_state' => 'setResidenceState',
        'residencestatus' => 'setResidencestatus',
        'residence_address_line1' => 'setResidenceAddressLine1',
        'residence_address_line2' => 'setResidenceAddressLine2',
        'self_origin_lga' => 'setSelfOriginLga',
        'self_origin_place' => 'setSelfOriginPlace',
        'self_origin_state' => 'setSelfOriginState',
        'signature' => 'setSignature',
        'nationality' => 'setNationality',
        'gender' => 'setGender',
        'tracking_id' => 'setTrackingId',
        'selfie_verification' => 'setSelfieVerification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'nin' => 'getNin',
        'firstname' => 'getFirstname',
        'middlename' => 'getMiddlename',
        'surname' => 'getSurname',
        'maidenname' => 'getMaidenname',
        'telephoneno' => 'getTelephoneno',
        'state' => 'getState',
        'place' => 'getPlace',
        'profession' => 'getProfession',
        'height' => 'getHeight',
        'email' => 'getEmail',
        'birthdate' => 'getBirthdate',
        'birthstate' => 'getBirthstate',
        'birthcountry' => 'getBirthcountry',
        'central_id' => 'getCentralId',
        'documentno' => 'getDocumentno',
        'educationallevel' => 'getEducationallevel',
        'employmentstatus' => 'getEmploymentstatus',
        'nok_firstname' => 'getNokFirstname',
        'nok_lastname' => 'getNokLastname',
        'nok_middlename' => 'getNokMiddlename',
        'nok_address1' => 'getNokAddress1',
        'nok_address2' => 'getNokAddress2',
        'nok_lga' => 'getNokLga',
        'nok_state' => 'getNokState',
        'nok_town' => 'getNokTown',
        'nok_postalcode' => 'getNokPostalcode',
        'othername' => 'getOthername',
        'pfirstname' => 'getPfirstname',
        'photo' => 'getPhoto',
        'pmiddlename' => 'getPmiddlename',
        'psurname' => 'getPsurname',
        'nspokenlang' => 'getNspokenlang',
        'ospokenlang' => 'getOspokenlang',
        'religion' => 'getReligion',
        'residence_town' => 'getResidenceTown',
        'residence_lga' => 'getResidenceLga',
        'residence_state' => 'getResidenceState',
        'residencestatus' => 'getResidencestatus',
        'residence_address_line1' => 'getResidenceAddressLine1',
        'residence_address_line2' => 'getResidenceAddressLine2',
        'self_origin_lga' => 'getSelfOriginLga',
        'self_origin_place' => 'getSelfOriginPlace',
        'self_origin_state' => 'getSelfOriginState',
        'signature' => 'getSignature',
        'nationality' => 'getNationality',
        'gender' => 'getGender',
        'tracking_id' => 'getTrackingId',
        'selfie_verification' => 'getSelfieVerification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('nin', $data ?? [], null);
        $this->setIfExists('firstname', $data ?? [], null);
        $this->setIfExists('middlename', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('maidenname', $data ?? [], null);
        $this->setIfExists('telephoneno', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('place', $data ?? [], null);
        $this->setIfExists('profession', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('birthdate', $data ?? [], null);
        $this->setIfExists('birthstate', $data ?? [], null);
        $this->setIfExists('birthcountry', $data ?? [], null);
        $this->setIfExists('central_id', $data ?? [], null);
        $this->setIfExists('documentno', $data ?? [], null);
        $this->setIfExists('educationallevel', $data ?? [], null);
        $this->setIfExists('employmentstatus', $data ?? [], null);
        $this->setIfExists('nok_firstname', $data ?? [], null);
        $this->setIfExists('nok_lastname', $data ?? [], null);
        $this->setIfExists('nok_middlename', $data ?? [], null);
        $this->setIfExists('nok_address1', $data ?? [], null);
        $this->setIfExists('nok_address2', $data ?? [], null);
        $this->setIfExists('nok_lga', $data ?? [], null);
        $this->setIfExists('nok_state', $data ?? [], null);
        $this->setIfExists('nok_town', $data ?? [], null);
        $this->setIfExists('nok_postalcode', $data ?? [], null);
        $this->setIfExists('othername', $data ?? [], null);
        $this->setIfExists('pfirstname', $data ?? [], null);
        $this->setIfExists('photo', $data ?? [], null);
        $this->setIfExists('pmiddlename', $data ?? [], null);
        $this->setIfExists('psurname', $data ?? [], null);
        $this->setIfExists('nspokenlang', $data ?? [], null);
        $this->setIfExists('ospokenlang', $data ?? [], null);
        $this->setIfExists('religion', $data ?? [], null);
        $this->setIfExists('residence_town', $data ?? [], null);
        $this->setIfExists('residence_lga', $data ?? [], null);
        $this->setIfExists('residence_state', $data ?? [], null);
        $this->setIfExists('residencestatus', $data ?? [], null);
        $this->setIfExists('residence_address_line1', $data ?? [], null);
        $this->setIfExists('residence_address_line2', $data ?? [], null);
        $this->setIfExists('self_origin_lga', $data ?? [], null);
        $this->setIfExists('self_origin_place', $data ?? [], null);
        $this->setIfExists('self_origin_state', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
        $this->setIfExists('nationality', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('tracking_id', $data ?? [], null);
        $this->setIfExists('selfie_verification', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {

        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets nin
     *
     * @return string|null
     */
    public function getNin()
    {
        return $this->container['nin'];
    }

    /**
     * Sets nin
     *
     * @param string|null $nin nin
     *
     * @return self
     */
    public function setNin($nin)
    {

        if (is_null($nin)) {
            throw new \InvalidArgumentException('non-nullable nin cannot be null');
        }

        $this->container['nin'] = $nin;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname firstname
     *
     * @return self
     */
    public function setFirstname($firstname)
    {

        if (is_null($firstname)) {
            throw new \InvalidArgumentException('non-nullable firstname cannot be null');
        }

        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets middlename
     *
     * @return string|null
     */
    public function getMiddlename()
    {
        return $this->container['middlename'];
    }

    /**
     * Sets middlename
     *
     * @param string|null $middlename middlename
     *
     * @return self
     */
    public function setMiddlename($middlename)
    {

        if (is_null($middlename)) {
            throw new \InvalidArgumentException('non-nullable middlename cannot be null');
        }

        $this->container['middlename'] = $middlename;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname surname
     *
     * @return self
     */
    public function setSurname($surname)
    {

        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }

        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets maidenname
     *
     * @return string|null
     */
    public function getMaidenname()
    {
        return $this->container['maidenname'];
    }

    /**
     * Sets maidenname
     *
     * @param string|null $maidenname maidenname
     *
     * @return self
     */
    public function setMaidenname($maidenname)
    {

        if (is_null($maidenname)) {
            throw new \InvalidArgumentException('non-nullable maidenname cannot be null');
        }

        $this->container['maidenname'] = $maidenname;

        return $this;
    }

    /**
     * Gets telephoneno
     *
     * @return string|null
     */
    public function getTelephoneno()
    {
        return $this->container['telephoneno'];
    }

    /**
     * Sets telephoneno
     *
     * @param string|null $telephoneno telephoneno
     *
     * @return self
     */
    public function setTelephoneno($telephoneno)
    {

        if (is_null($telephoneno)) {
            throw new \InvalidArgumentException('non-nullable telephoneno cannot be null');
        }

        $this->container['telephoneno'] = $telephoneno;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {

        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets place
     *
     * @return string|null
     */
    public function getPlace()
    {
        return $this->container['place'];
    }

    /**
     * Sets place
     *
     * @param string|null $place place
     *
     * @return self
     */
    public function setPlace($place)
    {

        if (is_null($place)) {
            throw new \InvalidArgumentException('non-nullable place cannot be null');
        }

        $this->container['place'] = $place;

        return $this;
    }

    /**
     * Gets profession
     *
     * @return string|null
     */
    public function getProfession()
    {
        return $this->container['profession'];
    }

    /**
     * Sets profession
     *
     * @param string|null $profession profession
     *
     * @return self
     */
    public function setProfession($profession)
    {

        if (is_null($profession)) {
            throw new \InvalidArgumentException('non-nullable profession cannot be null');
        }

        $this->container['profession'] = $profession;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string|null $height height
     *
     * @return self
     */
    public function setHeight($height)
    {

        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {

        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return string|null
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param string|null $birthdate birthdate
     *
     * @return self
     */
    public function setBirthdate($birthdate)
    {

        if (is_null($birthdate)) {
            throw new \InvalidArgumentException('non-nullable birthdate cannot be null');
        }

        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets birthstate
     *
     * @return string|null
     */
    public function getBirthstate()
    {
        return $this->container['birthstate'];
    }

    /**
     * Sets birthstate
     *
     * @param string|null $birthstate birthstate
     *
     * @return self
     */
    public function setBirthstate($birthstate)
    {

        if (is_null($birthstate)) {
            throw new \InvalidArgumentException('non-nullable birthstate cannot be null');
        }

        $this->container['birthstate'] = $birthstate;

        return $this;
    }

    /**
     * Gets birthcountry
     *
     * @return string|null
     */
    public function getBirthcountry()
    {
        return $this->container['birthcountry'];
    }

    /**
     * Sets birthcountry
     *
     * @param string|null $birthcountry birthcountry
     *
     * @return self
     */
    public function setBirthcountry($birthcountry)
    {

        if (is_null($birthcountry)) {
            throw new \InvalidArgumentException('non-nullable birthcountry cannot be null');
        }

        $this->container['birthcountry'] = $birthcountry;

        return $this;
    }

    /**
     * Gets central_id
     *
     * @return string|null
     */
    public function getCentralId()
    {
        return $this->container['central_id'];
    }

    /**
     * Sets central_id
     *
     * @param string|null $central_id central_id
     *
     * @return self
     */
    public function setCentralId($central_id)
    {

        if (is_null($central_id)) {
            throw new \InvalidArgumentException('non-nullable central_id cannot be null');
        }

        $this->container['central_id'] = $central_id;

        return $this;
    }

    /**
     * Gets documentno
     *
     * @return string|null
     */
    public function getDocumentno()
    {
        return $this->container['documentno'];
    }

    /**
     * Sets documentno
     *
     * @param string|null $documentno documentno
     *
     * @return self
     */
    public function setDocumentno($documentno)
    {

        if (is_null($documentno)) {
            throw new \InvalidArgumentException('non-nullable documentno cannot be null');
        }

        $this->container['documentno'] = $documentno;

        return $this;
    }

    /**
     * Gets educationallevel
     *
     * @return string|null
     */
    public function getEducationallevel()
    {
        return $this->container['educationallevel'];
    }

    /**
     * Sets educationallevel
     *
     * @param string|null $educationallevel educationallevel
     *
     * @return self
     */
    public function setEducationallevel($educationallevel)
    {

        if (is_null($educationallevel)) {
            throw new \InvalidArgumentException('non-nullable educationallevel cannot be null');
        }

        $this->container['educationallevel'] = $educationallevel;

        return $this;
    }

    /**
     * Gets employmentstatus
     *
     * @return string|null
     */
    public function getEmploymentstatus()
    {
        return $this->container['employmentstatus'];
    }

    /**
     * Sets employmentstatus
     *
     * @param string|null $employmentstatus employmentstatus
     *
     * @return self
     */
    public function setEmploymentstatus($employmentstatus)
    {

        if (is_null($employmentstatus)) {
            throw new \InvalidArgumentException('non-nullable employmentstatus cannot be null');
        }

        $this->container['employmentstatus'] = $employmentstatus;

        return $this;
    }

    /**
     * Gets nok_firstname
     *
     * @return string|null
     */
    public function getNokFirstname()
    {
        return $this->container['nok_firstname'];
    }

    /**
     * Sets nok_firstname
     *
     * @param string|null $nok_firstname nok_firstname
     *
     * @return self
     */
    public function setNokFirstname($nok_firstname)
    {

        if (is_null($nok_firstname)) {
            throw new \InvalidArgumentException('non-nullable nok_firstname cannot be null');
        }

        $this->container['nok_firstname'] = $nok_firstname;

        return $this;
    }

    /**
     * Gets nok_lastname
     *
     * @return string|null
     */
    public function getNokLastname()
    {
        return $this->container['nok_lastname'];
    }

    /**
     * Sets nok_lastname
     *
     * @param string|null $nok_lastname nok_lastname
     *
     * @return self
     */
    public function setNokLastname($nok_lastname)
    {

        if (is_null($nok_lastname)) {
            throw new \InvalidArgumentException('non-nullable nok_lastname cannot be null');
        }

        $this->container['nok_lastname'] = $nok_lastname;

        return $this;
    }

    /**
     * Gets nok_middlename
     *
     * @return string|null
     */
    public function getNokMiddlename()
    {
        return $this->container['nok_middlename'];
    }

    /**
     * Sets nok_middlename
     *
     * @param string|null $nok_middlename nok_middlename
     *
     * @return self
     */
    public function setNokMiddlename($nok_middlename)
    {

        if (is_null($nok_middlename)) {
            throw new \InvalidArgumentException('non-nullable nok_middlename cannot be null');
        }

        $this->container['nok_middlename'] = $nok_middlename;

        return $this;
    }

    /**
     * Gets nok_address1
     *
     * @return string|null
     */
    public function getNokAddress1()
    {
        return $this->container['nok_address1'];
    }

    /**
     * Sets nok_address1
     *
     * @param string|null $nok_address1 nok_address1
     *
     * @return self
     */
    public function setNokAddress1($nok_address1)
    {

        if (is_null($nok_address1)) {
            throw new \InvalidArgumentException('non-nullable nok_address1 cannot be null');
        }

        $this->container['nok_address1'] = $nok_address1;

        return $this;
    }

    /**
     * Gets nok_address2
     *
     * @return string|null
     */
    public function getNokAddress2()
    {
        return $this->container['nok_address2'];
    }

    /**
     * Sets nok_address2
     *
     * @param string|null $nok_address2 nok_address2
     *
     * @return self
     */
    public function setNokAddress2($nok_address2)
    {

        if (is_null($nok_address2)) {
            throw new \InvalidArgumentException('non-nullable nok_address2 cannot be null');
        }

        $this->container['nok_address2'] = $nok_address2;

        return $this;
    }

    /**
     * Gets nok_lga
     *
     * @return string|null
     */
    public function getNokLga()
    {
        return $this->container['nok_lga'];
    }

    /**
     * Sets nok_lga
     *
     * @param string|null $nok_lga nok_lga
     *
     * @return self
     */
    public function setNokLga($nok_lga)
    {

        if (is_null($nok_lga)) {
            throw new \InvalidArgumentException('non-nullable nok_lga cannot be null');
        }

        $this->container['nok_lga'] = $nok_lga;

        return $this;
    }

    /**
     * Gets nok_state
     *
     * @return string|null
     */
    public function getNokState()
    {
        return $this->container['nok_state'];
    }

    /**
     * Sets nok_state
     *
     * @param string|null $nok_state nok_state
     *
     * @return self
     */
    public function setNokState($nok_state)
    {

        if (is_null($nok_state)) {
            throw new \InvalidArgumentException('non-nullable nok_state cannot be null');
        }

        $this->container['nok_state'] = $nok_state;

        return $this;
    }

    /**
     * Gets nok_town
     *
     * @return string|null
     */
    public function getNokTown()
    {
        return $this->container['nok_town'];
    }

    /**
     * Sets nok_town
     *
     * @param string|null $nok_town nok_town
     *
     * @return self
     */
    public function setNokTown($nok_town)
    {

        if (is_null($nok_town)) {
            throw new \InvalidArgumentException('non-nullable nok_town cannot be null');
        }

        $this->container['nok_town'] = $nok_town;

        return $this;
    }

    /**
     * Gets nok_postalcode
     *
     * @return string|null
     */
    public function getNokPostalcode()
    {
        return $this->container['nok_postalcode'];
    }

    /**
     * Sets nok_postalcode
     *
     * @param string|null $nok_postalcode nok_postalcode
     *
     * @return self
     */
    public function setNokPostalcode($nok_postalcode)
    {

        if (is_null($nok_postalcode)) {
            throw new \InvalidArgumentException('non-nullable nok_postalcode cannot be null');
        }

        $this->container['nok_postalcode'] = $nok_postalcode;

        return $this;
    }

    /**
     * Gets othername
     *
     * @return string|null
     */
    public function getOthername()
    {
        return $this->container['othername'];
    }

    /**
     * Sets othername
     *
     * @param string|null $othername othername
     *
     * @return self
     */
    public function setOthername($othername)
    {

        if (is_null($othername)) {
            throw new \InvalidArgumentException('non-nullable othername cannot be null');
        }

        $this->container['othername'] = $othername;

        return $this;
    }

    /**
     * Gets pfirstname
     *
     * @return string|null
     */
    public function getPfirstname()
    {
        return $this->container['pfirstname'];
    }

    /**
     * Sets pfirstname
     *
     * @param string|null $pfirstname pfirstname
     *
     * @return self
     */
    public function setPfirstname($pfirstname)
    {

        if (is_null($pfirstname)) {
            throw new \InvalidArgumentException('non-nullable pfirstname cannot be null');
        }

        $this->container['pfirstname'] = $pfirstname;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return string|null
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param string|null $photo photo
     *
     * @return self
     */
    public function setPhoto($photo)
    {

        if (is_null($photo)) {
            throw new \InvalidArgumentException('non-nullable photo cannot be null');
        }

        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets pmiddlename
     *
     * @return string|null
     */
    public function getPmiddlename()
    {
        return $this->container['pmiddlename'];
    }

    /**
     * Sets pmiddlename
     *
     * @param string|null $pmiddlename pmiddlename
     *
     * @return self
     */
    public function setPmiddlename($pmiddlename)
    {

        if (is_null($pmiddlename)) {
            throw new \InvalidArgumentException('non-nullable pmiddlename cannot be null');
        }

        $this->container['pmiddlename'] = $pmiddlename;

        return $this;
    }

    /**
     * Gets psurname
     *
     * @return string|null
     */
    public function getPsurname()
    {
        return $this->container['psurname'];
    }

    /**
     * Sets psurname
     *
     * @param string|null $psurname psurname
     *
     * @return self
     */
    public function setPsurname($psurname)
    {

        if (is_null($psurname)) {
            throw new \InvalidArgumentException('non-nullable psurname cannot be null');
        }

        $this->container['psurname'] = $psurname;

        return $this;
    }

    /**
     * Gets nspokenlang
     *
     * @return string|null
     */
    public function getNspokenlang()
    {
        return $this->container['nspokenlang'];
    }

    /**
     * Sets nspokenlang
     *
     * @param string|null $nspokenlang nspokenlang
     *
     * @return self
     */
    public function setNspokenlang($nspokenlang)
    {

        if (is_null($nspokenlang)) {
            throw new \InvalidArgumentException('non-nullable nspokenlang cannot be null');
        }

        $this->container['nspokenlang'] = $nspokenlang;

        return $this;
    }

    /**
     * Gets ospokenlang
     *
     * @return string|null
     */
    public function getOspokenlang()
    {
        return $this->container['ospokenlang'];
    }

    /**
     * Sets ospokenlang
     *
     * @param string|null $ospokenlang ospokenlang
     *
     * @return self
     */
    public function setOspokenlang($ospokenlang)
    {

        if (is_null($ospokenlang)) {
            throw new \InvalidArgumentException('non-nullable ospokenlang cannot be null');
        }

        $this->container['ospokenlang'] = $ospokenlang;

        return $this;
    }

    /**
     * Gets religion
     *
     * @return string|null
     */
    public function getReligion()
    {
        return $this->container['religion'];
    }

    /**
     * Sets religion
     *
     * @param string|null $religion religion
     *
     * @return self
     */
    public function setReligion($religion)
    {

        if (is_null($religion)) {
            throw new \InvalidArgumentException('non-nullable religion cannot be null');
        }

        $this->container['religion'] = $religion;

        return $this;
    }

    /**
     * Gets residence_town
     *
     * @return string|null
     */
    public function getResidenceTown()
    {
        return $this->container['residence_town'];
    }

    /**
     * Sets residence_town
     *
     * @param string|null $residence_town residence_town
     *
     * @return self
     */
    public function setResidenceTown($residence_town)
    {

        if (is_null($residence_town)) {
            throw new \InvalidArgumentException('non-nullable residence_town cannot be null');
        }

        $this->container['residence_town'] = $residence_town;

        return $this;
    }

    /**
     * Gets residence_lga
     *
     * @return string|null
     */
    public function getResidenceLga()
    {
        return $this->container['residence_lga'];
    }

    /**
     * Sets residence_lga
     *
     * @param string|null $residence_lga residence_lga
     *
     * @return self
     */
    public function setResidenceLga($residence_lga)
    {

        if (is_null($residence_lga)) {
            throw new \InvalidArgumentException('non-nullable residence_lga cannot be null');
        }

        $this->container['residence_lga'] = $residence_lga;

        return $this;
    }

    /**
     * Gets residence_state
     *
     * @return string|null
     */
    public function getResidenceState()
    {
        return $this->container['residence_state'];
    }

    /**
     * Sets residence_state
     *
     * @param string|null $residence_state residence_state
     *
     * @return self
     */
    public function setResidenceState($residence_state)
    {

        if (is_null($residence_state)) {
            throw new \InvalidArgumentException('non-nullable residence_state cannot be null');
        }

        $this->container['residence_state'] = $residence_state;

        return $this;
    }

    /**
     * Gets residencestatus
     *
     * @return string|null
     */
    public function getResidencestatus()
    {
        return $this->container['residencestatus'];
    }

    /**
     * Sets residencestatus
     *
     * @param string|null $residencestatus residencestatus
     *
     * @return self
     */
    public function setResidencestatus($residencestatus)
    {

        if (is_null($residencestatus)) {
            throw new \InvalidArgumentException('non-nullable residencestatus cannot be null');
        }

        $this->container['residencestatus'] = $residencestatus;

        return $this;
    }

    /**
     * Gets residence_address_line1
     *
     * @return string|null
     */
    public function getResidenceAddressLine1()
    {
        return $this->container['residence_address_line1'];
    }

    /**
     * Sets residence_address_line1
     *
     * @param string|null $residence_address_line1 residence_address_line1
     *
     * @return self
     */
    public function setResidenceAddressLine1($residence_address_line1)
    {

        if (is_null($residence_address_line1)) {
            throw new \InvalidArgumentException('non-nullable residence_address_line1 cannot be null');
        }

        $this->container['residence_address_line1'] = $residence_address_line1;

        return $this;
    }

    /**
     * Gets residence_address_line2
     *
     * @return string|null
     */
    public function getResidenceAddressLine2()
    {
        return $this->container['residence_address_line2'];
    }

    /**
     * Sets residence_address_line2
     *
     * @param string|null $residence_address_line2 residence_address_line2
     *
     * @return self
     */
    public function setResidenceAddressLine2($residence_address_line2)
    {

        if (is_null($residence_address_line2)) {
            throw new \InvalidArgumentException('non-nullable residence_address_line2 cannot be null');
        }

        $this->container['residence_address_line2'] = $residence_address_line2;

        return $this;
    }

    /**
     * Gets self_origin_lga
     *
     * @return string|null
     */
    public function getSelfOriginLga()
    {
        return $this->container['self_origin_lga'];
    }

    /**
     * Sets self_origin_lga
     *
     * @param string|null $self_origin_lga self_origin_lga
     *
     * @return self
     */
    public function setSelfOriginLga($self_origin_lga)
    {

        if (is_null($self_origin_lga)) {
            throw new \InvalidArgumentException('non-nullable self_origin_lga cannot be null');
        }

        $this->container['self_origin_lga'] = $self_origin_lga;

        return $this;
    }

    /**
     * Gets self_origin_place
     *
     * @return string|null
     */
    public function getSelfOriginPlace()
    {
        return $this->container['self_origin_place'];
    }

    /**
     * Sets self_origin_place
     *
     * @param string|null $self_origin_place self_origin_place
     *
     * @return self
     */
    public function setSelfOriginPlace($self_origin_place)
    {

        if (is_null($self_origin_place)) {
            throw new \InvalidArgumentException('non-nullable self_origin_place cannot be null');
        }

        $this->container['self_origin_place'] = $self_origin_place;

        return $this;
    }

    /**
     * Gets self_origin_state
     *
     * @return string|null
     */
    public function getSelfOriginState()
    {
        return $this->container['self_origin_state'];
    }

    /**
     * Sets self_origin_state
     *
     * @param string|null $self_origin_state self_origin_state
     *
     * @return self
     */
    public function setSelfOriginState($self_origin_state)
    {

        if (is_null($self_origin_state)) {
            throw new \InvalidArgumentException('non-nullable self_origin_state cannot be null');
        }

        $this->container['self_origin_state'] = $self_origin_state;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature signature
     *
     * @return self
     */
    public function setSignature($signature)
    {

        if (is_null($signature)) {
            throw new \InvalidArgumentException('non-nullable signature cannot be null');
        }

        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string|null $nationality nationality
     *
     * @return self
     */
    public function setNationality($nationality)
    {

        if (is_null($nationality)) {
            throw new \InvalidArgumentException('non-nullable nationality cannot be null');
        }

        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {

        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }

        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets tracking_id
     *
     * @return string|null
     */
    public function getTrackingId()
    {
        return $this->container['tracking_id'];
    }

    /**
     * Sets tracking_id
     *
     * @param string|null $tracking_id tracking_id
     *
     * @return self
     */
    public function setTrackingId($tracking_id)
    {

        if (is_null($tracking_id)) {
            throw new \InvalidArgumentException('non-nullable tracking_id cannot be null');
        }

        $this->container['tracking_id'] = $tracking_id;

        return $this;
    }

    /**
     * Gets selfie_verification
     *
     * @return \Dojah\Model\VerifySelfieNinResponseEntitySelfieVerification|null
     */
    public function getSelfieVerification()
    {
        return $this->container['selfie_verification'];
    }

    /**
     * Sets selfie_verification
     *
     * @param \Dojah\Model\VerifySelfieNinResponseEntitySelfieVerification|null $selfie_verification selfie_verification
     *
     * @return self
     */
    public function setSelfieVerification($selfie_verification)
    {

        if (is_null($selfie_verification)) {
            throw new \InvalidArgumentException('non-nullable selfie_verification cannot be null');
        }

        $this->container['selfie_verification'] = $selfie_verification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


