<?php
/**
 * ZafKycGetIdResponseEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH Publilc APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * ZafKycGetIdResponseEntity Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class ZafKycGetIdResponseEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ZafKycGetIdResponse_entity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'birth_place_country' => 'string',
        'birth_place_country_code' => 'string',
        'booked_date' => 'string',
        'card_date' => 'string',
        'date_of_birth' => 'string',
        'full_name' => 'string',
        'gender' => 'string',
        'id_blocked' => 'string',
        'id_number' => 'string',
        'issued_date' => 'string',
        'last_name' => 'string',
        'maiden_name' => 'string',
        'marital_status' => 'string',
        'on_hanis' => 'string',
        'on_npr' => 'string',
        'photo' => 'string',
        'smart_card_issued' => 'string',
        'status' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'birth_place_country' => null,
        'birth_place_country_code' => null,
        'booked_date' => null,
        'card_date' => null,
        'date_of_birth' => null,
        'full_name' => null,
        'gender' => null,
        'id_blocked' => null,
        'id_number' => null,
        'issued_date' => null,
        'last_name' => null,
        'maiden_name' => null,
        'marital_status' => null,
        'on_hanis' => null,
        'on_npr' => null,
        'photo' => null,
        'smart_card_issued' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'birth_place_country' => false,
		'birth_place_country_code' => false,
		'booked_date' => false,
		'card_date' => false,
		'date_of_birth' => false,
		'full_name' => false,
		'gender' => false,
		'id_blocked' => false,
		'id_number' => false,
		'issued_date' => false,
		'last_name' => false,
		'maiden_name' => false,
		'marital_status' => false,
		'on_hanis' => false,
		'on_npr' => false,
		'photo' => false,
		'smart_card_issued' => false,
		'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'birth_place_country' => 'birth_place_country',
        'birth_place_country_code' => 'birth_place_country_code',
        'booked_date' => 'booked_date',
        'card_date' => 'card_date',
        'date_of_birth' => 'date_of_birth',
        'full_name' => 'full_name',
        'gender' => 'gender',
        'id_blocked' => 'id_blocked',
        'id_number' => 'id_number',
        'issued_date' => 'issued_date',
        'last_name' => 'last_name',
        'maiden_name' => 'maiden_name',
        'marital_status' => 'marital_status',
        'on_hanis' => 'on_HANIS',
        'on_npr' => 'on_NPR',
        'photo' => 'photo',
        'smart_card_issued' => 'smart_card_issued',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'birth_place_country' => 'setBirthPlaceCountry',
        'birth_place_country_code' => 'setBirthPlaceCountryCode',
        'booked_date' => 'setBookedDate',
        'card_date' => 'setCardDate',
        'date_of_birth' => 'setDateOfBirth',
        'full_name' => 'setFullName',
        'gender' => 'setGender',
        'id_blocked' => 'setIdBlocked',
        'id_number' => 'setIdNumber',
        'issued_date' => 'setIssuedDate',
        'last_name' => 'setLastName',
        'maiden_name' => 'setMaidenName',
        'marital_status' => 'setMaritalStatus',
        'on_hanis' => 'setOnHanis',
        'on_npr' => 'setOnNpr',
        'photo' => 'setPhoto',
        'smart_card_issued' => 'setSmartCardIssued',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'birth_place_country' => 'getBirthPlaceCountry',
        'birth_place_country_code' => 'getBirthPlaceCountryCode',
        'booked_date' => 'getBookedDate',
        'card_date' => 'getCardDate',
        'date_of_birth' => 'getDateOfBirth',
        'full_name' => 'getFullName',
        'gender' => 'getGender',
        'id_blocked' => 'getIdBlocked',
        'id_number' => 'getIdNumber',
        'issued_date' => 'getIssuedDate',
        'last_name' => 'getLastName',
        'maiden_name' => 'getMaidenName',
        'marital_status' => 'getMaritalStatus',
        'on_hanis' => 'getOnHanis',
        'on_npr' => 'getOnNpr',
        'photo' => 'getPhoto',
        'smart_card_issued' => 'getSmartCardIssued',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('birth_place_country', $data ?? [], null);
        $this->setIfExists('birth_place_country_code', $data ?? [], null);
        $this->setIfExists('booked_date', $data ?? [], null);
        $this->setIfExists('card_date', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('id_blocked', $data ?? [], null);
        $this->setIfExists('id_number', $data ?? [], null);
        $this->setIfExists('issued_date', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('maiden_name', $data ?? [], null);
        $this->setIfExists('marital_status', $data ?? [], null);
        $this->setIfExists('on_hanis', $data ?? [], null);
        $this->setIfExists('on_npr', $data ?? [], null);
        $this->setIfExists('photo', $data ?? [], null);
        $this->setIfExists('smart_card_issued', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets birth_place_country
     *
     * @return string|null
     */
    public function getBirthPlaceCountry()
    {
        return $this->container['birth_place_country'];
    }

    /**
     * Sets birth_place_country
     *
     * @param string|null $birth_place_country birth_place_country
     *
     * @return self
     */
    public function setBirthPlaceCountry($birth_place_country)
    {

        if (is_null($birth_place_country)) {
            throw new \InvalidArgumentException('non-nullable birth_place_country cannot be null');
        }

        $this->container['birth_place_country'] = $birth_place_country;

        return $this;
    }

    /**
     * Gets birth_place_country_code
     *
     * @return string|null
     */
    public function getBirthPlaceCountryCode()
    {
        return $this->container['birth_place_country_code'];
    }

    /**
     * Sets birth_place_country_code
     *
     * @param string|null $birth_place_country_code birth_place_country_code
     *
     * @return self
     */
    public function setBirthPlaceCountryCode($birth_place_country_code)
    {

        if (is_null($birth_place_country_code)) {
            throw new \InvalidArgumentException('non-nullable birth_place_country_code cannot be null');
        }

        $this->container['birth_place_country_code'] = $birth_place_country_code;

        return $this;
    }

    /**
     * Gets booked_date
     *
     * @return string|null
     */
    public function getBookedDate()
    {
        return $this->container['booked_date'];
    }

    /**
     * Sets booked_date
     *
     * @param string|null $booked_date booked_date
     *
     * @return self
     */
    public function setBookedDate($booked_date)
    {

        if (is_null($booked_date)) {
            throw new \InvalidArgumentException('non-nullable booked_date cannot be null');
        }

        $this->container['booked_date'] = $booked_date;

        return $this;
    }

    /**
     * Gets card_date
     *
     * @return string|null
     */
    public function getCardDate()
    {
        return $this->container['card_date'];
    }

    /**
     * Sets card_date
     *
     * @param string|null $card_date card_date
     *
     * @return self
     */
    public function setCardDate($card_date)
    {

        if (is_null($card_date)) {
            throw new \InvalidArgumentException('non-nullable card_date cannot be null');
        }

        $this->container['card_date'] = $card_date;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string|null $date_of_birth date_of_birth
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {

        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }

        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name full_name
     *
     * @return self
     */
    public function setFullName($full_name)
    {

        if (is_null($full_name)) {
            throw new \InvalidArgumentException('non-nullable full_name cannot be null');
        }

        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {

        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }

        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets id_blocked
     *
     * @return string|null
     */
    public function getIdBlocked()
    {
        return $this->container['id_blocked'];
    }

    /**
     * Sets id_blocked
     *
     * @param string|null $id_blocked id_blocked
     *
     * @return self
     */
    public function setIdBlocked($id_blocked)
    {

        if (is_null($id_blocked)) {
            throw new \InvalidArgumentException('non-nullable id_blocked cannot be null');
        }

        $this->container['id_blocked'] = $id_blocked;

        return $this;
    }

    /**
     * Gets id_number
     *
     * @return string|null
     */
    public function getIdNumber()
    {
        return $this->container['id_number'];
    }

    /**
     * Sets id_number
     *
     * @param string|null $id_number id_number
     *
     * @return self
     */
    public function setIdNumber($id_number)
    {

        if (is_null($id_number)) {
            throw new \InvalidArgumentException('non-nullable id_number cannot be null');
        }

        $this->container['id_number'] = $id_number;

        return $this;
    }

    /**
     * Gets issued_date
     *
     * @return string|null
     */
    public function getIssuedDate()
    {
        return $this->container['issued_date'];
    }

    /**
     * Sets issued_date
     *
     * @param string|null $issued_date issued_date
     *
     * @return self
     */
    public function setIssuedDate($issued_date)
    {

        if (is_null($issued_date)) {
            throw new \InvalidArgumentException('non-nullable issued_date cannot be null');
        }

        $this->container['issued_date'] = $issued_date;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {

        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets maiden_name
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maiden_name'];
    }

    /**
     * Sets maiden_name
     *
     * @param string|null $maiden_name maiden_name
     *
     * @return self
     */
    public function setMaidenName($maiden_name)
    {

        if (is_null($maiden_name)) {
            throw new \InvalidArgumentException('non-nullable maiden_name cannot be null');
        }

        $this->container['maiden_name'] = $maiden_name;

        return $this;
    }

    /**
     * Gets marital_status
     *
     * @return string|null
     */
    public function getMaritalStatus()
    {
        return $this->container['marital_status'];
    }

    /**
     * Sets marital_status
     *
     * @param string|null $marital_status marital_status
     *
     * @return self
     */
    public function setMaritalStatus($marital_status)
    {

        if (is_null($marital_status)) {
            throw new \InvalidArgumentException('non-nullable marital_status cannot be null');
        }

        $this->container['marital_status'] = $marital_status;

        return $this;
    }

    /**
     * Gets on_hanis
     *
     * @return string|null
     */
    public function getOnHanis()
    {
        return $this->container['on_hanis'];
    }

    /**
     * Sets on_hanis
     *
     * @param string|null $on_hanis on_hanis
     *
     * @return self
     */
    public function setOnHanis($on_hanis)
    {

        if (is_null($on_hanis)) {
            throw new \InvalidArgumentException('non-nullable on_hanis cannot be null');
        }

        $this->container['on_hanis'] = $on_hanis;

        return $this;
    }

    /**
     * Gets on_npr
     *
     * @return string|null
     */
    public function getOnNpr()
    {
        return $this->container['on_npr'];
    }

    /**
     * Sets on_npr
     *
     * @param string|null $on_npr on_npr
     *
     * @return self
     */
    public function setOnNpr($on_npr)
    {

        if (is_null($on_npr)) {
            throw new \InvalidArgumentException('non-nullable on_npr cannot be null');
        }

        $this->container['on_npr'] = $on_npr;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return string|null
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param string|null $photo photo
     *
     * @return self
     */
    public function setPhoto($photo)
    {

        if (is_null($photo)) {
            throw new \InvalidArgumentException('non-nullable photo cannot be null');
        }

        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets smart_card_issued
     *
     * @return string|null
     */
    public function getSmartCardIssued()
    {
        return $this->container['smart_card_issued'];
    }

    /**
     * Sets smart_card_issued
     *
     * @param string|null $smart_card_issued smart_card_issued
     *
     * @return self
     */
    public function setSmartCardIssued($smart_card_issued)
    {

        if (is_null($smart_card_issued)) {
            throw new \InvalidArgumentException('non-nullable smart_card_issued cannot be null');
        }

        $this->container['smart_card_issued'] = $smart_card_issued;

        return $this;
    }

    /**
     * Gets status
     *
     * @return float|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param float|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


