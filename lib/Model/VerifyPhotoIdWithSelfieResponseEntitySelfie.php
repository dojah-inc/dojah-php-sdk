<?php
/**
 * VerifyPhotoIdWithSelfieResponseEntitySelfie
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * VerifyPhotoIdWithSelfieResponseEntitySelfie Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class VerifyPhotoIdWithSelfieResponseEntitySelfie implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VerifyPhotoIdWithSelfieResponse_entity_selfie';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'confidence_value' => 'float',
        'match' => 'bool',
        'photo_id_image_blurry' => 'bool',
        'selfie_image_blurry' => 'bool',
        'selfie_glare' => 'bool',
        'photo_id_glare' => 'bool',
        'age_range' => 'string',
        'sunglasses' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'confidence_value' => null,
        'match' => null,
        'photo_id_image_blurry' => null,
        'selfie_image_blurry' => null,
        'selfie_glare' => null,
        'photo_id_glare' => null,
        'age_range' => null,
        'sunglasses' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'confidence_value' => false,
		'match' => false,
		'photo_id_image_blurry' => false,
		'selfie_image_blurry' => false,
		'selfie_glare' => false,
		'photo_id_glare' => false,
		'age_range' => false,
		'sunglasses' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'confidence_value' => 'confidence_value',
        'match' => 'match',
        'photo_id_image_blurry' => 'photoId_image_blurry',
        'selfie_image_blurry' => 'selfie_image_blurry',
        'selfie_glare' => 'selfie_glare',
        'photo_id_glare' => 'photoId_glare',
        'age_range' => 'age_range',
        'sunglasses' => 'sunglasses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'confidence_value' => 'setConfidenceValue',
        'match' => 'setMatch',
        'photo_id_image_blurry' => 'setPhotoIdImageBlurry',
        'selfie_image_blurry' => 'setSelfieImageBlurry',
        'selfie_glare' => 'setSelfieGlare',
        'photo_id_glare' => 'setPhotoIdGlare',
        'age_range' => 'setAgeRange',
        'sunglasses' => 'setSunglasses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'confidence_value' => 'getConfidenceValue',
        'match' => 'getMatch',
        'photo_id_image_blurry' => 'getPhotoIdImageBlurry',
        'selfie_image_blurry' => 'getSelfieImageBlurry',
        'selfie_glare' => 'getSelfieGlare',
        'photo_id_glare' => 'getPhotoIdGlare',
        'age_range' => 'getAgeRange',
        'sunglasses' => 'getSunglasses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('confidence_value', $data ?? [], null);
        $this->setIfExists('match', $data ?? [], null);
        $this->setIfExists('photo_id_image_blurry', $data ?? [], null);
        $this->setIfExists('selfie_image_blurry', $data ?? [], null);
        $this->setIfExists('selfie_glare', $data ?? [], null);
        $this->setIfExists('photo_id_glare', $data ?? [], null);
        $this->setIfExists('age_range', $data ?? [], null);
        $this->setIfExists('sunglasses', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets confidence_value
     *
     * @return float|null
     */
    public function getConfidenceValue()
    {
        return $this->container['confidence_value'];
    }

    /**
     * Sets confidence_value
     *
     * @param float|null $confidence_value confidence_value
     *
     * @return self
     */
    public function setConfidenceValue($confidence_value)
    {

        if (is_null($confidence_value)) {
            throw new \InvalidArgumentException('non-nullable confidence_value cannot be null');
        }

        $this->container['confidence_value'] = $confidence_value;

        return $this;
    }

    /**
     * Gets match
     *
     * @return bool|null
     */
    public function getMatch()
    {
        return $this->container['match'];
    }

    /**
     * Sets match
     *
     * @param bool|null $match match
     *
     * @return self
     */
    public function setMatch($match)
    {

        if (is_null($match)) {
            throw new \InvalidArgumentException('non-nullable match cannot be null');
        }

        $this->container['match'] = $match;

        return $this;
    }

    /**
     * Gets photo_id_image_blurry
     *
     * @return bool|null
     */
    public function getPhotoIdImageBlurry()
    {
        return $this->container['photo_id_image_blurry'];
    }

    /**
     * Sets photo_id_image_blurry
     *
     * @param bool|null $photo_id_image_blurry photo_id_image_blurry
     *
     * @return self
     */
    public function setPhotoIdImageBlurry($photo_id_image_blurry)
    {

        if (is_null($photo_id_image_blurry)) {
            throw new \InvalidArgumentException('non-nullable photo_id_image_blurry cannot be null');
        }

        $this->container['photo_id_image_blurry'] = $photo_id_image_blurry;

        return $this;
    }

    /**
     * Gets selfie_image_blurry
     *
     * @return bool|null
     */
    public function getSelfieImageBlurry()
    {
        return $this->container['selfie_image_blurry'];
    }

    /**
     * Sets selfie_image_blurry
     *
     * @param bool|null $selfie_image_blurry selfie_image_blurry
     *
     * @return self
     */
    public function setSelfieImageBlurry($selfie_image_blurry)
    {

        if (is_null($selfie_image_blurry)) {
            throw new \InvalidArgumentException('non-nullable selfie_image_blurry cannot be null');
        }

        $this->container['selfie_image_blurry'] = $selfie_image_blurry;

        return $this;
    }

    /**
     * Gets selfie_glare
     *
     * @return bool|null
     */
    public function getSelfieGlare()
    {
        return $this->container['selfie_glare'];
    }

    /**
     * Sets selfie_glare
     *
     * @param bool|null $selfie_glare selfie_glare
     *
     * @return self
     */
    public function setSelfieGlare($selfie_glare)
    {

        if (is_null($selfie_glare)) {
            throw new \InvalidArgumentException('non-nullable selfie_glare cannot be null');
        }

        $this->container['selfie_glare'] = $selfie_glare;

        return $this;
    }

    /**
     * Gets photo_id_glare
     *
     * @return bool|null
     */
    public function getPhotoIdGlare()
    {
        return $this->container['photo_id_glare'];
    }

    /**
     * Sets photo_id_glare
     *
     * @param bool|null $photo_id_glare photo_id_glare
     *
     * @return self
     */
    public function setPhotoIdGlare($photo_id_glare)
    {

        if (is_null($photo_id_glare)) {
            throw new \InvalidArgumentException('non-nullable photo_id_glare cannot be null');
        }

        $this->container['photo_id_glare'] = $photo_id_glare;

        return $this;
    }

    /**
     * Gets age_range
     *
     * @return string|null
     */
    public function getAgeRange()
    {
        return $this->container['age_range'];
    }

    /**
     * Sets age_range
     *
     * @param string|null $age_range age_range
     *
     * @return self
     */
    public function setAgeRange($age_range)
    {

        if (is_null($age_range)) {
            throw new \InvalidArgumentException('non-nullable age_range cannot be null');
        }

        $this->container['age_range'] = $age_range;

        return $this;
    }

    /**
     * Gets sunglasses
     *
     * @return bool|null
     */
    public function getSunglasses()
    {
        return $this->container['sunglasses'];
    }

    /**
     * Sets sunglasses
     *
     * @param bool|null $sunglasses sunglasses
     *
     * @return self
     */
    public function setSunglasses($sunglasses)
    {

        if (is_null($sunglasses)) {
            throw new \InvalidArgumentException('non-nullable sunglasses cannot be null');
        }

        $this->container['sunglasses'] = $sunglasses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


