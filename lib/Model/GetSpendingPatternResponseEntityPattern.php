<?php
/**
 * GetSpendingPatternResponseEntityPattern
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * GetSpendingPatternResponseEntityPattern Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class GetSpendingPatternResponseEntityPattern implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetSpendingPatternResponse_entity_pattern';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'others' => '\Dojah\Model\GetSpendingPatternResponseEntityPatternOthers',
        'food' => '\Dojah\Model\GetSpendingPatternResponseEntityPatternFood',
        'airtime_data' => '\Dojah\Model\GetSpendingPatternResponseEntityPatternAirtimeData',
        'bank_transfer' => '\Dojah\Model\GetSpendingPatternResponseEntityPatternBankTransfer',
        'charges' => '\Dojah\Model\GetSpendingPatternResponseEntityPatternCharges'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'others' => null,
        'food' => null,
        'airtime_data' => null,
        'bank_transfer' => null,
        'charges' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'others' => false,
		'food' => false,
		'airtime_data' => false,
		'bank_transfer' => false,
		'charges' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'others' => 'Others',
        'food' => 'Food',
        'airtime_data' => 'Airtime/Data',
        'bank_transfer' => 'Bank Transfer',
        'charges' => 'Charges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'others' => 'setOthers',
        'food' => 'setFood',
        'airtime_data' => 'setAirtimeData',
        'bank_transfer' => 'setBankTransfer',
        'charges' => 'setCharges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'others' => 'getOthers',
        'food' => 'getFood',
        'airtime_data' => 'getAirtimeData',
        'bank_transfer' => 'getBankTransfer',
        'charges' => 'getCharges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('others', $data ?? [], null);
        $this->setIfExists('food', $data ?? [], null);
        $this->setIfExists('airtime_data', $data ?? [], null);
        $this->setIfExists('bank_transfer', $data ?? [], null);
        $this->setIfExists('charges', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets others
     *
     * @return \Dojah\Model\GetSpendingPatternResponseEntityPatternOthers|null
     */
    public function getOthers()
    {
        return $this->container['others'];
    }

    /**
     * Sets others
     *
     * @param \Dojah\Model\GetSpendingPatternResponseEntityPatternOthers|null $others others
     *
     * @return self
     */
    public function setOthers($others)
    {

        if (is_null($others)) {
            throw new \InvalidArgumentException('non-nullable others cannot be null');
        }

        $this->container['others'] = $others;

        return $this;
    }

    /**
     * Gets food
     *
     * @return \Dojah\Model\GetSpendingPatternResponseEntityPatternFood|null
     */
    public function getFood()
    {
        return $this->container['food'];
    }

    /**
     * Sets food
     *
     * @param \Dojah\Model\GetSpendingPatternResponseEntityPatternFood|null $food food
     *
     * @return self
     */
    public function setFood($food)
    {

        if (is_null($food)) {
            throw new \InvalidArgumentException('non-nullable food cannot be null');
        }

        $this->container['food'] = $food;

        return $this;
    }

    /**
     * Gets airtime_data
     *
     * @return \Dojah\Model\GetSpendingPatternResponseEntityPatternAirtimeData|null
     */
    public function getAirtimeData()
    {
        return $this->container['airtime_data'];
    }

    /**
     * Sets airtime_data
     *
     * @param \Dojah\Model\GetSpendingPatternResponseEntityPatternAirtimeData|null $airtime_data airtime_data
     *
     * @return self
     */
    public function setAirtimeData($airtime_data)
    {

        if (is_null($airtime_data)) {
            throw new \InvalidArgumentException('non-nullable airtime_data cannot be null');
        }

        $this->container['airtime_data'] = $airtime_data;

        return $this;
    }

    /**
     * Gets bank_transfer
     *
     * @return \Dojah\Model\GetSpendingPatternResponseEntityPatternBankTransfer|null
     */
    public function getBankTransfer()
    {
        return $this->container['bank_transfer'];
    }

    /**
     * Sets bank_transfer
     *
     * @param \Dojah\Model\GetSpendingPatternResponseEntityPatternBankTransfer|null $bank_transfer bank_transfer
     *
     * @return self
     */
    public function setBankTransfer($bank_transfer)
    {

        if (is_null($bank_transfer)) {
            throw new \InvalidArgumentException('non-nullable bank_transfer cannot be null');
        }

        $this->container['bank_transfer'] = $bank_transfer;

        return $this;
    }

    /**
     * Gets charges
     *
     * @return \Dojah\Model\GetSpendingPatternResponseEntityPatternCharges|null
     */
    public function getCharges()
    {
        return $this->container['charges'];
    }

    /**
     * Sets charges
     *
     * @param \Dojah\Model\GetSpendingPatternResponseEntityPatternCharges|null $charges charges
     *
     * @return self
     */
    public function setCharges($charges)
    {

        if (is_null($charges)) {
            throw new \InvalidArgumentException('non-nullable charges cannot be null');
        }

        $this->container['charges'] = $charges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


