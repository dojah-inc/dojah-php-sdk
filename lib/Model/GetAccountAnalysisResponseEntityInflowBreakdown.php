<?php
/**
 * GetAccountAnalysisResponseEntityInflowBreakdown
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * GetAccountAnalysisResponseEntityInflowBreakdown Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class GetAccountAnalysisResponseEntityInflowBreakdown implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetAccountAnalysisResponse_entity_inflowBreakdown';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additional_income' => 'string',
        'recurring_salary_payments' => 'string',
        'a_salary_earner' => 'string',
        'average_additional_income' => 'float',
        'average_guaranteed_salary' => 'float',
        'estimated_salary_payment_day' => 'string',
        'last_date_of_salary_payment' => 'string',
        'minimum_salary' => 'float',
        'net_average_monthly_salary' => 'float',
        'number_of_additional_income_payments' => 'float',
        'totalnumber_of_salary_payments' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additional_income' => null,
        'recurring_salary_payments' => null,
        'a_salary_earner' => null,
        'average_additional_income' => null,
        'average_guaranteed_salary' => null,
        'estimated_salary_payment_day' => null,
        'last_date_of_salary_payment' => null,
        'minimum_salary' => null,
        'net_average_monthly_salary' => null,
        'number_of_additional_income_payments' => null,
        'totalnumber_of_salary_payments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'additional_income' => false,
		'recurring_salary_payments' => true,
		'a_salary_earner' => false,
		'average_additional_income' => false,
		'average_guaranteed_salary' => false,
		'estimated_salary_payment_day' => true,
		'last_date_of_salary_payment' => true,
		'minimum_salary' => false,
		'net_average_monthly_salary' => false,
		'number_of_additional_income_payments' => false,
		'totalnumber_of_salary_payments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_income' => 'AdditionalIncome',
        'recurring_salary_payments' => 'RecurringSalaryPayments',
        'a_salary_earner' => 'aSalaryEarner',
        'average_additional_income' => 'averageAdditionalIncome',
        'average_guaranteed_salary' => 'averageGuaranteedSalary',
        'estimated_salary_payment_day' => 'estimatedSalaryPaymentDay',
        'last_date_of_salary_payment' => 'lastDateOfSalaryPayment',
        'minimum_salary' => 'minimumSalary',
        'net_average_monthly_salary' => 'netAverageMonthlySalary',
        'number_of_additional_income_payments' => 'numberOfAdditionalIncomePayments',
        'totalnumber_of_salary_payments' => 'totalnumberOfSalaryPayments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_income' => 'setAdditionalIncome',
        'recurring_salary_payments' => 'setRecurringSalaryPayments',
        'a_salary_earner' => 'setASalaryEarner',
        'average_additional_income' => 'setAverageAdditionalIncome',
        'average_guaranteed_salary' => 'setAverageGuaranteedSalary',
        'estimated_salary_payment_day' => 'setEstimatedSalaryPaymentDay',
        'last_date_of_salary_payment' => 'setLastDateOfSalaryPayment',
        'minimum_salary' => 'setMinimumSalary',
        'net_average_monthly_salary' => 'setNetAverageMonthlySalary',
        'number_of_additional_income_payments' => 'setNumberOfAdditionalIncomePayments',
        'totalnumber_of_salary_payments' => 'setTotalnumberOfSalaryPayments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_income' => 'getAdditionalIncome',
        'recurring_salary_payments' => 'getRecurringSalaryPayments',
        'a_salary_earner' => 'getASalaryEarner',
        'average_additional_income' => 'getAverageAdditionalIncome',
        'average_guaranteed_salary' => 'getAverageGuaranteedSalary',
        'estimated_salary_payment_day' => 'getEstimatedSalaryPaymentDay',
        'last_date_of_salary_payment' => 'getLastDateOfSalaryPayment',
        'minimum_salary' => 'getMinimumSalary',
        'net_average_monthly_salary' => 'getNetAverageMonthlySalary',
        'number_of_additional_income_payments' => 'getNumberOfAdditionalIncomePayments',
        'totalnumber_of_salary_payments' => 'getTotalnumberOfSalaryPayments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('additional_income', $data ?? [], null);
        $this->setIfExists('recurring_salary_payments', $data ?? [], null);
        $this->setIfExists('a_salary_earner', $data ?? [], null);
        $this->setIfExists('average_additional_income', $data ?? [], null);
        $this->setIfExists('average_guaranteed_salary', $data ?? [], null);
        $this->setIfExists('estimated_salary_payment_day', $data ?? [], null);
        $this->setIfExists('last_date_of_salary_payment', $data ?? [], null);
        $this->setIfExists('minimum_salary', $data ?? [], null);
        $this->setIfExists('net_average_monthly_salary', $data ?? [], null);
        $this->setIfExists('number_of_additional_income_payments', $data ?? [], null);
        $this->setIfExists('totalnumber_of_salary_payments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_income
     *
     * @return string|null
     */
    public function getAdditionalIncome()
    {
        return $this->container['additional_income'];
    }

    /**
     * Sets additional_income
     *
     * @param string|null $additional_income additional_income
     *
     * @return self
     */
    public function setAdditionalIncome($additional_income)
    {

        if (is_null($additional_income)) {
            throw new \InvalidArgumentException('non-nullable additional_income cannot be null');
        }

        $this->container['additional_income'] = $additional_income;

        return $this;
    }

    /**
     * Gets recurring_salary_payments
     *
     * @return string|null
     */
    public function getRecurringSalaryPayments()
    {
        return $this->container['recurring_salary_payments'];
    }

    /**
     * Sets recurring_salary_payments
     *
     * @param string|null $recurring_salary_payments recurring_salary_payments
     *
     * @return self
     */
    public function setRecurringSalaryPayments($recurring_salary_payments)
    {

        if (is_null($recurring_salary_payments)) {
            array_push($this->openAPINullablesSetToNull, 'recurring_salary_payments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recurring_salary_payments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['recurring_salary_payments'] = $recurring_salary_payments;

        return $this;
    }

    /**
     * Gets a_salary_earner
     *
     * @return string|null
     */
    public function getASalaryEarner()
    {
        return $this->container['a_salary_earner'];
    }

    /**
     * Sets a_salary_earner
     *
     * @param string|null $a_salary_earner a_salary_earner
     *
     * @return self
     */
    public function setASalaryEarner($a_salary_earner)
    {

        if (is_null($a_salary_earner)) {
            throw new \InvalidArgumentException('non-nullable a_salary_earner cannot be null');
        }

        $this->container['a_salary_earner'] = $a_salary_earner;

        return $this;
    }

    /**
     * Gets average_additional_income
     *
     * @return float|null
     */
    public function getAverageAdditionalIncome()
    {
        return $this->container['average_additional_income'];
    }

    /**
     * Sets average_additional_income
     *
     * @param float|null $average_additional_income average_additional_income
     *
     * @return self
     */
    public function setAverageAdditionalIncome($average_additional_income)
    {

        if (is_null($average_additional_income)) {
            throw new \InvalidArgumentException('non-nullable average_additional_income cannot be null');
        }

        $this->container['average_additional_income'] = $average_additional_income;

        return $this;
    }

    /**
     * Gets average_guaranteed_salary
     *
     * @return float|null
     */
    public function getAverageGuaranteedSalary()
    {
        return $this->container['average_guaranteed_salary'];
    }

    /**
     * Sets average_guaranteed_salary
     *
     * @param float|null $average_guaranteed_salary average_guaranteed_salary
     *
     * @return self
     */
    public function setAverageGuaranteedSalary($average_guaranteed_salary)
    {

        if (is_null($average_guaranteed_salary)) {
            throw new \InvalidArgumentException('non-nullable average_guaranteed_salary cannot be null');
        }

        $this->container['average_guaranteed_salary'] = $average_guaranteed_salary;

        return $this;
    }

    /**
     * Gets estimated_salary_payment_day
     *
     * @return string|null
     */
    public function getEstimatedSalaryPaymentDay()
    {
        return $this->container['estimated_salary_payment_day'];
    }

    /**
     * Sets estimated_salary_payment_day
     *
     * @param string|null $estimated_salary_payment_day estimated_salary_payment_day
     *
     * @return self
     */
    public function setEstimatedSalaryPaymentDay($estimated_salary_payment_day)
    {

        if (is_null($estimated_salary_payment_day)) {
            array_push($this->openAPINullablesSetToNull, 'estimated_salary_payment_day');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('estimated_salary_payment_day', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['estimated_salary_payment_day'] = $estimated_salary_payment_day;

        return $this;
    }

    /**
     * Gets last_date_of_salary_payment
     *
     * @return string|null
     */
    public function getLastDateOfSalaryPayment()
    {
        return $this->container['last_date_of_salary_payment'];
    }

    /**
     * Sets last_date_of_salary_payment
     *
     * @param string|null $last_date_of_salary_payment last_date_of_salary_payment
     *
     * @return self
     */
    public function setLastDateOfSalaryPayment($last_date_of_salary_payment)
    {

        if (is_null($last_date_of_salary_payment)) {
            array_push($this->openAPINullablesSetToNull, 'last_date_of_salary_payment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_date_of_salary_payment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['last_date_of_salary_payment'] = $last_date_of_salary_payment;

        return $this;
    }

    /**
     * Gets minimum_salary
     *
     * @return float|null
     */
    public function getMinimumSalary()
    {
        return $this->container['minimum_salary'];
    }

    /**
     * Sets minimum_salary
     *
     * @param float|null $minimum_salary minimum_salary
     *
     * @return self
     */
    public function setMinimumSalary($minimum_salary)
    {

        if (is_null($minimum_salary)) {
            throw new \InvalidArgumentException('non-nullable minimum_salary cannot be null');
        }

        $this->container['minimum_salary'] = $minimum_salary;

        return $this;
    }

    /**
     * Gets net_average_monthly_salary
     *
     * @return float|null
     */
    public function getNetAverageMonthlySalary()
    {
        return $this->container['net_average_monthly_salary'];
    }

    /**
     * Sets net_average_monthly_salary
     *
     * @param float|null $net_average_monthly_salary net_average_monthly_salary
     *
     * @return self
     */
    public function setNetAverageMonthlySalary($net_average_monthly_salary)
    {

        if (is_null($net_average_monthly_salary)) {
            throw new \InvalidArgumentException('non-nullable net_average_monthly_salary cannot be null');
        }

        $this->container['net_average_monthly_salary'] = $net_average_monthly_salary;

        return $this;
    }

    /**
     * Gets number_of_additional_income_payments
     *
     * @return float|null
     */
    public function getNumberOfAdditionalIncomePayments()
    {
        return $this->container['number_of_additional_income_payments'];
    }

    /**
     * Sets number_of_additional_income_payments
     *
     * @param float|null $number_of_additional_income_payments number_of_additional_income_payments
     *
     * @return self
     */
    public function setNumberOfAdditionalIncomePayments($number_of_additional_income_payments)
    {

        if (is_null($number_of_additional_income_payments)) {
            throw new \InvalidArgumentException('non-nullable number_of_additional_income_payments cannot be null');
        }

        $this->container['number_of_additional_income_payments'] = $number_of_additional_income_payments;

        return $this;
    }

    /**
     * Gets totalnumber_of_salary_payments
     *
     * @return float|null
     */
    public function getTotalnumberOfSalaryPayments()
    {
        return $this->container['totalnumber_of_salary_payments'];
    }

    /**
     * Sets totalnumber_of_salary_payments
     *
     * @param float|null $totalnumber_of_salary_payments totalnumber_of_salary_payments
     *
     * @return self
     */
    public function setTotalnumberOfSalaryPayments($totalnumber_of_salary_payments)
    {

        if (is_null($totalnumber_of_salary_payments)) {
            throw new \InvalidArgumentException('non-nullable totalnumber_of_salary_payments cannot be null');
        }

        $this->container['totalnumber_of_salary_payments'] = $totalnumber_of_salary_payments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


