<?php
/**
 * GetAccountAnalysisResponseEntityAccountBreakdown
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * GetAccountAnalysisResponseEntityAccountBreakdown Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class GetAccountAnalysisResponseEntityAccountBreakdown implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetAccountAnalysisResponse_entity_accountBreakdown';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_credit_entry' => 'float',
        'total_debit_made' => 'float',
        'average_monthly_balance' => 'float',
        'average_monthly_credits' => 'float',
        'average_monthly_debits' => 'float',
        'average_weekly_balance' => 'float',
        'average_weekly_credits' => 'float',
        'average_weekly_debits' => 'float',
        'closing_balance' => 'float',
        'first_date_in_statement' => 'string',
        'last_date_in_statement' => 'string',
        'number_of_transacting_months' => 'float',
        'period_in_statement' => 'string',
        'year_in_statement' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_credit_entry' => null,
        'total_debit_made' => null,
        'average_monthly_balance' => null,
        'average_monthly_credits' => null,
        'average_monthly_debits' => null,
        'average_weekly_balance' => null,
        'average_weekly_credits' => null,
        'average_weekly_debits' => null,
        'closing_balance' => null,
        'first_date_in_statement' => null,
        'last_date_in_statement' => null,
        'number_of_transacting_months' => null,
        'period_in_statement' => null,
        'year_in_statement' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total_credit_entry' => false,
		'total_debit_made' => false,
		'average_monthly_balance' => false,
		'average_monthly_credits' => false,
		'average_monthly_debits' => false,
		'average_weekly_balance' => false,
		'average_weekly_credits' => false,
		'average_weekly_debits' => false,
		'closing_balance' => false,
		'first_date_in_statement' => false,
		'last_date_in_statement' => false,
		'number_of_transacting_months' => false,
		'period_in_statement' => false,
		'year_in_statement' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_credit_entry' => 'TotalCreditEntry',
        'total_debit_made' => 'TotalDebitMade',
        'average_monthly_balance' => 'averageMonthlyBalance',
        'average_monthly_credits' => 'averageMonthlyCredits',
        'average_monthly_debits' => 'averageMonthlyDebits',
        'average_weekly_balance' => 'averageWeeklyBalance',
        'average_weekly_credits' => 'averageWeeklyCredits',
        'average_weekly_debits' => 'averageWeeklyDebits',
        'closing_balance' => 'closingBalance',
        'first_date_in_statement' => 'firstDateInStatement',
        'last_date_in_statement' => 'lastDateInStatement',
        'number_of_transacting_months' => 'numberOfTransactingMonths',
        'period_in_statement' => 'periodInStatement',
        'year_in_statement' => 'yearInStatement'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_credit_entry' => 'setTotalCreditEntry',
        'total_debit_made' => 'setTotalDebitMade',
        'average_monthly_balance' => 'setAverageMonthlyBalance',
        'average_monthly_credits' => 'setAverageMonthlyCredits',
        'average_monthly_debits' => 'setAverageMonthlyDebits',
        'average_weekly_balance' => 'setAverageWeeklyBalance',
        'average_weekly_credits' => 'setAverageWeeklyCredits',
        'average_weekly_debits' => 'setAverageWeeklyDebits',
        'closing_balance' => 'setClosingBalance',
        'first_date_in_statement' => 'setFirstDateInStatement',
        'last_date_in_statement' => 'setLastDateInStatement',
        'number_of_transacting_months' => 'setNumberOfTransactingMonths',
        'period_in_statement' => 'setPeriodInStatement',
        'year_in_statement' => 'setYearInStatement'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_credit_entry' => 'getTotalCreditEntry',
        'total_debit_made' => 'getTotalDebitMade',
        'average_monthly_balance' => 'getAverageMonthlyBalance',
        'average_monthly_credits' => 'getAverageMonthlyCredits',
        'average_monthly_debits' => 'getAverageMonthlyDebits',
        'average_weekly_balance' => 'getAverageWeeklyBalance',
        'average_weekly_credits' => 'getAverageWeeklyCredits',
        'average_weekly_debits' => 'getAverageWeeklyDebits',
        'closing_balance' => 'getClosingBalance',
        'first_date_in_statement' => 'getFirstDateInStatement',
        'last_date_in_statement' => 'getLastDateInStatement',
        'number_of_transacting_months' => 'getNumberOfTransactingMonths',
        'period_in_statement' => 'getPeriodInStatement',
        'year_in_statement' => 'getYearInStatement'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('total_credit_entry', $data ?? [], null);
        $this->setIfExists('total_debit_made', $data ?? [], null);
        $this->setIfExists('average_monthly_balance', $data ?? [], null);
        $this->setIfExists('average_monthly_credits', $data ?? [], null);
        $this->setIfExists('average_monthly_debits', $data ?? [], null);
        $this->setIfExists('average_weekly_balance', $data ?? [], null);
        $this->setIfExists('average_weekly_credits', $data ?? [], null);
        $this->setIfExists('average_weekly_debits', $data ?? [], null);
        $this->setIfExists('closing_balance', $data ?? [], null);
        $this->setIfExists('first_date_in_statement', $data ?? [], null);
        $this->setIfExists('last_date_in_statement', $data ?? [], null);
        $this->setIfExists('number_of_transacting_months', $data ?? [], null);
        $this->setIfExists('period_in_statement', $data ?? [], null);
        $this->setIfExists('year_in_statement', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_credit_entry
     *
     * @return float|null
     */
    public function getTotalCreditEntry()
    {
        return $this->container['total_credit_entry'];
    }

    /**
     * Sets total_credit_entry
     *
     * @param float|null $total_credit_entry total_credit_entry
     *
     * @return self
     */
    public function setTotalCreditEntry($total_credit_entry)
    {

        if (is_null($total_credit_entry)) {
            throw new \InvalidArgumentException('non-nullable total_credit_entry cannot be null');
        }

        $this->container['total_credit_entry'] = $total_credit_entry;

        return $this;
    }

    /**
     * Gets total_debit_made
     *
     * @return float|null
     */
    public function getTotalDebitMade()
    {
        return $this->container['total_debit_made'];
    }

    /**
     * Sets total_debit_made
     *
     * @param float|null $total_debit_made total_debit_made
     *
     * @return self
     */
    public function setTotalDebitMade($total_debit_made)
    {

        if (is_null($total_debit_made)) {
            throw new \InvalidArgumentException('non-nullable total_debit_made cannot be null');
        }

        $this->container['total_debit_made'] = $total_debit_made;

        return $this;
    }

    /**
     * Gets average_monthly_balance
     *
     * @return float|null
     */
    public function getAverageMonthlyBalance()
    {
        return $this->container['average_monthly_balance'];
    }

    /**
     * Sets average_monthly_balance
     *
     * @param float|null $average_monthly_balance average_monthly_balance
     *
     * @return self
     */
    public function setAverageMonthlyBalance($average_monthly_balance)
    {

        if (is_null($average_monthly_balance)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_balance cannot be null');
        }

        $this->container['average_monthly_balance'] = $average_monthly_balance;

        return $this;
    }

    /**
     * Gets average_monthly_credits
     *
     * @return float|null
     */
    public function getAverageMonthlyCredits()
    {
        return $this->container['average_monthly_credits'];
    }

    /**
     * Sets average_monthly_credits
     *
     * @param float|null $average_monthly_credits average_monthly_credits
     *
     * @return self
     */
    public function setAverageMonthlyCredits($average_monthly_credits)
    {

        if (is_null($average_monthly_credits)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_credits cannot be null');
        }

        $this->container['average_monthly_credits'] = $average_monthly_credits;

        return $this;
    }

    /**
     * Gets average_monthly_debits
     *
     * @return float|null
     */
    public function getAverageMonthlyDebits()
    {
        return $this->container['average_monthly_debits'];
    }

    /**
     * Sets average_monthly_debits
     *
     * @param float|null $average_monthly_debits average_monthly_debits
     *
     * @return self
     */
    public function setAverageMonthlyDebits($average_monthly_debits)
    {

        if (is_null($average_monthly_debits)) {
            throw new \InvalidArgumentException('non-nullable average_monthly_debits cannot be null');
        }

        $this->container['average_monthly_debits'] = $average_monthly_debits;

        return $this;
    }

    /**
     * Gets average_weekly_balance
     *
     * @return float|null
     */
    public function getAverageWeeklyBalance()
    {
        return $this->container['average_weekly_balance'];
    }

    /**
     * Sets average_weekly_balance
     *
     * @param float|null $average_weekly_balance average_weekly_balance
     *
     * @return self
     */
    public function setAverageWeeklyBalance($average_weekly_balance)
    {

        if (is_null($average_weekly_balance)) {
            throw new \InvalidArgumentException('non-nullable average_weekly_balance cannot be null');
        }

        $this->container['average_weekly_balance'] = $average_weekly_balance;

        return $this;
    }

    /**
     * Gets average_weekly_credits
     *
     * @return float|null
     */
    public function getAverageWeeklyCredits()
    {
        return $this->container['average_weekly_credits'];
    }

    /**
     * Sets average_weekly_credits
     *
     * @param float|null $average_weekly_credits average_weekly_credits
     *
     * @return self
     */
    public function setAverageWeeklyCredits($average_weekly_credits)
    {

        if (is_null($average_weekly_credits)) {
            throw new \InvalidArgumentException('non-nullable average_weekly_credits cannot be null');
        }

        $this->container['average_weekly_credits'] = $average_weekly_credits;

        return $this;
    }

    /**
     * Gets average_weekly_debits
     *
     * @return float|null
     */
    public function getAverageWeeklyDebits()
    {
        return $this->container['average_weekly_debits'];
    }

    /**
     * Sets average_weekly_debits
     *
     * @param float|null $average_weekly_debits average_weekly_debits
     *
     * @return self
     */
    public function setAverageWeeklyDebits($average_weekly_debits)
    {

        if (is_null($average_weekly_debits)) {
            throw new \InvalidArgumentException('non-nullable average_weekly_debits cannot be null');
        }

        $this->container['average_weekly_debits'] = $average_weekly_debits;

        return $this;
    }

    /**
     * Gets closing_balance
     *
     * @return float|null
     */
    public function getClosingBalance()
    {
        return $this->container['closing_balance'];
    }

    /**
     * Sets closing_balance
     *
     * @param float|null $closing_balance closing_balance
     *
     * @return self
     */
    public function setClosingBalance($closing_balance)
    {

        if (is_null($closing_balance)) {
            throw new \InvalidArgumentException('non-nullable closing_balance cannot be null');
        }

        $this->container['closing_balance'] = $closing_balance;

        return $this;
    }

    /**
     * Gets first_date_in_statement
     *
     * @return string|null
     */
    public function getFirstDateInStatement()
    {
        return $this->container['first_date_in_statement'];
    }

    /**
     * Sets first_date_in_statement
     *
     * @param string|null $first_date_in_statement first_date_in_statement
     *
     * @return self
     */
    public function setFirstDateInStatement($first_date_in_statement)
    {

        if (is_null($first_date_in_statement)) {
            throw new \InvalidArgumentException('non-nullable first_date_in_statement cannot be null');
        }

        $this->container['first_date_in_statement'] = $first_date_in_statement;

        return $this;
    }

    /**
     * Gets last_date_in_statement
     *
     * @return string|null
     */
    public function getLastDateInStatement()
    {
        return $this->container['last_date_in_statement'];
    }

    /**
     * Sets last_date_in_statement
     *
     * @param string|null $last_date_in_statement last_date_in_statement
     *
     * @return self
     */
    public function setLastDateInStatement($last_date_in_statement)
    {

        if (is_null($last_date_in_statement)) {
            throw new \InvalidArgumentException('non-nullable last_date_in_statement cannot be null');
        }

        $this->container['last_date_in_statement'] = $last_date_in_statement;

        return $this;
    }

    /**
     * Gets number_of_transacting_months
     *
     * @return float|null
     */
    public function getNumberOfTransactingMonths()
    {
        return $this->container['number_of_transacting_months'];
    }

    /**
     * Sets number_of_transacting_months
     *
     * @param float|null $number_of_transacting_months number_of_transacting_months
     *
     * @return self
     */
    public function setNumberOfTransactingMonths($number_of_transacting_months)
    {

        if (is_null($number_of_transacting_months)) {
            throw new \InvalidArgumentException('non-nullable number_of_transacting_months cannot be null');
        }

        $this->container['number_of_transacting_months'] = $number_of_transacting_months;

        return $this;
    }

    /**
     * Gets period_in_statement
     *
     * @return string|null
     */
    public function getPeriodInStatement()
    {
        return $this->container['period_in_statement'];
    }

    /**
     * Sets period_in_statement
     *
     * @param string|null $period_in_statement period_in_statement
     *
     * @return self
     */
    public function setPeriodInStatement($period_in_statement)
    {

        if (is_null($period_in_statement)) {
            throw new \InvalidArgumentException('non-nullable period_in_statement cannot be null');
        }

        $this->container['period_in_statement'] = $period_in_statement;

        return $this;
    }

    /**
     * Gets year_in_statement
     *
     * @return string|null
     */
    public function getYearInStatement()
    {
        return $this->container['year_in_statement'];
    }

    /**
     * Sets year_in_statement
     *
     * @param string|null $year_in_statement year_in_statement
     *
     * @return self
     */
    public function setYearInStatement($year_in_statement)
    {

        if (is_null($year_in_statement)) {
            throw new \InvalidArgumentException('non-nullable year_in_statement cannot be null');
        }

        $this->container['year_in_statement'] = $year_in_statement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


