<?php
/**
 * GetDocumentAnalysisResponseEntityData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dojah
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Dojah\Model;

use \ArrayAccess;
use \Dojah\ObjectSerializer;

/**
 * GetDocumentAnalysisResponseEntityData Class Doc Comment
 *
 * @category Class
 * @package  Dojah
 * @implements \ArrayAccess<string, mixed>
 */
class GetDocumentAnalysisResponseEntityData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetDocumentAnalysisResponse_entity_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => 'string',
        'city_in_address' => 'string',
        'class' => 'string',
        'county' => 'string',
        'date_of_birth' => 'string',
        'date_of_issue' => 'string',
        'document_number' => 'string',
        'endorsements' => 'string',
        'expiration_date' => 'string',
        'first_name' => 'string',
        'id_type' => 'string',
        'last_name' => 'string',
        'middle_name' => 'string',
        'place_of_birth' => 'string',
        'restrictions' => 'string',
        'state_in_address' => 'string',
        'state_name' => 'string',
        'suffix' => 'string',
        'veteran' => 'string',
        'zip_code_in_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'city_in_address' => null,
        'class' => null,
        'county' => null,
        'date_of_birth' => null,
        'date_of_issue' => null,
        'document_number' => null,
        'endorsements' => null,
        'expiration_date' => null,
        'first_name' => null,
        'id_type' => null,
        'last_name' => null,
        'middle_name' => null,
        'place_of_birth' => null,
        'restrictions' => null,
        'state_in_address' => null,
        'state_name' => null,
        'suffix' => null,
        'veteran' => null,
        'zip_code_in_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address' => false,
		'city_in_address' => false,
		'class' => false,
		'county' => false,
		'date_of_birth' => false,
		'date_of_issue' => false,
		'document_number' => false,
		'endorsements' => false,
		'expiration_date' => false,
		'first_name' => false,
		'id_type' => false,
		'last_name' => false,
		'middle_name' => false,
		'place_of_birth' => false,
		'restrictions' => false,
		'state_in_address' => false,
		'state_name' => false,
		'suffix' => false,
		'veteran' => false,
		'zip_code_in_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'ADDRESS',
        'city_in_address' => 'CITY_IN_ADDRESS',
        'class' => 'CLASS',
        'county' => 'COUNTY',
        'date_of_birth' => 'DATE_OF_BIRTH',
        'date_of_issue' => 'DATE_OF_ISSUE',
        'document_number' => 'DOCUMENT_NUMBER',
        'endorsements' => 'ENDORSEMENTS',
        'expiration_date' => 'EXPIRATION_DATE',
        'first_name' => 'FIRST_NAME',
        'id_type' => 'ID_TYPE',
        'last_name' => 'LAST_NAME',
        'middle_name' => 'MIDDLE_NAME',
        'place_of_birth' => 'PLACE_OF_BIRTH',
        'restrictions' => 'RESTRICTIONS',
        'state_in_address' => 'STATE_IN_ADDRESS',
        'state_name' => 'STATE_NAME',
        'suffix' => 'SUFFIX',
        'veteran' => 'VETERAN',
        'zip_code_in_address' => 'ZIP_CODE_IN_ADDRESS'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'city_in_address' => 'setCityInAddress',
        'class' => 'setClass',
        'county' => 'setCounty',
        'date_of_birth' => 'setDateOfBirth',
        'date_of_issue' => 'setDateOfIssue',
        'document_number' => 'setDocumentNumber',
        'endorsements' => 'setEndorsements',
        'expiration_date' => 'setExpirationDate',
        'first_name' => 'setFirstName',
        'id_type' => 'setIdType',
        'last_name' => 'setLastName',
        'middle_name' => 'setMiddleName',
        'place_of_birth' => 'setPlaceOfBirth',
        'restrictions' => 'setRestrictions',
        'state_in_address' => 'setStateInAddress',
        'state_name' => 'setStateName',
        'suffix' => 'setSuffix',
        'veteran' => 'setVeteran',
        'zip_code_in_address' => 'setZipCodeInAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'city_in_address' => 'getCityInAddress',
        'class' => 'getClass',
        'county' => 'getCounty',
        'date_of_birth' => 'getDateOfBirth',
        'date_of_issue' => 'getDateOfIssue',
        'document_number' => 'getDocumentNumber',
        'endorsements' => 'getEndorsements',
        'expiration_date' => 'getExpirationDate',
        'first_name' => 'getFirstName',
        'id_type' => 'getIdType',
        'last_name' => 'getLastName',
        'middle_name' => 'getMiddleName',
        'place_of_birth' => 'getPlaceOfBirth',
        'restrictions' => 'getRestrictions',
        'state_in_address' => 'getStateInAddress',
        'state_name' => 'getStateName',
        'suffix' => 'getSuffix',
        'veteran' => 'getVeteran',
        'zip_code_in_address' => 'getZipCodeInAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('city_in_address', $data ?? [], null);
        $this->setIfExists('class', $data ?? [], null);
        $this->setIfExists('county', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('date_of_issue', $data ?? [], null);
        $this->setIfExists('document_number', $data ?? [], null);
        $this->setIfExists('endorsements', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('id_type', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('place_of_birth', $data ?? [], null);
        $this->setIfExists('restrictions', $data ?? [], null);
        $this->setIfExists('state_in_address', $data ?? [], null);
        $this->setIfExists('state_name', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('veteran', $data ?? [], null);
        $this->setIfExists('zip_code_in_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {

        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets city_in_address
     *
     * @return string|null
     */
    public function getCityInAddress()
    {
        return $this->container['city_in_address'];
    }

    /**
     * Sets city_in_address
     *
     * @param string|null $city_in_address city_in_address
     *
     * @return self
     */
    public function setCityInAddress($city_in_address)
    {

        if (is_null($city_in_address)) {
            throw new \InvalidArgumentException('non-nullable city_in_address cannot be null');
        }

        $this->container['city_in_address'] = $city_in_address;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string|null $class class
     *
     * @return self
     */
    public function setClass($class)
    {

        if (is_null($class)) {
            throw new \InvalidArgumentException('non-nullable class cannot be null');
        }

        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county county
     *
     * @return self
     */
    public function setCounty($county)
    {

        if (is_null($county)) {
            throw new \InvalidArgumentException('non-nullable county cannot be null');
        }

        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string|null $date_of_birth date_of_birth
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {

        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }

        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets date_of_issue
     *
     * @return string|null
     */
    public function getDateOfIssue()
    {
        return $this->container['date_of_issue'];
    }

    /**
     * Sets date_of_issue
     *
     * @param string|null $date_of_issue date_of_issue
     *
     * @return self
     */
    public function setDateOfIssue($date_of_issue)
    {

        if (is_null($date_of_issue)) {
            throw new \InvalidArgumentException('non-nullable date_of_issue cannot be null');
        }

        $this->container['date_of_issue'] = $date_of_issue;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string|null
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string|null $document_number document_number
     *
     * @return self
     */
    public function setDocumentNumber($document_number)
    {

        if (is_null($document_number)) {
            throw new \InvalidArgumentException('non-nullable document_number cannot be null');
        }

        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets endorsements
     *
     * @return string|null
     */
    public function getEndorsements()
    {
        return $this->container['endorsements'];
    }

    /**
     * Sets endorsements
     *
     * @param string|null $endorsements endorsements
     *
     * @return self
     */
    public function setEndorsements($endorsements)
    {

        if (is_null($endorsements)) {
            throw new \InvalidArgumentException('non-nullable endorsements cannot be null');
        }

        $this->container['endorsements'] = $endorsements;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {

        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }

        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {

        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets id_type
     *
     * @return string|null
     */
    public function getIdType()
    {
        return $this->container['id_type'];
    }

    /**
     * Sets id_type
     *
     * @param string|null $id_type id_type
     *
     * @return self
     */
    public function setIdType($id_type)
    {

        if (is_null($id_type)) {
            throw new \InvalidArgumentException('non-nullable id_type cannot be null');
        }

        $this->container['id_type'] = $id_type;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {

        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name middle_name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {

        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }

        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets place_of_birth
     *
     * @return string|null
     */
    public function getPlaceOfBirth()
    {
        return $this->container['place_of_birth'];
    }

    /**
     * Sets place_of_birth
     *
     * @param string|null $place_of_birth place_of_birth
     *
     * @return self
     */
    public function setPlaceOfBirth($place_of_birth)
    {

        if (is_null($place_of_birth)) {
            throw new \InvalidArgumentException('non-nullable place_of_birth cannot be null');
        }

        $this->container['place_of_birth'] = $place_of_birth;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return string|null
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param string|null $restrictions restrictions
     *
     * @return self
     */
    public function setRestrictions($restrictions)
    {

        if (is_null($restrictions)) {
            throw new \InvalidArgumentException('non-nullable restrictions cannot be null');
        }

        $this->container['restrictions'] = $restrictions;

        return $this;
    }

    /**
     * Gets state_in_address
     *
     * @return string|null
     */
    public function getStateInAddress()
    {
        return $this->container['state_in_address'];
    }

    /**
     * Sets state_in_address
     *
     * @param string|null $state_in_address state_in_address
     *
     * @return self
     */
    public function setStateInAddress($state_in_address)
    {

        if (is_null($state_in_address)) {
            throw new \InvalidArgumentException('non-nullable state_in_address cannot be null');
        }

        $this->container['state_in_address'] = $state_in_address;

        return $this;
    }

    /**
     * Gets state_name
     *
     * @return string|null
     */
    public function getStateName()
    {
        return $this->container['state_name'];
    }

    /**
     * Sets state_name
     *
     * @param string|null $state_name state_name
     *
     * @return self
     */
    public function setStateName($state_name)
    {

        if (is_null($state_name)) {
            throw new \InvalidArgumentException('non-nullable state_name cannot be null');
        }

        $this->container['state_name'] = $state_name;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix suffix
     *
     * @return self
     */
    public function setSuffix($suffix)
    {

        if (is_null($suffix)) {
            throw new \InvalidArgumentException('non-nullable suffix cannot be null');
        }

        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets veteran
     *
     * @return string|null
     */
    public function getVeteran()
    {
        return $this->container['veteran'];
    }

    /**
     * Sets veteran
     *
     * @param string|null $veteran veteran
     *
     * @return self
     */
    public function setVeteran($veteran)
    {

        if (is_null($veteran)) {
            throw new \InvalidArgumentException('non-nullable veteran cannot be null');
        }

        $this->container['veteran'] = $veteran;

        return $this;
    }

    /**
     * Gets zip_code_in_address
     *
     * @return string|null
     */
    public function getZipCodeInAddress()
    {
        return $this->container['zip_code_in_address'];
    }

    /**
     * Sets zip_code_in_address
     *
     * @param string|null $zip_code_in_address zip_code_in_address
     *
     * @return self
     */
    public function setZipCodeInAddress($zip_code_in_address)
    {

        if (is_null($zip_code_in_address)) {
            throw new \InvalidArgumentException('non-nullable zip_code_in_address cannot be null');
        }

        $this->container['zip_code_in_address'] = $zip_code_in_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


